cscope 15 $HOME/IFE/IFE_Software_2019/STM32F103 -q 0000004268 0000472026
	@common.h

29 #i‚de‡
COMMON_H


30 
	#COMMON_H


	)

39 
	#öt32_t
 

	)

40 
	#öt16_t
 

	)

41 
	#öt8_t
 

	)

42 
	#uöt32_t
 

	)

43 
	#uöt16_t
 

	)

44 
	#uöt8_t
 

	)

56 
	#BIT_SET
(
REG
, 
BITSET
Ë–(REGË|(BITSETË)

	)

57 
	#BIT_CLR
(
REG
, 
BITCLR
Ë–(REGË&(~(BITCLR)Ë)

	)

58 
	#BIT_CLR_SET
(
REG
, 
BITCLR
, 
BITSET
Ë–(REGË––(REGË& (~(BITCLR)ËË| (BITSETËË)

	)

62 
	#BIT_0
 0x00000001

	)

63 
	#BIT_1
 0x00000002

	)

64 
	#BIT_2
 0x00000004

	)

65 
	#BIT_3
 0x00000008

	)

66 
	#BIT_4
 0x00000010

	)

67 
	#BIT_5
 0x00000020

	)

68 
	#BIT_6
 0x00000040

	)

69 
	#BIT_7
 0x00000080

	)

70 
	#BIT_8
 0x00000100

	)

71 
	#BIT_9
 0x00000200

	)

72 
	#BIT_10
 0x00000400

	)

73 
	#BIT_11
 0x00000800

	)

74 
	#BIT_12
 0x00001000

	)

75 
	#BIT_13
 0x00002000

	)

76 
	#BIT_14
 0x00004000

	)

77 
	#BIT_15
 0x00008000

	)

78 
	#BIT_16
 0x00010000

	)

79 
	#BIT_17
 0x00020000

	)

80 
	#BIT_18
 0x00040000

	)

81 
	#BIT_19
 0x00080000

	)

82 
	#BIT_20
 0x00100000

	)

83 
	#BIT_21
 0x00200000

	)

84 
	#BIT_22
 0x00400000

	)

85 
	#BIT_23
 0x00800000

	)

86 
	#BIT_24
 0x01000000

	)

87 
	#BIT_25
 0x02000000

	)

88 
	#BIT_26
 0x04000000

	)

89 
	#BIT_27
 0x08000000

	)

90 
	#BIT_28
 0x10000000

	)

91 
	#BIT_29
 0x20000000

	)

92 
	#BIT_30
 0x40000000

	)

93 
	#BIT_31
 0x80000000

	)

95 
	#MASK_0
 0xFFFFFFFE

	)

96 
	#MASK_1
 0xFFFFFFFD

	)

97 
	#MASK_2
 0xFFFFFFFB

	)

98 
	#MASK_3
 0xFFFFFFF7

	)

99 
	#MASK_4
 0xFFFFFFEF

	)

100 
	#MASK_5
 0xFFFFFFDF

	)

101 
	#MASK_6
 0xFFFFFFBF

	)

102 
	#MASK_7
 0xFFFFFF7F

	)

103 
	#MASK_8
 0xFFFFFEFF

	)

104 
	#MASK_9
 0xFFFFFDFF

	)

105 
	#MASK_10
 0xFFFFFBFF

	)

106 
	#MASK_11
 0xFFFFF7FF

	)

107 
	#MASK_12
 0xFFFFEFFF

	)

108 
	#MASK_13
 0xFFFFDFFF

	)

109 
	#MASK_14
 0xFFFFBFFF

	)

110 
	#MASK_15
 0xFFFF7FFF

	)

111 
	#MASK_16
 0xFFFEFFFF

	)

112 
	#MASK_17
 0xFFFDFFFF

	)

113 
	#MASK_18
 0xFFFBFFFF

	)

114 
	#MASK_19
 0xFFF7FFFF

	)

115 
	#MASK_20
 0xFFEFFFFF

	)

116 
	#MASK_21
 0xFFDFFFFF

	)

117 
	#MASK_22
 0xFFBFFFFF

	)

118 
	#MASK_23
 0xFF7FFFFF

	)

119 
	#MASK_24
 0xFEFFFFFF

	)

120 
	#MASK_25
 0xFDFFFFFF

	)

121 
	#MASK_26
 0xFBFFFFFF

	)

122 
	#MASK_27
 0xF7FFFFFF

	)

123 
	#MASK_28
 0xEFFFFFFF

	)

124 
	#MASK_29
 0xDFFFFFFF

	)

125 
	#MASK_30
 0xBFFFFFFF

	)

126 
	#MASK_31
 0x7FFFFFFF

	)

	@init.c

29 
	~"comm⁄.h
"

30 
	~"ªgs.h
"

34 
Re£tH™dÀr
();

35 
HÆt
();

36 
maö
();

37 
timî2_i§
();

44 
	#ISR_NOT_IMPL
 ((
uöt32_t
 *Ë
HÆt
)

	)

51 
	#ISR_NOT_SET
 ((
uöt32_t
 *Ë
HÆt
)

	)

64 
	#STACK_START_ADDR
 0x20005000

	)

71 
	$uöt32_t
 (* c⁄° 
ve˘‹èbÀ
[]Ë
	`__©åibuã__
 ((
	`£˘i⁄
(".isrvectors"))) = {

73 (
uöt32_t
 *Ë
STACK_START_ADDR
,

74 (
uöt32_t
 *Ë
Re£tH™dÀr
,

75 
ISR_NOT_SET
,

76 
ISR_NOT_SET
,

77 
ISR_NOT_SET
,

78 
ISR_NOT_SET
,

79 
ISR_NOT_SET
,

80 
ISR_NOT_IMPL
,

81 
ISR_NOT_IMPL
,

82 
ISR_NOT_IMPL
,

83 
ISR_NOT_IMPL
,

84 
ISR_NOT_SET
,

85 
ISR_NOT_SET
,

86 
ISR_NOT_IMPL
,

87 
ISR_NOT_SET
,

88 
ISR_NOT_SET
,

89 
ISR_NOT_SET
,

90 
ISR_NOT_SET
,

91 
ISR_NOT_SET
,

92 
ISR_NOT_SET
,

93 
ISR_NOT_SET
,

94 
ISR_NOT_SET
,

95 
ISR_NOT_SET
,

96 
ISR_NOT_SET
,

97 
ISR_NOT_SET
,

98 
ISR_NOT_SET
,

99 
ISR_NOT_SET
,

100 
ISR_NOT_SET
,

101 
ISR_NOT_SET
,

102 
ISR_NOT_SET
,

103 
ISR_NOT_SET
,

104 
ISR_NOT_SET
,

105 
ISR_NOT_SET
,

106 
ISR_NOT_SET
,

107 
ISR_NOT_SET
,

108 
ISR_NOT_SET
,

109 
ISR_NOT_SET
,

110 
ISR_NOT_SET
,

111 
ISR_NOT_SET
,

112 
ISR_NOT_SET
,

113 
ISR_NOT_SET
,

114 
ISR_NOT_SET
,

115 
ISR_NOT_SET
,

116 
ISR_NOT_SET
,

117 (
uöt32_t
*Ë
timî2_i§
,

118 
ISR_NOT_SET
,

119 
ISR_NOT_SET
,

120 
ISR_NOT_SET
,

121 
ISR_NOT_SET
,

122 
ISR_NOT_SET
,

123 
ISR_NOT_SET
,

124 
ISR_NOT_SET
,

125 
ISR_NOT_SET
,

126 
ISR_NOT_SET
,

127 
ISR_NOT_SET
,

128 
ISR_NOT_SET
,

129 
ISR_NOT_SET
,

130 
ISR_NOT_SET
,

131 
ISR_NOT_SET
,

132 
ISR_NOT_IMPL
,

133 
ISR_NOT_IMPL
,

134 
ISR_NOT_IMPL
,

135 
ISR_NOT_IMPL
,

136 
ISR_NOT_IMPL
,

137 
ISR_NOT_IMPL
,

138 
ISR_NOT_IMPL
,

139 
ISR_NOT_IMPL
,

140 
ISR_NOT_IMPL
,

141 
ISR_NOT_IMPL
,

142 
ISR_NOT_IMPL
,

143 
ISR_NOT_IMPL
,

144 
ISR_NOT_IMPL
,

145 
ISR_NOT_IMPL
,

146 
ISR_NOT_IMPL
,

147 
ISR_NOT_IMPL
,

148 
ISR_NOT_IMPL
,

149 
ISR_NOT_IMPL
,

150 
ISR_NOT_IMPL
,

151 
ISR_NOT_IMPL
,

152 
ISR_NOT_IMPL
,

153 
ISR_NOT_IMPL
,

154 
ISR_NOT_IMPL
,

155 
ISR_NOT_IMPL
,

156 
ISR_NOT_IMPL


157 
	}
};

172 
__©åibuã__
 ((
n‹ëu∫
)Ë
	$Re£tH™dÀr
(){

173 
_sd©a
;

174 
_ed©a
;

175 
_sbss
;

176 
_ebss
;

177 
_ld©a
;

179 *
d°
 = &
_sd©a
;

180 *
§c
 = &
_ld©a
;

183 
	`BIT_SET
(
SCB
->
CCR
, 
BIT_9
);

186  
d°
 < &
_ed©a
 ) { *d°++ = *
§c
++; }

189  
d°
 = &
_sbss
; d° < &
_ebss
; dst++ ) { *dst = 0; }

192 
	`maö
();

196 
	}
}

203 
__©åibuã__
 ((
n‹ëu∫
)Ë
	$HÆt
(){

205 
	}
}

208 
__©åibuã__
 ((
öãºu±
 ("IRQ"))Ë
	$timî2_i§
() {

209 vﬁ©ûê
TIM2_Ty≥
* 
timî2
 = (vﬁ©ûêTIM2_Ty≥*)
TIM2_BASE
;

210 vﬁ©ûê
GPIOA_Ty≥
* 
gpioc
 = (vﬁ©ûêGPIOA_Ty≥*)
GPIOC_BASE
;

212 if(
gpioc
->
ODR
 & (1 << 13)) gpioc->ODR &= ~(1 << 13);

213 
gpioc
->
ODR
 |= (1 << 13);

215 
timî2
->
SR
 &= ~(1 << 6);

216 
	}
}

	@main.c

9 
	~"ªgs.h
"

11 vﬁ©ûê
TIM2_Ty≥
* 
	gtimî2
 = (vﬁ©ûêTIM2_Ty≥*)
TIM2_BASE
;

12 vﬁ©ûê
GPIOA_Ty≥
* 
	ggpioc
 = (vﬁ©ûêGPIOA_Ty≥*)
GPIOC_BASE
;

13 vﬁ©ûê
RCC_Ty≥
* 
	grcc
 = (vﬁ©ûêRCC_Ty≥*)
RCC_BASE
;

17 
	$maö
(){

20 
rcc
->
APB2ENR
 |= (0x01 << 4);

23 
gpioc
->
CRH
 |= (0x02 << 20);

26 
rcc
->
APB1ENR
 |= (0x01 << 0);

29 
timî2
->
CR1
 |= (0x01 << 0);

30 
timî2
->
PSC
 |= 0x1C20;

31 
timî2
->
ARR
 |= 0x2710;

32 
timî2
->
DIER
 |= (0x01 << 6);

36 
i
 = 0; i < 50000; i++Ë
	`__asm__
("nop");

37 
gpioc
->
ODR
 |= (0x01 << 13);

38 
i
 = 0; i < 50000; i++Ë
	`__asm__
("nop");

39 
gpioc
->
ODR
 &= ~(0x01 << 13);

41 
	}
}

	@misc.c

24 
	~"misc.h
"

47 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

96 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

99 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

102 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

103 
	}
}

112 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

114 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

118 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

119 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

121 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

124 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

125 
tmµª
 = (0x4 - 
tmµri‹ôy
);

126 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

128 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

129 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

130 
tmµri‹ôy
 =Åmppriority << 0x04;

132 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

135 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

136 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

141 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

142 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

144 
	}
}

156 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

159 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

160 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

162 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

163 
	}
}

175 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

178 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

181 i‡(
NewSèã
 !
DISABLE
)

183 
SCB
->
SCR
 |
LowPowîMode
;

187 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

189 
	}
}

199 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

202 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

203 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

205 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

209 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

211 
	}
}

	@misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt8_t
 
NVIC_IRQCh™√l
;

57 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

61 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

115 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

116 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

117 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

118 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

127 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

128 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

129 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

130 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

132 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

141 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

143 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

145 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

147 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

149 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

152 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

156 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

158 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

160 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

162 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

172 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

173 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

174 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

175 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

196 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

197 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

198 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

199 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

200 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

202 #ifde‡
__˝lu•lus


	@regs.h

29 #i‚de‡
REGS_H


30 
	#REGS_H


	)

32 
	~"comm⁄.h
"

47 vﬁ©ûê
uöt16_t
 
	mF_SIZE
;

48 vﬁ©ûê
uöt16_t
 
	mRESERVED_1
[3];

49 vﬁ©ûê
uöt16_t
 
	mU_ID_15_0
;

50 vﬁ©ûê
uöt16_t
 
	mU_ID_31_16
;

51 vﬁ©ûê
uöt16_t
 
	mU_ID_63_48
;

52 vﬁ©ûê
uöt16_t
 
	mU_ID_47_32
;

53 vﬁ©ûê
uöt16_t
 
	mU_ID_95_80
;

54 vﬁ©ûê
uöt16_t
 
	mU_ID_79_64
;

55 } 
	tSIG_Ty≥
;

58 vﬁ©ûê
uöt32_t
 
	mCR1
;

59 vﬁ©ûê
uöt32_t
 
	mCR2
;

60 vﬁ©ûê
uöt32_t
 
	mSMCR
;

61 vﬁ©ûê
uöt32_t
 
	mDIER
;

62 vﬁ©ûê
uöt32_t
 
	mSR
;

63 vﬁ©ûê
uöt32_t
 
	mEGR
;

64 vﬁ©ûê
uöt32_t
 
	mCCMR1
;

65 vﬁ©ûê
uöt32_t
 
	mCCMR2
;

66 vﬁ©ûê
uöt32_t
 
	mCCER
;

67 vﬁ©ûê
uöt32_t
 
	mCNT
;

68 vﬁ©ûê
uöt32_t
 
	mPSC
;

69 vﬁ©ûê
uöt32_t
 
	mARR
;

70 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
;

71 vﬁ©ûê
uöt32_t
 
	mCCR1
;

72 vﬁ©ûê
uöt32_t
 
	mCCR2
;

73 vﬁ©ûê
uöt32_t
 
	mCCR3
;

74 vﬁ©ûê
uöt32_t
 
	mCCR4
;

75 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
;

76 vﬁ©ûê
uöt32_t
 
	mDCR
;

77 vﬁ©ûê
uöt32_t
 
	mDMAR
;

78 } 
	tTIM2_Ty≥
;

81 vﬁ©ûê
uöt32_t
 
	mCRH
;

82 vﬁ©ûê
uöt32_t
 
	mCRL
;

83 vﬁ©ûê
uöt32_t
 
	mPRLH
;

84 vﬁ©ûê
uöt32_t
 
	mPRLL
;

85 vﬁ©ûê
uöt32_t
 
	mDIVH
;

86 vﬁ©ûê
uöt32_t
 
	mDIVL
;

87 vﬁ©ûê
uöt32_t
 
	mCNTH
;

88 vﬁ©ûê
uöt32_t
 
	mCNTL
;

89 vﬁ©ûê
uöt32_t
 
	mALRH
;

90 vﬁ©ûê
uöt32_t
 
	mALRL
;

91 } 
	tRTC_Ty≥
;

94 vﬁ©ûê
uöt32_t
 
	mCR
;

95 vﬁ©ûê
uöt32_t
 
	mCFR
;

96 vﬁ©ûê
uöt32_t
 
	mSR
;

97 } 
	tWWDG_Ty≥
;

100 vﬁ©ûê
uöt32_t
 
	mKR
;

101 vﬁ©ûê
uöt32_t
 
	mPR
;

102 vﬁ©ûê
uöt32_t
 
	mRLR
;

103 vﬁ©ûê
uöt32_t
 
	mSR
;

104 } 
	tIWDG_Ty≥
;

107 vﬁ©ûê
uöt32_t
 
	mCR1
;

108 vﬁ©ûê
uöt32_t
 
	mCR2
;

109 vﬁ©ûê
uöt32_t
 
	mSR
;

110 vﬁ©ûê
uöt32_t
 
	mDR
;

111 vﬁ©ûê
uöt32_t
 
	mCRCPR
;

112 vﬁ©ûê
uöt32_t
 
	mRXCRCR
;

113 vﬁ©ûê
uöt32_t
 
	mTXCRCR
;

114 vﬁ©ûê
uöt32_t
 
	mI2SCFGR
;

115 vﬁ©ûê
uöt32_t
 
	mI2SPR
;

116 } 
	tSPI1_Ty≥
;

119 vﬁ©ûê
uöt32_t
 
	mSR
;

120 vﬁ©ûê
uöt32_t
 
	mDR
;

121 vﬁ©ûê
uöt32_t
 
	mBRR
;

122 vﬁ©ûê
uöt32_t
 
	mCR1
;

123 vﬁ©ûê
uöt32_t
 
	mCR2
;

124 vﬁ©ûê
uöt32_t
 
	mCR3
;

125 vﬁ©ûê
uöt32_t
 
	mGTPR
;

126 } 
	tUSART1_Ty≥
;

129 vﬁ©ûê
uöt32_t
 
	mCR1
;

130 vﬁ©ûê
uöt32_t
 
	mCR2
;

131 vﬁ©ûê
uöt32_t
 
	mOAR1
;

132 vﬁ©ûê
uöt32_t
 
	mOAR2
;

133 vﬁ©ûê
uöt32_t
 
	mDR
;

134 vﬁ©ûê
uöt32_t
 
	mSR1
;

135 vﬁ©ûê
uöt32_t
 
	mSR2
;

136 vﬁ©ûê
uöt32_t
 
	mCCR
;

137 vﬁ©ûê
uöt32_t
 
	mTRISE
;

138 } 
	tI2C1_Ty≥
;

141 vﬁ©ûê
uöt32_t
 
	mEP0R
;

142 vﬁ©ûê
uöt32_t
 
	mEP1R
;

143 vﬁ©ûê
uöt32_t
 
	mEP2R
;

144 vﬁ©ûê
uöt32_t
 
	mEP3R
;

145 vﬁ©ûê
uöt32_t
 
	mEP4R
;

146 vﬁ©ûê
uöt32_t
 
	mEP5R
;

147 vﬁ©ûê
uöt32_t
 
	mEP6R
;

148 vﬁ©ûê
uöt32_t
 
	mEP7R
;

149 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[8];

150 vﬁ©ûê
uöt32_t
 
	mCNTR
;

151 vﬁ©ûê
uöt32_t
 
	mISTR
;

152 vﬁ©ûê
uöt32_t
 
	mFNR
;

153 vﬁ©ûê
uöt32_t
 
	mDADDR
;

154 vﬁ©ûê
uöt32_t
 
	mBTABLE
;

155 } 
	tUSB_Ty≥
;

158 vﬁ©ûê
uöt32_t
 
	mCAN_MCR
;

159 vﬁ©ûê
uöt32_t
 
	mCAN_MSR
;

160 vﬁ©ûê
uöt32_t
 
	mCAN_TSR
;

161 vﬁ©ûê
uöt32_t
 
	mCAN_RF0R
;

162 vﬁ©ûê
uöt32_t
 
	mCAN_RF1R
;

163 vﬁ©ûê
uöt32_t
 
	mCAN_IER
;

164 vﬁ©ûê
uöt32_t
 
	mCAN_ESR
;

165 vﬁ©ûê
uöt32_t
 
	mCAN_BTR
;

166 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[88];

167 vﬁ©ûê
uöt32_t
 
	mCAN_TI0R
;

168 vﬁ©ûê
uöt32_t
 
	mCAN_TDT0R
;

169 vﬁ©ûê
uöt32_t
 
	mCAN_TDL0R
;

170 vﬁ©ûê
uöt32_t
 
	mCAN_TDH0R
;

171 vﬁ©ûê
uöt32_t
 
	mCAN_TI1R
;

172 vﬁ©ûê
uöt32_t
 
	mCAN_TDT1R
;

173 vﬁ©ûê
uöt32_t
 
	mCAN_TDL1R
;

174 vﬁ©ûê
uöt32_t
 
	mCAN_TDH1R
;

175 vﬁ©ûê
uöt32_t
 
	mCAN_TI2R
;

176 vﬁ©ûê
uöt32_t
 
	mCAN_TDT2R
;

177 vﬁ©ûê
uöt32_t
 
	mCAN_TDL2R
;

178 vﬁ©ûê
uöt32_t
 
	mCAN_TDH2R
;

179 vﬁ©ûê
uöt32_t
 
	mCAN_RI0R
;

180 vﬁ©ûê
uöt32_t
 
	mCAN_RDT0R
;

181 vﬁ©ûê
uöt32_t
 
	mCAN_RDL0R
;

182 vﬁ©ûê
uöt32_t
 
	mCAN_RDH0R
;

183 vﬁ©ûê
uöt32_t
 
	mCAN_RI1R
;

184 vﬁ©ûê
uöt32_t
 
	mCAN_RDT1R
;

185 vﬁ©ûê
uöt32_t
 
	mCAN_RDL1R
;

186 vﬁ©ûê
uöt32_t
 
	mCAN_RDH1R
;

187 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
[12];

188 vﬁ©ûê
uöt32_t
 
	mCAN_FMR
;

189 vﬁ©ûê
uöt32_t
 
	mCAN_FM1R
;

190 vﬁ©ûê
uöt32_t
 
	mRESERVED_3
;

191 vﬁ©ûê
uöt32_t
 
	mCAN_FS1R
;

192 vﬁ©ûê
uöt32_t
 
	mRESERVED_4
;

193 vﬁ©ûê
uöt32_t
 
	mCAN_FFA1R
;

194 vﬁ©ûê
uöt32_t
 
	mRESERVED_5
;

195 vﬁ©ûê
uöt32_t
 
	mCAN_FA1R
;

196 vﬁ©ûê
uöt32_t
 
	mRESERVED_6
[8];

197 vﬁ©ûê
uöt32_t
 
	mF0R1
;

198 vﬁ©ûê
uöt32_t
 
	mF0R2
;

199 vﬁ©ûê
uöt32_t
 
	mF1R1
;

200 vﬁ©ûê
uöt32_t
 
	mF1R2
;

201 vﬁ©ûê
uöt32_t
 
	mF2R1
;

202 vﬁ©ûê
uöt32_t
 
	mF2R2
;

203 vﬁ©ûê
uöt32_t
 
	mF3R1
;

204 vﬁ©ûê
uöt32_t
 
	mF3R2
;

205 vﬁ©ûê
uöt32_t
 
	mF4R1
;

206 vﬁ©ûê
uöt32_t
 
	mF4R2
;

207 vﬁ©ûê
uöt32_t
 
	mF5R1
;

208 vﬁ©ûê
uöt32_t
 
	mF5R2
;

209 vﬁ©ûê
uöt32_t
 
	mF6R1
;

210 vﬁ©ûê
uöt32_t
 
	mF6R2
;

211 vﬁ©ûê
uöt32_t
 
	mF7R1
;

212 vﬁ©ûê
uöt32_t
 
	mF7R2
;

213 vﬁ©ûê
uöt32_t
 
	mF8R1
;

214 vﬁ©ûê
uöt32_t
 
	mF8R2
;

215 vﬁ©ûê
uöt32_t
 
	mF9R1
;

216 vﬁ©ûê
uöt32_t
 
	mF9R2
;

217 vﬁ©ûê
uöt32_t
 
	mF10R1
;

218 vﬁ©ûê
uöt32_t
 
	mF10R2
;

219 vﬁ©ûê
uöt32_t
 
	mF11R1
;

220 vﬁ©ûê
uöt32_t
 
	mF11R2
;

221 vﬁ©ûê
uöt32_t
 
	mF12R1
;

222 vﬁ©ûê
uöt32_t
 
	mF12R2
;

223 vﬁ©ûê
uöt32_t
 
	mF13R1
;

224 vﬁ©ûê
uöt32_t
 
	mF13R2
;

225 } 
	tCAN1_Ty≥
;

228 vﬁ©ûê
uöt32_t
 
	mDR1
;

229 vﬁ©ûê
uöt32_t
 
	mDR2
;

230 vﬁ©ûê
uöt32_t
 
	mDR3
;

231 vﬁ©ûê
uöt32_t
 
	mDR4
;

232 vﬁ©ûê
uöt32_t
 
	mDR5
;

233 vﬁ©ûê
uöt32_t
 
	mDR6
;

234 vﬁ©ûê
uöt32_t
 
	mDR7
;

235 vﬁ©ûê
uöt32_t
 
	mDR8
;

236 vﬁ©ûê
uöt32_t
 
	mDR9
;

237 vﬁ©ûê
uöt32_t
 
	mDR10
;

238 vﬁ©ûê
uöt32_t
 
	mRTCCR
;

239 vﬁ©ûê
uöt32_t
 
	mCR
;

240 vﬁ©ûê
uöt32_t
 
	mCSR
;

241 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[2];

242 vﬁ©ûê
uöt32_t
 
	mDR11
;

243 vﬁ©ûê
uöt32_t
 
	mDR12
;

244 vﬁ©ûê
uöt32_t
 
	mDR13
;

245 vﬁ©ûê
uöt32_t
 
	mDR14
;

246 vﬁ©ûê
uöt32_t
 
	mDR15
;

247 vﬁ©ûê
uöt32_t
 
	mDR16
;

248 vﬁ©ûê
uöt32_t
 
	mDR17
;

249 vﬁ©ûê
uöt32_t
 
	mDR18
;

250 vﬁ©ûê
uöt32_t
 
	mDR19
;

251 vﬁ©ûê
uöt32_t
 
	mDR20
;

252 vﬁ©ûê
uöt32_t
 
	mDR21
;

253 vﬁ©ûê
uöt32_t
 
	mDR22
;

254 vﬁ©ûê
uöt32_t
 
	mDR23
;

255 vﬁ©ûê
uöt32_t
 
	mDR24
;

256 vﬁ©ûê
uöt32_t
 
	mDR25
;

257 vﬁ©ûê
uöt32_t
 
	mDR26
;

258 vﬁ©ûê
uöt32_t
 
	mDR27
;

259 vﬁ©ûê
uöt32_t
 
	mDR28
;

260 vﬁ©ûê
uöt32_t
 
	mDR29
;

261 vﬁ©ûê
uöt32_t
 
	mDR30
;

262 vﬁ©ûê
uöt32_t
 
	mDR31
;

263 vﬁ©ûê
uöt32_t
 
	mDR32
;

264 vﬁ©ûê
uöt32_t
 
	mDR33
;

265 vﬁ©ûê
uöt32_t
 
	mDR34
;

266 vﬁ©ûê
uöt32_t
 
	mDR35
;

267 vﬁ©ûê
uöt32_t
 
	mDR36
;

268 vﬁ©ûê
uöt32_t
 
	mDR37
;

269 vﬁ©ûê
uöt32_t
 
	mDR38
;

270 vﬁ©ûê
uöt32_t
 
	mDR39
;

271 vﬁ©ûê
uöt32_t
 
	mDR40
;

272 vﬁ©ûê
uöt32_t
 
	mDR41
;

273 vﬁ©ûê
uöt32_t
 
	mDR42
;

274 } 
	tBKP_Ty≥
;

277 vﬁ©ûê
uöt32_t
 
	mCR
;

278 vﬁ©ûê
uöt32_t
 
	mCSR
;

279 } 
	tPWR_Ty≥
;

282 vﬁ©ûê
uöt32_t
 
	mEVCR
;

283 vﬁ©ûê
uöt32_t
 
	mMAPR
;

284 vﬁ©ûê
uöt32_t
 
	mEXTICR1
;

285 vﬁ©ûê
uöt32_t
 
	mEXTICR2
;

286 vﬁ©ûê
uöt32_t
 
	mEXTICR3
;

287 vﬁ©ûê
uöt32_t
 
	mEXTICR4
;

288 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
;

289 vﬁ©ûê
uöt32_t
 
	mMAPR2
;

290 } 
	tAFIO_Ty≥
;

293 vﬁ©ûê
uöt32_t
 
	mIMR
;

294 vﬁ©ûê
uöt32_t
 
	mEMR
;

295 vﬁ©ûê
uöt32_t
 
	mRTSR
;

296 vﬁ©ûê
uöt32_t
 
	mFTSR
;

297 vﬁ©ûê
uöt32_t
 
	mSWIER
;

298 vﬁ©ûê
uöt32_t
 
	mPR
;

299 } 
	tEXTI_Ty≥
;

302 vﬁ©ûê
uöt32_t
 
	mCRL
;

303 vﬁ©ûê
uöt32_t
 
	mCRH
;

304 vﬁ©ûê
uöt32_t
 
	mIDR
;

305 vﬁ©ûê
uöt32_t
 
	mODR
;

306 vﬁ©ûê
uöt32_t
 
	mBSRR
;

307 vﬁ©ûê
uöt32_t
 
	mBRR
;

308 vﬁ©ûê
uöt32_t
 
	mLCKR
;

309 } 
	tGPIOA_Ty≥
;

312 vﬁ©ûê
uöt32_t
 
	mSR
;

313 vﬁ©ûê
uöt32_t
 
	mCR1
;

314 vﬁ©ûê
uöt32_t
 
	mCR2
;

315 vﬁ©ûê
uöt32_t
 
	mSMPR1
;

316 vﬁ©ûê
uöt32_t
 
	mSMPR2
;

317 vﬁ©ûê
uöt32_t
 
	mJOFR1
;

318 vﬁ©ûê
uöt32_t
 
	mJOFR2
;

319 vﬁ©ûê
uöt32_t
 
	mJOFR3
;

320 vﬁ©ûê
uöt32_t
 
	mJOFR4
;

321 vﬁ©ûê
uöt32_t
 
	mHTR
;

322 vﬁ©ûê
uöt32_t
 
	mLTR
;

323 vﬁ©ûê
uöt32_t
 
	mSQR1
;

324 vﬁ©ûê
uöt32_t
 
	mSQR2
;

325 vﬁ©ûê
uöt32_t
 
	mSQR3
;

326 vﬁ©ûê
uöt32_t
 
	mJSQR
;

327 vﬁ©ûê
uöt32_t
 
	mJDR1
;

328 vﬁ©ûê
uöt32_t
 
	mJDR2
;

329 vﬁ©ûê
uöt32_t
 
	mJDR3
;

330 vﬁ©ûê
uöt32_t
 
	mJDR4
;

331 vﬁ©ûê
uöt32_t
 
	mDR
;

332 } 
	tADC1_Ty≥
;

335 vﬁ©ûê
uöt32_t
 
	mSR
;

336 vﬁ©ûê
uöt32_t
 
	mCR1
;

337 vﬁ©ûê
uöt32_t
 
	mCR2
;

338 vﬁ©ûê
uöt32_t
 
	mSMPR1
;

339 vﬁ©ûê
uöt32_t
 
	mSMPR2
;

340 vﬁ©ûê
uöt32_t
 
	mJOFR1
;

341 vﬁ©ûê
uöt32_t
 
	mJOFR2
;

342 vﬁ©ûê
uöt32_t
 
	mJOFR3
;

343 vﬁ©ûê
uöt32_t
 
	mJOFR4
;

344 vﬁ©ûê
uöt32_t
 
	mHTR
;

345 vﬁ©ûê
uöt32_t
 
	mLTR
;

346 vﬁ©ûê
uöt32_t
 
	mSQR1
;

347 vﬁ©ûê
uöt32_t
 
	mSQR2
;

348 vﬁ©ûê
uöt32_t
 
	mSQR3
;

349 vﬁ©ûê
uöt32_t
 
	mJSQR
;

350 vﬁ©ûê
uöt32_t
 
	mJDR1
;

351 vﬁ©ûê
uöt32_t
 
	mJDR2
;

352 vﬁ©ûê
uöt32_t
 
	mJDR3
;

353 vﬁ©ûê
uöt32_t
 
	mJDR4
;

354 vﬁ©ûê
uöt32_t
 
	mDR
;

355 } 
	tADC2_Ty≥
;

358 vﬁ©ûê
uöt32_t
 
	mCR1
;

359 vﬁ©ûê
uöt32_t
 
	mCR2
;

360 vﬁ©ûê
uöt32_t
 
	mSMCR
;

361 vﬁ©ûê
uöt32_t
 
	mDIER
;

362 vﬁ©ûê
uöt32_t
 
	mSR
;

363 vﬁ©ûê
uöt32_t
 
	mEGR
;

364 vﬁ©ûê
uöt32_t
 
	mCCMR1
;

365 vﬁ©ûê
uöt32_t
 
	mCCMR2
;

366 vﬁ©ûê
uöt32_t
 
	mCCER
;

367 vﬁ©ûê
uöt32_t
 
	mCNT
;

368 vﬁ©ûê
uöt32_t
 
	mPSC
;

369 vﬁ©ûê
uöt32_t
 
	mARR
;

370 vﬁ©ûê
uöt32_t
 
	mRCR
;

371 vﬁ©ûê
uöt32_t
 
	mCCR1
;

372 vﬁ©ûê
uöt32_t
 
	mCCR2
;

373 vﬁ©ûê
uöt32_t
 
	mCCR3
;

374 vﬁ©ûê
uöt32_t
 
	mCCR4
;

375 vﬁ©ûê
uöt32_t
 
	mBDTR
;

376 vﬁ©ûê
uöt32_t
 
	mDCR
;

377 vﬁ©ûê
uöt32_t
 
	mDMAR
;

378 } 
	tTIM1_Ty≥
;

381 vﬁ©ûê
uöt32_t
 
	mISR
;

382 vﬁ©ûê
uöt32_t
 
	mIFCR
;

383 vﬁ©ûê
uöt32_t
 
	mCCR1
;

384 vﬁ©ûê
uöt32_t
 
	mCNDTR1
;

385 vﬁ©ûê
uöt32_t
 
	mCPAR1
;

386 vﬁ©ûê
uöt32_t
 
	mCMAR1
;

387 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
;

388 vﬁ©ûê
uöt32_t
 
	mCCR2
;

389 vﬁ©ûê
uöt32_t
 
	mCNDTR2
;

390 vﬁ©ûê
uöt32_t
 
	mCPAR2
;

391 vﬁ©ûê
uöt32_t
 
	mCMAR2
;

392 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
;

393 vﬁ©ûê
uöt32_t
 
	mCCR3
;

394 vﬁ©ûê
uöt32_t
 
	mCNDTR3
;

395 vﬁ©ûê
uöt32_t
 
	mCPAR3
;

396 vﬁ©ûê
uöt32_t
 
	mCMAR3
;

397 vﬁ©ûê
uöt32_t
 
	mRESERVED_3
;

398 vﬁ©ûê
uöt32_t
 
	mCCR4
;

399 vﬁ©ûê
uöt32_t
 
	mCNDTR4
;

400 vﬁ©ûê
uöt32_t
 
	mCPAR4
;

401 vﬁ©ûê
uöt32_t
 
	mCMAR4
;

402 vﬁ©ûê
uöt32_t
 
	mRESERVED_4
;

403 vﬁ©ûê
uöt32_t
 
	mCCR5
;

404 vﬁ©ûê
uöt32_t
 
	mCNDTR5
;

405 vﬁ©ûê
uöt32_t
 
	mCPAR5
;

406 vﬁ©ûê
uöt32_t
 
	mCMAR5
;

407 vﬁ©ûê
uöt32_t
 
	mRESERVED_5
;

408 vﬁ©ûê
uöt32_t
 
	mCCR6
;

409 vﬁ©ûê
uöt32_t
 
	mCNDTR6
;

410 vﬁ©ûê
uöt32_t
 
	mCPAR6
;

411 vﬁ©ûê
uöt32_t
 
	mCMAR6
;

412 vﬁ©ûê
uöt32_t
 
	mRESERVED_6
;

413 vﬁ©ûê
uöt32_t
 
	mCCR7
;

414 vﬁ©ûê
uöt32_t
 
	mCNDTR7
;

415 vﬁ©ûê
uöt32_t
 
	mCPAR7
;

416 vﬁ©ûê
uöt32_t
 
	mCMAR7
;

417 } 
	tDMA1_Ty≥
;

420 vﬁ©ûê
uöt32_t
 
	mCR
;

421 vﬁ©ûê
uöt32_t
 
	mCFGR
;

422 vﬁ©ûê
uöt32_t
 
	mCIR
;

423 vﬁ©ûê
uöt32_t
 
	mAPB2RSTR
;

424 vﬁ©ûê
uöt32_t
 
	mAPB1RSTR
;

425 vﬁ©ûê
uöt32_t
 
	mAHBENR
;

426 vﬁ©ûê
uöt32_t
 
	mAPB2ENR
;

427 vﬁ©ûê
uöt32_t
 
	mAPB1ENR
;

428 vﬁ©ûê
uöt32_t
 
	mBDCR
;

429 vﬁ©ûê
uöt32_t
 
	mCSR
;

430 } 
	tRCC_Ty≥
;

433 vﬁ©ûê
uöt32_t
 
	mACR
;

434 vﬁ©ûê
uöt32_t
 
	mKEYR
;

435 vﬁ©ûê
uöt32_t
 
	mOPTKEYR
;

436 vﬁ©ûê
uöt32_t
 
	mSR
;

437 vﬁ©ûê
uöt32_t
 
	mCR
;

438 vﬁ©ûê
uöt32_t
 
	mAR
;

439 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
;

440 vﬁ©ûê
uöt32_t
 
	mOBR
;

441 vﬁ©ûê
uöt32_t
 
	mWRPR
;

442 } 
	tFLASH_Ty≥
;

445 vﬁ©ûê
uöt32_t
 
	mDR
;

446 vﬁ©ûê
uöt32_t
 
	mIDR
;

447 vﬁ©ûê
uöt32_t
 
	mCR
;

448 } 
	tCRC_Ty≥
;

451 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
;

452 vﬁ©ûê
uöt32_t
 
	mICTR
;

453 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
[62];

454 vﬁ©ûê
uöt32_t
 
	mISER0
;

455 vﬁ©ûê
uöt32_t
 
	mISER1
;

456 vﬁ©ûê
uöt32_t
 
	mRESERVED_3
[30];

457 vﬁ©ûê
uöt32_t
 
	mICER0
;

458 vﬁ©ûê
uöt32_t
 
	mICER1
;

459 vﬁ©ûê
uöt32_t
 
	mRESERVED_4
[30];

460 vﬁ©ûê
uöt32_t
 
	mISPR0
;

461 vﬁ©ûê
uöt32_t
 
	mISPR1
;

462 vﬁ©ûê
uöt32_t
 
	mRESERVED_5
[30];

463 vﬁ©ûê
uöt32_t
 
	mICPR0
;

464 vﬁ©ûê
uöt32_t
 
	mICPR1
;

465 vﬁ©ûê
uöt32_t
 
	mRESERVED_6
[30];

466 vﬁ©ûê
uöt32_t
 
	mIABR0
;

467 vﬁ©ûê
uöt32_t
 
	mIABR1
;

468 vﬁ©ûê
uöt32_t
 
	mRESERVED_7
[62];

469 vﬁ©ûê
uöt32_t
 
	mIPR0
;

470 vﬁ©ûê
uöt32_t
 
	mIPR1
;

471 vﬁ©ûê
uöt32_t
 
	mIPR2
;

472 vﬁ©ûê
uöt32_t
 
	mIPR3
;

473 vﬁ©ûê
uöt32_t
 
	mIPR4
;

474 vﬁ©ûê
uöt32_t
 
	mIPR5
;

475 vﬁ©ûê
uöt32_t
 
	mIPR6
;

476 vﬁ©ûê
uöt32_t
 
	mIPR7
;

477 vﬁ©ûê
uöt32_t
 
	mIPR8
;

478 vﬁ©ûê
uöt32_t
 
	mIPR9
;

479 vﬁ©ûê
uöt32_t
 
	mIPR10
;

480 vﬁ©ûê
uöt32_t
 
	mIPR11
;

481 vﬁ©ûê
uöt32_t
 
	mIPR12
;

482 vﬁ©ûê
uöt32_t
 
	mIPR13
;

483 vﬁ©ûê
uöt32_t
 
	mIPR14
;

484 vﬁ©ûê
uöt32_t
 
	mRESERVED_8
[689];

485 vﬁ©ûê
uöt32_t
 
	mSTIR
;

486 } 
	tNVIC_Ty≥
;

489 vﬁ©ûê
uöt32_t
 
	mCTRL
;

490 vﬁ©ûê
uöt32_t
 
	mLOAD
;

491 vﬁ©ûê
uöt32_t
 
	mVAL
;

492 vﬁ©ûê
uöt32_t
 
	mCALIB
;

493 } 
	tSTK_Ty≥
;

496 vﬁ©ûê
uöt32_t
 
	mCPUID
;

497 vﬁ©ûê
uöt32_t
 
	mICSR
;

498 vﬁ©ûê
uöt32_t
 
	mVTOR
;

499 vﬁ©ûê
uöt32_t
 
	mAIRCR
;

500 vﬁ©ûê
uöt32_t
 
	mSCR
;

501 vﬁ©ûê
uöt32_t
 
	mCCR
;

502 vﬁ©ûê
uöt32_t
 
	mSHPR1
;

503 vﬁ©ûê
uöt32_t
 
	mSHPR2
;

504 vﬁ©ûê
uöt32_t
 
	mSHPR3
;

505 vﬁ©ûê
uöt32_t
 
	mSHCRS
;

506 vﬁ©ûê
uöt32_t
 
	mCFSR
;

507 vﬁ©ûê
uöt32_t
 
	mHFSR
;

508 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
;

509 vﬁ©ûê
uöt32_t
 
	mMMAR
;

510 vﬁ©ûê
uöt32_t
 
	mBFAR
;

511 } 
	tSCB_Ty≥
;

514 vﬁ©ûê
uöt32_t
 
	mIDCODE
;

515 vﬁ©ûê
uöt32_t
 
	mCR
;

516 } 
	tDBG_Ty≥
;

524 
	#SIG_BASE
 ((
uöt32_t
Ë0x1FFFF7E0)

	)

525 
	#TIM2_BASE
 ((
uöt32_t
Ë0x40000000)

	)

526 
	#TIM3_BASE
 ((
uöt32_t
Ë0x40000400)

	)

527 
	#TIM4_BASE
 ((
uöt32_t
Ë0x40000800)

	)

528 
	#RTC_BASE
 ((
uöt32_t
Ë0x40002800)

	)

529 
	#WWDG_BASE
 ((
uöt32_t
Ë0x40002C00)

	)

530 
	#IWDG_BASE
 ((
uöt32_t
Ë0x40003000)

	)

531 
	#SPI2_BASE
 ((
uöt32_t
Ë0x40003800)

	)

532 
	#USART2_BASE
 ((
uöt32_t
Ë0x40004400)

	)

533 
	#USART3_BASE
 ((
uöt32_t
Ë0x40004800)

	)

534 
	#I2C1_BASE
 ((
uöt32_t
Ë0x40005400)

	)

535 
	#I2C2_BASE
 ((
uöt32_t
Ë0x40005800)

	)

536 
	#USB_BASE
 ((
uöt32_t
Ë0x40005C00)

	)

537 
	#CAN1_BASE
 ((
uöt32_t
Ë0x40006400)

	)

538 
	#BKP_BASE
 ((
uöt32_t
Ë0x40006C00)

	)

539 
	#PWR_BASE
 ((
uöt32_t
Ë0x40007000)

	)

540 
	#AFIO_BASE
 ((
uöt32_t
Ë0x40010000)

	)

541 
	#EXTI_BASE
 ((
uöt32_t
Ë0x40010400)

	)

542 
	#GPIOA_BASE
 ((
uöt32_t
Ë0x40010800)

	)

543 
	#GPIOB_BASE
 ((
uöt32_t
Ë0x40010C00)

	)

544 
	#GPIOC_BASE
 ((
uöt32_t
Ë0x40011000)

	)

545 
	#GPIOD_BASE
 ((
uöt32_t
Ë0x40011400)

	)

546 
	#ADC1_BASE
 ((
uöt32_t
Ë0x40012400)

	)

547 
	#ADC2_BASE
 ((
uöt32_t
Ë0x40012800)

	)

548 
	#TIM1_BASE
 ((
uöt32_t
Ë0x40012C00)

	)

549 
	#SPI1_BASE
 ((
uöt32_t
Ë0x40013000)

	)

550 
	#USART1_BASE
 ((
uöt32_t
Ë0x40013800)

	)

551 
	#DMA1_BASE
 ((
uöt32_t
Ë0x40020000)

	)

552 
	#RCC_BASE
 ((
uöt32_t
Ë0x40021000)

	)

553 
	#FLASH_BASE
 ((
uöt32_t
Ë0x40022000)

	)

554 
	#CRC_BASE
 ((
uöt32_t
Ë0x40023000)

	)

555 
	#NVIC_BASE
 ((
uöt32_t
Ë0xE000E000)

	)

556 
	#STK_BASE
 ((
uöt32_t
Ë0xE000E010)

	)

557 
	#SCB_BASE
 ((
uöt32_t
Ë0xE000ED00)

	)

558 
	#DBG_BASE
 ((
uöt32_t
Ë0xE0042000)

	)

566 
	#SIG
 ( (
SIG_Ty≥
*Ë
SIG_BASE
 )

	)

567 
	#TIM2
 ( (
TIM2_Ty≥
*Ë
TIM2_BASE
 )

	)

568 
	#TIM3
 ( (
TIM2_Ty≥
*Ë
TIM3_BASE
 )

	)

569 
	#TIM4
 ( (
TIM2_Ty≥
*Ë
TIM4_BASE
 )

	)

570 
	#RTC
 ( (
RTC_Ty≥
*Ë
RTC_BASE
 )

	)

571 
	#WWDG
 ( (
WWDG_Ty≥
*Ë
WWDG_BASE
 )

	)

572 
	#IWDG
 ( (
IWDG_Ty≥
*Ë
IWDG_BASE
 )

	)

573 
	#SPI2
 ( (
SPI1_Ty≥
*Ë
SPI2_BASE
 )

	)

574 
	#USART2
 ( (
USART1_Ty≥
*Ë
USART2_BASE
 )

	)

575 
	#USART3
 ( (
USART1_Ty≥
*Ë
USART3_BASE
 )

	)

576 
	#I2C1
 ( (
I2C1_Ty≥
*Ë
I2C1_BASE
 )

	)

577 
	#I2C2
 ( (
I2C1_Ty≥
*Ë
I2C2_BASE
 )

	)

578 
	#USB
 ( (
USB_Ty≥
*Ë
USB_BASE
 )

	)

579 
	#CAN1
 ( (
CAN1_Ty≥
*Ë
CAN1_BASE
 )

	)

580 
	#BKP
 ( (
BKP_Ty≥
*Ë
BKP_BASE
 )

	)

581 
	#PWR
 ( (
PWR_Ty≥
*Ë
PWR_BASE
 )

	)

582 
	#AFIO
 ( (
AFIO_Ty≥
*Ë
AFIO_BASE
 )

	)

583 
	#EXTI
 ( (
EXTI_Ty≥
*Ë
EXTI_BASE
 )

	)

584 
	#GPIOA
 ( (
GPIOA_Ty≥
*Ë
GPIOA_BASE
 )

	)

585 
	#GPIOB
 ( (
GPIOA_Ty≥
*Ë
GPIOB_BASE
 )

	)

586 
	#GPIOC
 ( (
GPIOA_Ty≥
*Ë
GPIOC_BASE
 )

	)

587 
	#GPIOD
 ( (
GPIOA_Ty≥
*Ë
GPIOD_BASE
 )

	)

588 
	#ADC1
 ( (
ADC1_Ty≥
*Ë
ADC1_BASE
 )

	)

589 
	#ADC2
 ( (
ADC2_Ty≥
*Ë
ADC2_BASE
 )

	)

590 
	#TIM1
 ( (
TIM1_Ty≥
*Ë
TIM1_BASE
 )

	)

591 
	#SPI1
 ( (
SPI1_Ty≥
*Ë
SPI1_BASE
 )

	)

592 
	#USART1
 ( (
USART1_Ty≥
*Ë
USART1_BASE
 )

	)

593 
	#DMA1
 ( (
DMA1_Ty≥
*Ë
DMA1_BASE
 )

	)

594 
	#RCC
 ( (
RCC_Ty≥
*Ë
RCC_BASE
 )

	)

595 
	#FLASH
 ( (
FLASH_Ty≥
*Ë
FLASH_BASE
 )

	)

596 
	#CRC
 ( (
CRC_Ty≥
*Ë
CRC_BASE
 )

	)

597 
	#NVIC
 ( (
NVIC_Ty≥
*Ë
NVIC_BASE
 )

	)

598 
	#STK
 ( (
STK_Ty≥
*Ë
STK_BASE
 )

	)

599 
	#SCB
 ( (
SCB_Ty≥
*Ë
SCB_BASE
 )

	)

600 
	#DBG
 ( (
DBG_Ty≥
*Ë
DBG_BASE
 )

	)

609 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

610 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

611 vﬁ©ûê
uöt32_t
 
	mSMCR
[32];

612 vﬁ©ûê
uöt32_t
 
	mDIER
[32];

613 vﬁ©ûê
uöt32_t
 
	mSR
[32];

614 vﬁ©ûê
uöt32_t
 
	mEGR
[32];

615 vﬁ©ûê
uöt32_t
 
	mCCMR1
[32];

616 vﬁ©ûê
uöt32_t
 
	mCCMR2
[32];

617 vﬁ©ûê
uöt32_t
 
	mCCER
[32];

618 vﬁ©ûê
uöt32_t
 
	mCNT
[32];

619 vﬁ©ûê
uöt32_t
 
	mPSC
[32];

620 vﬁ©ûê
uöt32_t
 
	mARR
[32];

621 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[32];

622 vﬁ©ûê
uöt32_t
 
	mCCR1
[32];

623 vﬁ©ûê
uöt32_t
 
	mCCR2
[32];

624 vﬁ©ûê
uöt32_t
 
	mCCR3
[32];

625 vﬁ©ûê
uöt32_t
 
	mCCR4
[32];

626 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
[32];

627 vﬁ©ûê
uöt32_t
 
	mDCR
[32];

628 vﬁ©ûê
uöt32_t
 
	mDMAR
[32];

629 } 
	tTIM2_BB_Ty≥
;

632 vﬁ©ûê
uöt32_t
 
	mCRH
[32];

633 vﬁ©ûê
uöt32_t
 
	mCRL
[32];

634 vﬁ©ûê
uöt32_t
 
	mPRLH
[32];

635 vﬁ©ûê
uöt32_t
 
	mPRLL
[32];

636 vﬁ©ûê
uöt32_t
 
	mDIVH
[32];

637 vﬁ©ûê
uöt32_t
 
	mDIVL
[32];

638 vﬁ©ûê
uöt32_t
 
	mCNTH
[32];

639 vﬁ©ûê
uöt32_t
 
	mCNTL
[32];

640 vﬁ©ûê
uöt32_t
 
	mALRH
[32];

641 vﬁ©ûê
uöt32_t
 
	mALRL
[32];

642 } 
	tRTC_BB_Ty≥
;

645 vﬁ©ûê
uöt32_t
 
	mCR
[32];

646 vﬁ©ûê
uöt32_t
 
	mCFR
[32];

647 vﬁ©ûê
uöt32_t
 
	mSR
[32];

648 } 
	tWWDG_BB_Ty≥
;

651 vﬁ©ûê
uöt32_t
 
	mKR
[32];

652 vﬁ©ûê
uöt32_t
 
	mPR
[32];

653 vﬁ©ûê
uöt32_t
 
	mRLR
[32];

654 vﬁ©ûê
uöt32_t
 
	mSR
[32];

655 } 
	tIWDG_BB_Ty≥
;

658 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

659 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

660 vﬁ©ûê
uöt32_t
 
	mSR
[32];

661 vﬁ©ûê
uöt32_t
 
	mDR
[32];

662 vﬁ©ûê
uöt32_t
 
	mCRCPR
[32];

663 vﬁ©ûê
uöt32_t
 
	mRXCRCR
[32];

664 vﬁ©ûê
uöt32_t
 
	mTXCRCR
[32];

665 vﬁ©ûê
uöt32_t
 
	mI2SCFGR
[32];

666 vﬁ©ûê
uöt32_t
 
	mI2SPR
[32];

667 } 
	tSPI1_BB_Ty≥
;

670 vﬁ©ûê
uöt32_t
 
	mSR
[32];

671 vﬁ©ûê
uöt32_t
 
	mDR
[32];

672 vﬁ©ûê
uöt32_t
 
	mBRR
[32];

673 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

674 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

675 vﬁ©ûê
uöt32_t
 
	mCR3
[32];

676 vﬁ©ûê
uöt32_t
 
	mGTPR
[32];

677 } 
	tUSART1_BB_Ty≥
;

680 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

681 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

682 vﬁ©ûê
uöt32_t
 
	mOAR1
[32];

683 vﬁ©ûê
uöt32_t
 
	mOAR2
[32];

684 vﬁ©ûê
uöt32_t
 
	mDR
[32];

685 vﬁ©ûê
uöt32_t
 
	mSR1
[32];

686 vﬁ©ûê
uöt32_t
 
	mSR2
[32];

687 vﬁ©ûê
uöt32_t
 
	mCCR
[32];

688 vﬁ©ûê
uöt32_t
 
	mTRISE
[32];

689 } 
	tI2C1_BB_Ty≥
;

692 vﬁ©ûê
uöt32_t
 
	mEP0R
[32];

693 vﬁ©ûê
uöt32_t
 
	mEP1R
[32];

694 vﬁ©ûê
uöt32_t
 
	mEP2R
[32];

695 vﬁ©ûê
uöt32_t
 
	mEP3R
[32];

696 vﬁ©ûê
uöt32_t
 
	mEP4R
[32];

697 vﬁ©ûê
uöt32_t
 
	mEP5R
[32];

698 vﬁ©ûê
uöt32_t
 
	mEP6R
[32];

699 vﬁ©ûê
uöt32_t
 
	mEP7R
[32];

700 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[8][32];

701 vﬁ©ûê
uöt32_t
 
	mCNTR
[32];

702 vﬁ©ûê
uöt32_t
 
	mISTR
[32];

703 vﬁ©ûê
uöt32_t
 
	mFNR
[32];

704 vﬁ©ûê
uöt32_t
 
	mDADDR
[32];

705 vﬁ©ûê
uöt32_t
 
	mBTABLE
[32];

706 } 
	tUSB_BB_Ty≥
;

709 vﬁ©ûê
uöt32_t
 
	mCAN_MCR
[32];

710 vﬁ©ûê
uöt32_t
 
	mCAN_MSR
[32];

711 vﬁ©ûê
uöt32_t
 
	mCAN_TSR
[32];

712 vﬁ©ûê
uöt32_t
 
	mCAN_RF0R
[32];

713 vﬁ©ûê
uöt32_t
 
	mCAN_RF1R
[32];

714 vﬁ©ûê
uöt32_t
 
	mCAN_IER
[32];

715 vﬁ©ûê
uöt32_t
 
	mCAN_ESR
[32];

716 vﬁ©ûê
uöt32_t
 
	mCAN_BTR
[32];

717 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[88][32];

718 vﬁ©ûê
uöt32_t
 
	mCAN_TI0R
[32];

719 vﬁ©ûê
uöt32_t
 
	mCAN_TDT0R
[32];

720 vﬁ©ûê
uöt32_t
 
	mCAN_TDL0R
[32];

721 vﬁ©ûê
uöt32_t
 
	mCAN_TDH0R
[32];

722 vﬁ©ûê
uöt32_t
 
	mCAN_TI1R
[32];

723 vﬁ©ûê
uöt32_t
 
	mCAN_TDT1R
[32];

724 vﬁ©ûê
uöt32_t
 
	mCAN_TDL1R
[32];

725 vﬁ©ûê
uöt32_t
 
	mCAN_TDH1R
[32];

726 vﬁ©ûê
uöt32_t
 
	mCAN_TI2R
[32];

727 vﬁ©ûê
uöt32_t
 
	mCAN_TDT2R
[32];

728 vﬁ©ûê
uöt32_t
 
	mCAN_TDL2R
[32];

729 vﬁ©ûê
uöt32_t
 
	mCAN_TDH2R
[32];

730 vﬁ©ûê
uöt32_t
 
	mCAN_RI0R
[32];

731 vﬁ©ûê
uöt32_t
 
	mCAN_RDT0R
[32];

732 vﬁ©ûê
uöt32_t
 
	mCAN_RDL0R
[32];

733 vﬁ©ûê
uöt32_t
 
	mCAN_RDH0R
[32];

734 vﬁ©ûê
uöt32_t
 
	mCAN_RI1R
[32];

735 vﬁ©ûê
uöt32_t
 
	mCAN_RDT1R
[32];

736 vﬁ©ûê
uöt32_t
 
	mCAN_RDL1R
[32];

737 vﬁ©ûê
uöt32_t
 
	mCAN_RDH1R
[32];

738 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
[12][32];

739 vﬁ©ûê
uöt32_t
 
	mCAN_FMR
[32];

740 vﬁ©ûê
uöt32_t
 
	mCAN_FM1R
[32];

741 vﬁ©ûê
uöt32_t
 
	mRESERVED_3
[32];

742 vﬁ©ûê
uöt32_t
 
	mCAN_FS1R
[32];

743 vﬁ©ûê
uöt32_t
 
	mRESERVED_4
[32];

744 vﬁ©ûê
uöt32_t
 
	mCAN_FFA1R
[32];

745 vﬁ©ûê
uöt32_t
 
	mRESERVED_5
[32];

746 vﬁ©ûê
uöt32_t
 
	mCAN_FA1R
[32];

747 vﬁ©ûê
uöt32_t
 
	mRESERVED_6
[8][32];

748 vﬁ©ûê
uöt32_t
 
	mF0R1
[32];

749 vﬁ©ûê
uöt32_t
 
	mF0R2
[32];

750 vﬁ©ûê
uöt32_t
 
	mF1R1
[32];

751 vﬁ©ûê
uöt32_t
 
	mF1R2
[32];

752 vﬁ©ûê
uöt32_t
 
	mF2R1
[32];

753 vﬁ©ûê
uöt32_t
 
	mF2R2
[32];

754 vﬁ©ûê
uöt32_t
 
	mF3R1
[32];

755 vﬁ©ûê
uöt32_t
 
	mF3R2
[32];

756 vﬁ©ûê
uöt32_t
 
	mF4R1
[32];

757 vﬁ©ûê
uöt32_t
 
	mF4R2
[32];

758 vﬁ©ûê
uöt32_t
 
	mF5R1
[32];

759 vﬁ©ûê
uöt32_t
 
	mF5R2
[32];

760 vﬁ©ûê
uöt32_t
 
	mF6R1
[32];

761 vﬁ©ûê
uöt32_t
 
	mF6R2
[32];

762 vﬁ©ûê
uöt32_t
 
	mF7R1
[32];

763 vﬁ©ûê
uöt32_t
 
	mF7R2
[32];

764 vﬁ©ûê
uöt32_t
 
	mF8R1
[32];

765 vﬁ©ûê
uöt32_t
 
	mF8R2
[32];

766 vﬁ©ûê
uöt32_t
 
	mF9R1
[32];

767 vﬁ©ûê
uöt32_t
 
	mF9R2
[32];

768 vﬁ©ûê
uöt32_t
 
	mF10R1
[32];

769 vﬁ©ûê
uöt32_t
 
	mF10R2
[32];

770 vﬁ©ûê
uöt32_t
 
	mF11R1
[32];

771 vﬁ©ûê
uöt32_t
 
	mF11R2
[32];

772 vﬁ©ûê
uöt32_t
 
	mF12R1
[32];

773 vﬁ©ûê
uöt32_t
 
	mF12R2
[32];

774 vﬁ©ûê
uöt32_t
 
	mF13R1
[32];

775 vﬁ©ûê
uöt32_t
 
	mF13R2
[32];

776 } 
	tCAN1_BB_Ty≥
;

779 vﬁ©ûê
uöt32_t
 
	mDR1
[32];

780 vﬁ©ûê
uöt32_t
 
	mDR2
[32];

781 vﬁ©ûê
uöt32_t
 
	mDR3
[32];

782 vﬁ©ûê
uöt32_t
 
	mDR4
[32];

783 vﬁ©ûê
uöt32_t
 
	mDR5
[32];

784 vﬁ©ûê
uöt32_t
 
	mDR6
[32];

785 vﬁ©ûê
uöt32_t
 
	mDR7
[32];

786 vﬁ©ûê
uöt32_t
 
	mDR8
[32];

787 vﬁ©ûê
uöt32_t
 
	mDR9
[32];

788 vﬁ©ûê
uöt32_t
 
	mDR10
[32];

789 vﬁ©ûê
uöt32_t
 
	mRTCCR
[32];

790 vﬁ©ûê
uöt32_t
 
	mCR
[32];

791 vﬁ©ûê
uöt32_t
 
	mCSR
[32];

792 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[2][32];

793 vﬁ©ûê
uöt32_t
 
	mDR11
[32];

794 vﬁ©ûê
uöt32_t
 
	mDR12
[32];

795 vﬁ©ûê
uöt32_t
 
	mDR13
[32];

796 vﬁ©ûê
uöt32_t
 
	mDR14
[32];

797 vﬁ©ûê
uöt32_t
 
	mDR15
[32];

798 vﬁ©ûê
uöt32_t
 
	mDR16
[32];

799 vﬁ©ûê
uöt32_t
 
	mDR17
[32];

800 vﬁ©ûê
uöt32_t
 
	mDR18
[32];

801 vﬁ©ûê
uöt32_t
 
	mDR19
[32];

802 vﬁ©ûê
uöt32_t
 
	mDR20
[32];

803 vﬁ©ûê
uöt32_t
 
	mDR21
[32];

804 vﬁ©ûê
uöt32_t
 
	mDR22
[32];

805 vﬁ©ûê
uöt32_t
 
	mDR23
[32];

806 vﬁ©ûê
uöt32_t
 
	mDR24
[32];

807 vﬁ©ûê
uöt32_t
 
	mDR25
[32];

808 vﬁ©ûê
uöt32_t
 
	mDR26
[32];

809 vﬁ©ûê
uöt32_t
 
	mDR27
[32];

810 vﬁ©ûê
uöt32_t
 
	mDR28
[32];

811 vﬁ©ûê
uöt32_t
 
	mDR29
[32];

812 vﬁ©ûê
uöt32_t
 
	mDR30
[32];

813 vﬁ©ûê
uöt32_t
 
	mDR31
[32];

814 vﬁ©ûê
uöt32_t
 
	mDR32
[32];

815 vﬁ©ûê
uöt32_t
 
	mDR33
[32];

816 vﬁ©ûê
uöt32_t
 
	mDR34
[32];

817 vﬁ©ûê
uöt32_t
 
	mDR35
[32];

818 vﬁ©ûê
uöt32_t
 
	mDR36
[32];

819 vﬁ©ûê
uöt32_t
 
	mDR37
[32];

820 vﬁ©ûê
uöt32_t
 
	mDR38
[32];

821 vﬁ©ûê
uöt32_t
 
	mDR39
[32];

822 vﬁ©ûê
uöt32_t
 
	mDR40
[32];

823 vﬁ©ûê
uöt32_t
 
	mDR41
[32];

824 vﬁ©ûê
uöt32_t
 
	mDR42
[32];

825 } 
	tBKP_BB_Ty≥
;

828 vﬁ©ûê
uöt32_t
 
	mCR
[32];

829 vﬁ©ûê
uöt32_t
 
	mCSR
[32];

830 } 
	tPWR_BB_Ty≥
;

833 vﬁ©ûê
uöt32_t
 
	mEVCR
[32];

834 vﬁ©ûê
uöt32_t
 
	mMAPR
[32];

835 vﬁ©ûê
uöt32_t
 
	mEXTICR1
[32];

836 vﬁ©ûê
uöt32_t
 
	mEXTICR2
[32];

837 vﬁ©ûê
uöt32_t
 
	mEXTICR3
[32];

838 vﬁ©ûê
uöt32_t
 
	mEXTICR4
[32];

839 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[32];

840 vﬁ©ûê
uöt32_t
 
	mMAPR2
[32];

841 } 
	tAFIO_BB_Ty≥
;

844 vﬁ©ûê
uöt32_t
 
	mIMR
[32];

845 vﬁ©ûê
uöt32_t
 
	mEMR
[32];

846 vﬁ©ûê
uöt32_t
 
	mRTSR
[32];

847 vﬁ©ûê
uöt32_t
 
	mFTSR
[32];

848 vﬁ©ûê
uöt32_t
 
	mSWIER
[32];

849 vﬁ©ûê
uöt32_t
 
	mPR
[32];

850 } 
	tEXTI_BB_Ty≥
;

853 vﬁ©ûê
uöt32_t
 
	mCRL
[32];

854 vﬁ©ûê
uöt32_t
 
	mCRH
[32];

855 vﬁ©ûê
uöt32_t
 
	mIDR
[32];

856 vﬁ©ûê
uöt32_t
 
	mODR
[32];

857 vﬁ©ûê
uöt32_t
 
	mBSRR
[32];

858 vﬁ©ûê
uöt32_t
 
	mBRR
[32];

859 vﬁ©ûê
uöt32_t
 
	mLCKR
[32];

860 } 
	tGPIOA_BB_Ty≥
;

863 vﬁ©ûê
uöt32_t
 
	mSR
[32];

864 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

865 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

866 vﬁ©ûê
uöt32_t
 
	mSMPR1
[32];

867 vﬁ©ûê
uöt32_t
 
	mSMPR2
[32];

868 vﬁ©ûê
uöt32_t
 
	mJOFR1
[32];

869 vﬁ©ûê
uöt32_t
 
	mJOFR2
[32];

870 vﬁ©ûê
uöt32_t
 
	mJOFR3
[32];

871 vﬁ©ûê
uöt32_t
 
	mJOFR4
[32];

872 vﬁ©ûê
uöt32_t
 
	mHTR
[32];

873 vﬁ©ûê
uöt32_t
 
	mLTR
[32];

874 vﬁ©ûê
uöt32_t
 
	mSQR1
[32];

875 vﬁ©ûê
uöt32_t
 
	mSQR2
[32];

876 vﬁ©ûê
uöt32_t
 
	mSQR3
[32];

877 vﬁ©ûê
uöt32_t
 
	mJSQR
[32];

878 vﬁ©ûê
uöt32_t
 
	mJDR1
[32];

879 vﬁ©ûê
uöt32_t
 
	mJDR2
[32];

880 vﬁ©ûê
uöt32_t
 
	mJDR3
[32];

881 vﬁ©ûê
uöt32_t
 
	mJDR4
[32];

882 vﬁ©ûê
uöt32_t
 
	mDR
[32];

883 } 
	tADC1_BB_Ty≥
;

886 vﬁ©ûê
uöt32_t
 
	mSR
[32];

887 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

888 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

889 vﬁ©ûê
uöt32_t
 
	mSMPR1
[32];

890 vﬁ©ûê
uöt32_t
 
	mSMPR2
[32];

891 vﬁ©ûê
uöt32_t
 
	mJOFR1
[32];

892 vﬁ©ûê
uöt32_t
 
	mJOFR2
[32];

893 vﬁ©ûê
uöt32_t
 
	mJOFR3
[32];

894 vﬁ©ûê
uöt32_t
 
	mJOFR4
[32];

895 vﬁ©ûê
uöt32_t
 
	mHTR
[32];

896 vﬁ©ûê
uöt32_t
 
	mLTR
[32];

897 vﬁ©ûê
uöt32_t
 
	mSQR1
[32];

898 vﬁ©ûê
uöt32_t
 
	mSQR2
[32];

899 vﬁ©ûê
uöt32_t
 
	mSQR3
[32];

900 vﬁ©ûê
uöt32_t
 
	mJSQR
[32];

901 vﬁ©ûê
uöt32_t
 
	mJDR1
[32];

902 vﬁ©ûê
uöt32_t
 
	mJDR2
[32];

903 vﬁ©ûê
uöt32_t
 
	mJDR3
[32];

904 vﬁ©ûê
uöt32_t
 
	mJDR4
[32];

905 vﬁ©ûê
uöt32_t
 
	mDR
[32];

906 } 
	tADC2_BB_Ty≥
;

909 vﬁ©ûê
uöt32_t
 
	mCR1
[32];

910 vﬁ©ûê
uöt32_t
 
	mCR2
[32];

911 vﬁ©ûê
uöt32_t
 
	mSMCR
[32];

912 vﬁ©ûê
uöt32_t
 
	mDIER
[32];

913 vﬁ©ûê
uöt32_t
 
	mSR
[32];

914 vﬁ©ûê
uöt32_t
 
	mEGR
[32];

915 vﬁ©ûê
uöt32_t
 
	mCCMR1
[32];

916 vﬁ©ûê
uöt32_t
 
	mCCMR2
[32];

917 vﬁ©ûê
uöt32_t
 
	mCCER
[32];

918 vﬁ©ûê
uöt32_t
 
	mCNT
[32];

919 vﬁ©ûê
uöt32_t
 
	mPSC
[32];

920 vﬁ©ûê
uöt32_t
 
	mARR
[32];

921 vﬁ©ûê
uöt32_t
 
	mRCR
[32];

922 vﬁ©ûê
uöt32_t
 
	mCCR1
[32];

923 vﬁ©ûê
uöt32_t
 
	mCCR2
[32];

924 vﬁ©ûê
uöt32_t
 
	mCCR3
[32];

925 vﬁ©ûê
uöt32_t
 
	mCCR4
[32];

926 vﬁ©ûê
uöt32_t
 
	mBDTR
[32];

927 vﬁ©ûê
uöt32_t
 
	mDCR
[32];

928 vﬁ©ûê
uöt32_t
 
	mDMAR
[32];

929 } 
	tTIM1_BB_Ty≥
;

932 vﬁ©ûê
uöt32_t
 
	mISR
[32];

933 vﬁ©ûê
uöt32_t
 
	mIFCR
[32];

934 vﬁ©ûê
uöt32_t
 
	mCCR1
[32];

935 vﬁ©ûê
uöt32_t
 
	mCNDTR1
[32];

936 vﬁ©ûê
uöt32_t
 
	mCPAR1
[32];

937 vﬁ©ûê
uöt32_t
 
	mCMAR1
[32];

938 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[32];

939 vﬁ©ûê
uöt32_t
 
	mCCR2
[32];

940 vﬁ©ûê
uöt32_t
 
	mCNDTR2
[32];

941 vﬁ©ûê
uöt32_t
 
	mCPAR2
[32];

942 vﬁ©ûê
uöt32_t
 
	mCMAR2
[32];

943 vﬁ©ûê
uöt32_t
 
	mRESERVED_2
[32];

944 vﬁ©ûê
uöt32_t
 
	mCCR3
[32];

945 vﬁ©ûê
uöt32_t
 
	mCNDTR3
[32];

946 vﬁ©ûê
uöt32_t
 
	mCPAR3
[32];

947 vﬁ©ûê
uöt32_t
 
	mCMAR3
[32];

948 vﬁ©ûê
uöt32_t
 
	mRESERVED_3
[32];

949 vﬁ©ûê
uöt32_t
 
	mCCR4
[32];

950 vﬁ©ûê
uöt32_t
 
	mCNDTR4
[32];

951 vﬁ©ûê
uöt32_t
 
	mCPAR4
[32];

952 vﬁ©ûê
uöt32_t
 
	mCMAR4
[32];

953 vﬁ©ûê
uöt32_t
 
	mRESERVED_4
[32];

954 vﬁ©ûê
uöt32_t
 
	mCCR5
[32];

955 vﬁ©ûê
uöt32_t
 
	mCNDTR5
[32];

956 vﬁ©ûê
uöt32_t
 
	mCPAR5
[32];

957 vﬁ©ûê
uöt32_t
 
	mCMAR5
[32];

958 vﬁ©ûê
uöt32_t
 
	mRESERVED_5
[32];

959 vﬁ©ûê
uöt32_t
 
	mCCR6
[32];

960 vﬁ©ûê
uöt32_t
 
	mCNDTR6
[32];

961 vﬁ©ûê
uöt32_t
 
	mCPAR6
[32];

962 vﬁ©ûê
uöt32_t
 
	mCMAR6
[32];

963 vﬁ©ûê
uöt32_t
 
	mRESERVED_6
[32];

964 vﬁ©ûê
uöt32_t
 
	mCCR7
[32];

965 vﬁ©ûê
uöt32_t
 
	mCNDTR7
[32];

966 vﬁ©ûê
uöt32_t
 
	mCPAR7
[32];

967 vﬁ©ûê
uöt32_t
 
	mCMAR7
[32];

968 } 
	tDMA1_BB_Ty≥
;

971 vﬁ©ûê
uöt32_t
 
	mCR
[32];

972 vﬁ©ûê
uöt32_t
 
	mCFGR
[32];

973 vﬁ©ûê
uöt32_t
 
	mCIR
[32];

974 vﬁ©ûê
uöt32_t
 
	mAPB2RSTR
[32];

975 vﬁ©ûê
uöt32_t
 
	mAPB1RSTR
[32];

976 vﬁ©ûê
uöt32_t
 
	mAHBENR
[32];

977 vﬁ©ûê
uöt32_t
 
	mAPB2ENR
[32];

978 vﬁ©ûê
uöt32_t
 
	mAPB1ENR
[32];

979 vﬁ©ûê
uöt32_t
 
	mBDCR
[32];

980 vﬁ©ûê
uöt32_t
 
	mCSR
[32];

981 } 
	tRCC_BB_Ty≥
;

984 vﬁ©ûê
uöt32_t
 
	mACR
[32];

985 vﬁ©ûê
uöt32_t
 
	mKEYR
[32];

986 vﬁ©ûê
uöt32_t
 
	mOPTKEYR
[32];

987 vﬁ©ûê
uöt32_t
 
	mSR
[32];

988 vﬁ©ûê
uöt32_t
 
	mCR
[32];

989 vﬁ©ûê
uöt32_t
 
	mAR
[32];

990 vﬁ©ûê
uöt32_t
 
	mRESERVED_1
[32];

991 vﬁ©ûê
uöt32_t
 
	mOBR
[32];

992 vﬁ©ûê
uöt32_t
 
	mWRPR
[32];

993 } 
	tFLASH_BB_Ty≥
;

996 vﬁ©ûê
uöt32_t
 
	mDR
[32];

997 vﬁ©ûê
uöt32_t
 
	mIDR
[32];

998 vﬁ©ûê
uöt32_t
 
	mCR
[32];

999 } 
	tCRC_BB_Ty≥
;

1007 
	#TIM2_BB_BASE
 ((
uöt32_t
Ë0x42000000)

	)

1008 
	#TIM3_BB_BASE
 ((
uöt32_t
Ë0x42008000)

	)

1009 
	#TIM4_BB_BASE
 ((
uöt32_t
Ë0x42010000)

	)

1010 
	#RTC_BB_BASE
 ((
uöt32_t
Ë0x42050000)

	)

1011 
	#WWDG_BB_BASE
 ((
uöt32_t
Ë0x42058000)

	)

1012 
	#IWDG_BB_BASE
 ((
uöt32_t
Ë0x42060000)

	)

1013 
	#SPI2_BB_BASE
 ((
uöt32_t
Ë0x42070000)

	)

1014 
	#USART2_BB_BASE
 ((
uöt32_t
Ë0x42088000)

	)

1015 
	#USART3_BB_BASE
 ((
uöt32_t
Ë0x42090000)

	)

1016 
	#I2C1_BB_BASE
 ((
uöt32_t
Ë0x420A8000)

	)

1017 
	#I2C2_BB_BASE
 ((
uöt32_t
Ë0x420B0000)

	)

1018 
	#USB_BB_BASE
 ((
uöt32_t
Ë0x420B8000)

	)

1019 
	#CAN1_BB_BASE
 ((
uöt32_t
Ë0x420C8000)

	)

1020 
	#BKP_BB_BASE
 ((
uöt32_t
Ë0x420D8000)

	)

1021 
	#PWR_BB_BASE
 ((
uöt32_t
Ë0x420E0000)

	)

1022 
	#AFIO_BB_BASE
 ((
uöt32_t
Ë0x42200000)

	)

1023 
	#EXTI_BB_BASE
 ((
uöt32_t
Ë0x42208000)

	)

1024 
	#GPIOA_BB_BASE
 ((
uöt32_t
Ë0x42210000)

	)

1025 
	#GPIOB_BB_BASE
 ((
uöt32_t
Ë0x42218000)

	)

1026 
	#GPIOC_BB_BASE
 ((
uöt32_t
Ë0x42220000)

	)

1027 
	#GPIOD_BB_BASE
 ((
uöt32_t
Ë0x42228000)

	)

1028 
	#ADC1_BB_BASE
 ((
uöt32_t
Ë0x42248000)

	)

1029 
	#ADC2_BB_BASE
 ((
uöt32_t
Ë0x42250000)

	)

1030 
	#TIM1_BB_BASE
 ((
uöt32_t
Ë0x42258000)

	)

1031 
	#SPI1_BB_BASE
 ((
uöt32_t
Ë0x42260000)

	)

1032 
	#USART1_BB_BASE
 ((
uöt32_t
Ë0x42270000)

	)

1033 
	#DMA1_BB_BASE
 ((
uöt32_t
Ë0x42400000)

	)

1034 
	#RCC_BB_BASE
 ((
uöt32_t
Ë0x42420000)

	)

1035 
	#FLASH_BB_BASE
 ((
uöt32_t
Ë0x42440000)

	)

1036 
	#CRC_BB_BASE
 ((
uöt32_t
Ë0x42460000)

	)

1044 
	#BB_TIM2
 ( (
TIM2_BB_Ty≥
*Ë
TIM2_BB_BASE
 )

	)

1045 
	#BB_TIM3
 ( (
TIM2_BB_Ty≥
*Ë
TIM3_BB_BASE
 )

	)

1046 
	#BB_TIM4
 ( (
TIM2_BB_Ty≥
*Ë
TIM4_BB_BASE
 )

	)

1047 
	#BB_RTC
 ( (
RTC_BB_Ty≥
*Ë
RTC_BB_BASE
 )

	)

1048 
	#BB_WWDG
 ( (
WWDG_BB_Ty≥
*Ë
WWDG_BB_BASE
 )

	)

1049 
	#BB_IWDG
 ( (
IWDG_BB_Ty≥
*Ë
IWDG_BB_BASE
 )

	)

1050 
	#BB_SPI2
 ( (
SPI1_BB_Ty≥
*Ë
SPI2_BB_BASE
 )

	)

1051 
	#BB_USART2
 ( (
USART1_BB_Ty≥
*Ë
USART2_BB_BASE
 )

	)

1052 
	#BB_USART3
 ( (
USART1_BB_Ty≥
*Ë
USART3_BB_BASE
 )

	)

1053 
	#BB_I2C1
 ( (
I2C1_BB_Ty≥
*Ë
I2C1_BB_BASE
 )

	)

1054 
	#BB_I2C2
 ( (
I2C1_BB_Ty≥
*Ë
I2C2_BB_BASE
 )

	)

1055 
	#BB_USB
 ( (
USB_BB_Ty≥
*Ë
USB_BB_BASE
 )

	)

1056 
	#BB_CAN1
 ( (
CAN1_BB_Ty≥
*Ë
CAN1_BB_BASE
 )

	)

1057 
	#BB_BKP
 ( (
BKP_BB_Ty≥
*Ë
BKP_BB_BASE
 )

	)

1058 
	#BB_PWR
 ( (
PWR_BB_Ty≥
*Ë
PWR_BB_BASE
 )

	)

1059 
	#BB_AFIO
 ( (
AFIO_BB_Ty≥
*Ë
AFIO_BB_BASE
 )

	)

1060 
	#BB_EXTI
 ( (
EXTI_BB_Ty≥
*Ë
EXTI_BB_BASE
 )

	)

1061 
	#BB_GPIOA
 ( (
GPIOA_BB_Ty≥
*Ë
GPIOA_BB_BASE
 )

	)

1062 
	#BB_GPIOB
 ( (
GPIOA_BB_Ty≥
*Ë
GPIOB_BB_BASE
 )

	)

1063 
	#BB_GPIOC
 ( (
GPIOA_BB_Ty≥
*Ë
GPIOC_BB_BASE
 )

	)

1064 
	#BB_GPIOD
 ( (
GPIOA_BB_Ty≥
*Ë
GPIOD_BB_BASE
 )

	)

1065 
	#BB_ADC1
 ( (
ADC1_BB_Ty≥
*Ë
ADC1_BB_BASE
 )

	)

1066 
	#BB_ADC2
 ( (
ADC2_BB_Ty≥
*Ë
ADC2_BB_BASE
 )

	)

1067 
	#BB_TIM1
 ( (
TIM1_BB_Ty≥
*Ë
TIM1_BB_BASE
 )

	)

1068 
	#BB_SPI1
 ( (
SPI1_BB_Ty≥
*Ë
SPI1_BB_BASE
 )

	)

1069 
	#BB_USART1
 ( (
USART1_BB_Ty≥
*Ë
USART1_BB_BASE
 )

	)

1070 
	#BB_DMA1
 ( (
DMA1_BB_Ty≥
*Ë
DMA1_BB_BASE
 )

	)

1071 
	#BB_RCC
 ( (
RCC_BB_Ty≥
*Ë
RCC_BB_BASE
 )

	)

1072 
	#BB_FLASH
 ( (
FLASH_BB_Ty≥
*Ë
FLASH_BB_BASE
 )

	)

1073 
	#BB_CRC
 ( (
CRC_BB_Ty≥
*Ë
CRC_BB_BASE
 )

	)

	@stm32f103_timer.h

11 #i‚de‡
STM32F103_TIMER_H


12 
	#STM32F103_TIMER_H


	)

14 
timî3_öô
(
‰eq
);

15 
timî3_dißbÀ
();

	@stm32f10x_adc.c

23 
	~"°m32f10x_adc.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

51 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

52 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

55 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

56 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

59 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

60 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

63 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

66 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

69 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

72 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

73 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

76 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

77 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

80 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

83 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

86 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

89 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

90 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

93 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

94 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

97 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

100 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

101 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

104 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

108 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

111 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

112 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

115 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

118 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

120 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

123 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

126 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

129 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

130 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

133 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

134 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

137 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

140 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

179 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

182 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

184 i‡(
ADCx
 =
ADC1
)

187 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

189 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

191 i‡(
ADCx
 =
ADC2
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

196 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

200 i‡(
ADCx
 =
ADC3
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

208 
	}
}

218 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

220 
uöt32_t
 
tm¥eg1
 = 0;

221 
uöt8_t
 
tm¥eg2
 = 0;

223 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

224 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

227 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

228 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

229 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

233 
tm¥eg1
 = 
ADCx
->
CR1
;

235 
tm¥eg1
 &
CR1_CLEAR_Mask
;

239 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

241 
ADCx
->
CR1
 = 
tm¥eg1
;

245 
tm¥eg1
 = 
ADCx
->
CR2
;

247 
tm¥eg1
 &
CR2_CLEAR_Mask
;

252 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

253 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

255 
ADCx
->
CR2
 = 
tm¥eg1
;

259 
tm¥eg1
 = 
ADCx
->
SQR1
;

261 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

264 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

265 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

267 
ADCx
->
SQR1
 = 
tm¥eg1
;

268 
	}
}

275 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

279 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

281 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

283 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

285 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

287 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

289 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

290 
	}
}

299 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

303 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
ADCx
->
CR2
 |
CR2_ADON_Së
;

312 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

314 
	}
}

324 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

327 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

328 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

329 i‡(
NewSèã
 !
DISABLE
)

332 
ADCx
->
CR2
 |
CR2_DMA_Së
;

337 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

339 
	}
}

353 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

355 
uöt8_t
 
ômask
 = 0;

357 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

358 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

361 
ômask
 = (
uöt8_t
)
ADC_IT
;

362 i‡(
NewSèã
 !
DISABLE
)

365 
ADCx
->
CR1
 |
ômask
;

370 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

372 
	}
}

379 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

382 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

384 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

385 
	}
}

392 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

394 
FœgSètus
 
bô°©us
 = 
RESET
;

396 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

398 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

401 
bô°©us
 = 
SET
;

406 
bô°©us
 = 
RESET
;

409  
bô°©us
;

410 
	}
}

417 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

420 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

422 
ADCx
->
CR2
 |
CR2_CAL_Së
;

423 
	}
}

430 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

432 
FœgSètus
 
bô°©us
 = 
RESET
;

434 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

436 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

439 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

457 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

460 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

461 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

462 i‡(
NewSèã
 !
DISABLE
)

466 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

472 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

474 
	}
}

481 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

483 
FœgSètus
 
bô°©us
 = 
RESET
;

485 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

487 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

490 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

498  
bô°©us
;

499 
	}
}

509 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

511 
uöt32_t
 
tm¥eg1
 = 0;

512 
uöt32_t
 
tm¥eg2
 = 0;

514 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

515 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

517 
tm¥eg1
 = 
ADCx
->
CR1
;

519 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

521 
tm¥eg2
 = 
Numbî
 - 1;

522 
tm¥eg1
 |
tm¥eg2
 << 13;

524 
ADCx
->
CR1
 = 
tm¥eg1
;

525 
	}
}

536 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

539 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

549 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

551 
	}
}

590 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

592 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

594 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

595 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

596 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

597 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

599 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

602 
tm¥eg1
 = 
ADCx
->
SMPR1
;

604 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

606 
tm¥eg1
 &~
tm¥eg2
;

608 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

610 
tm¥eg1
 |
tm¥eg2
;

612 
ADCx
->
SMPR1
 = 
tm¥eg1
;

617 
tm¥eg1
 = 
ADCx
->
SMPR2
;

619 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

621 
tm¥eg1
 &~
tm¥eg2
;

623 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

625 
tm¥eg1
 |
tm¥eg2
;

627 
ADCx
->
SMPR2
 = 
tm¥eg1
;

630 i‡(
R™k
 < 7)

633 
tm¥eg1
 = 
ADCx
->
SQR3
;

635 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

637 
tm¥eg1
 &~
tm¥eg2
;

639 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

641 
tm¥eg1
 |
tm¥eg2
;

643 
ADCx
->
SQR3
 = 
tm¥eg1
;

646 i‡(
R™k
 < 13)

649 
tm¥eg1
 = 
ADCx
->
SQR2
;

651 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

653 
tm¥eg1
 &~
tm¥eg2
;

655 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

657 
tm¥eg1
 |
tm¥eg2
;

659 
ADCx
->
SQR2
 = 
tm¥eg1
;

665 
tm¥eg1
 = 
ADCx
->
SQR1
;

667 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

669 
tm¥eg1
 &~
tm¥eg2
;

671 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

673 
tm¥eg1
 |
tm¥eg2
;

675 
ADCx
->
SQR1
 = 
tm¥eg1
;

677 
	}
}

686 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

689 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

690 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

691 i‡(
NewSèã
 !
DISABLE
)

694 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

699 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

701 
	}
}

708 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

711 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

713  (
uöt16_t
Ë
ADCx
->
DR
;

714 
	}
}

720 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

723  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

724 
	}
}

734 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

737 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

738 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

739 i‡(
NewSèã
 !
DISABLE
)

742 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

747 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

749 
	}
}

760 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

763 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

764 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

773 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

775 
	}
}

799 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

801 
uöt32_t
 
tm¥eg
 = 0;

803 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

804 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

806 
tm¥eg
 = 
ADCx
->
CR2
;

808 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

810 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

812 
ADCx
->
CR2
 = 
tm¥eg
;

813 
	}
}

824 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

827 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

828 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

829 i‡(
NewSèã
 !
DISABLE
)

832 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

837 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

839 
	}
}

849 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

852 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

853 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

854 i‡(
NewSèã
 !
DISABLE
)

858 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

864 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

866 
	}
}

873 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

875 
FœgSètus
 
bô°©us
 = 
RESET
;

877 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

879 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

882 
bô°©us
 = 
SET
;

887 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

930 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

932 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

934 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

935 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

936 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

937 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

939 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

942 
tm¥eg1
 = 
ADCx
->
SMPR1
;

944 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

946 
tm¥eg1
 &~
tm¥eg2
;

948 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

950 
tm¥eg1
 |
tm¥eg2
;

952 
ADCx
->
SMPR1
 = 
tm¥eg1
;

957 
tm¥eg1
 = 
ADCx
->
SMPR2
;

959 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

961 
tm¥eg1
 &~
tm¥eg2
;

963 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

965 
tm¥eg1
 |
tm¥eg2
;

967 
ADCx
->
SMPR2
 = 
tm¥eg1
;

971 
tm¥eg1
 = 
ADCx
->
JSQR
;

973 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

975 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

977 
tm¥eg1
 &~
tm¥eg2
;

979 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

981 
tm¥eg1
 |
tm¥eg2
;

983 
ADCx
->
JSQR
 = 
tm¥eg1
;

984 
	}
}

993 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

995 
uöt32_t
 
tm¥eg1
 = 0;

996 
uöt32_t
 
tm¥eg2
 = 0;

998 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

999 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1002 
tm¥eg1
 = 
ADCx
->
JSQR
;

1004 
tm¥eg1
 &
JSQR_JL_Re£t
;

1006 
tm¥eg2
 = 
Lígth
 - 1;

1007 
tm¥eg1
 |
tm¥eg2
 << 20;

1009 
ADCx
->
JSQR
 = 
tm¥eg1
;

1010 
	}
}

1025 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1027 
__IO
 
uöt32_t
 
tmp
 = 0;

1030 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1031 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1032 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1034 
tmp
 = (
uöt32_t
)
ADCx
;

1035 
tmp
 +
ADC_Inje˘edCh™√l
;

1038 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1039 
	}
}

1052 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1054 
__IO
 
uöt32_t
 
tmp
 = 0;

1057 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1058 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1060 
tmp
 = (
uöt32_t
)
ADCx
;

1061 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1064  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1065 
	}
}

1082 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1084 
uöt32_t
 
tm¥eg
 = 0;

1086 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1087 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1089 
tm¥eg
 = 
ADCx
->
CR1
;

1091 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1093 
tm¥eg
 |
ADC_A«logW©chdog
;

1095 
ADCx
->
CR1
 = 
tm¥eg
;

1096 
	}
}

1107 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1108 
uöt16_t
 
LowThªshﬁd
)

1111 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1113 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1115 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1117 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1118 
	}
}

1145 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1147 
uöt32_t
 
tm¥eg
 = 0;

1149 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1150 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1152 
tm¥eg
 = 
ADCx
->
CR1
;

1154 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1156 
tm¥eg
 |
ADC_Ch™√l
;

1158 
ADCx
->
CR1
 = 
tm¥eg
;

1159 
	}
}

1167 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1170 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1171 i‡(
NewSèã
 !
DISABLE
)

1174 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1179 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1181 
	}
}

1195 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1197 
FœgSètus
 
bô°©us
 = 
RESET
;

1199 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1200 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1202 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1205 
bô°©us
 = 
SET
;

1210 
bô°©us
 = 
RESET
;

1213  
bô°©us
;

1214 
	}
}

1228 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1231 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1232 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1234 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1235 
	}
}

1247 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1249 
ITSètus
 
bô°©us
 = 
RESET
;

1250 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1253 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1255 
ômask
 = 
ADC_IT
 >> 8;

1257 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1259 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1262 
bô°©us
 = 
SET
;

1267 
bô°©us
 = 
RESET
;

1270  
bô°©us
;

1271 
	}
}

1283 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1285 
uöt8_t
 
ômask
 = 0;

1287 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1288 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1290 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1292 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1293 
	}
}

	@stm32f10x_adc.h

24 #i‚de‡
__STM32F10x_ADC_H


25 
	#__STM32F10x_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
ADC_Mode
;

56 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

60 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

68 
uöt32_t
 
ADC_D©aAlign
;

71 
uöt8_t
 
ADC_NbrOfCh™√l
;

74 }
	tADC_InôTy≥Def
;

83 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

84 ((
PERIPH
Ë=
ADC2
) || \

85 ((
PERIPH
Ë=
ADC3
))

	)

87 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

88 ((
PERIPH
Ë=
ADC3
))

	)

94 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

95 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

96 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

97 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

98 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

99 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

100 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

101 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

102 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

103 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

105 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

106 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

107 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

110 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

112 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

114 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

138 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

140 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

153 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

	)

162 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

163 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

165 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

174 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

175 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

176 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

177 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

178 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

179 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

180 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

181 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

182 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

183 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

184 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

185 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

186 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

187 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

188 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

189 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

190 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

191 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

193 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

194 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

196 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

204 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

	)

213 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

214 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

215 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

216 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

217 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

218 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

219 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

220 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

221 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

228 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

245 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

	)

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

320 ((
IT
Ë=
ADC_IT_JEOC
))

	)

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
) || \

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

	)

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

465 #ifde‡
__˝lu•lus


	@stm32f10x_bkp.c

23 
	~"°m32f10x_bkp.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

54 
	#TPAL_BôNumbî
 0x01

	)

55 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

58 
	#TPE_BôNumbî
 0x00

	)

59 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

65 
	#TPIE_BôNumbî
 0x02

	)

66 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

69 
	#TIF_BôNumbî
 0x09

	)

70 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

73 
	#TEF_BôNumbî
 0x08

	)

74 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

79 
	#RTCCR_CAL_MASK
 ((
uöt16_t
)0xFF80)

	)

80 
	#RTCCR_MASK
 ((
uöt16_t
)0xFC7F)

	)

120 
	$BKP_DeInô
()

122 
	`RCC_BackupRe£tCmd
(
ENABLE
);

123 
	`RCC_BackupRe£tCmd
(
DISABLE
);

124 
	}
}

134 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

137 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

138 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

139 
	}
}

147 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

150 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

151 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

152 
	}
}

160 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

164 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

165 
	}
}

180 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

182 
uöt16_t
 
tm¥eg
 = 0;

184 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

185 
tm¥eg
 = 
BKP
->
RTCCR
;

187 
tm¥eg
 &
RTCCR_MASK
;

190 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

192 
BKP
->
RTCCR
 = 
tm¥eg
;

193 
	}
}

201 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

203 
uöt16_t
 
tm¥eg
 = 0;

205 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

206 
tm¥eg
 = 
BKP
->
RTCCR
;

208 
tm¥eg
 &
RTCCR_CAL_MASK
;

210 
tm¥eg
 |
CÆibøti⁄VÆue
;

212 
BKP
->
RTCCR
 = 
tm¥eg
;

213 
	}
}

222 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

224 
__IO
 
uöt32_t
 
tmp
 = 0;

227 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

229 
tmp
 = (
uöt32_t
)
BKP_BASE
;

230 
tmp
 +
BKP_DR
;

232 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

233 
	}
}

241 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

243 
__IO
 
uöt32_t
 
tmp
 = 0;

246 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

248 
tmp
 = (
uöt32_t
)
BKP_BASE
;

249 
tmp
 +
BKP_DR
;

251  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

252 
	}
}

259 
FœgSètus
 
	$BKP_GëFœgSètus
()

261  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

262 
	}
}

269 
	$BKP_CÀ¨Fœg
()

272 
BKP
->
CSR
 |
BKP_CSR_CTE
;

273 
	}
}

280 
ITSètus
 
	$BKP_GëITSètus
()

282  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

283 
	}
}

290 
	$BKP_CÀ¨ITPídögBô
()

293 
BKP
->
CSR
 |
BKP_CSR_CTI
;

294 
	}
}

	@stm32f10x_bkp.h

24 #i‚de‡
__STM32F10x_BKP_H


25 
	#__STM32F10x_BKP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

59 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

60 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
) || \

61 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

	)

70 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

71 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

72 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

73 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

74 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

77 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

	)

86 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

87 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

88 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

89 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

90 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

91 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

92 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

93 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

94 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

95 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

96 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

97 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

98 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

99 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

100 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

101 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

102 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

103 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

104 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

105 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

106 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

107 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

108 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

109 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

110 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

111 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

112 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

113 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

114 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

115 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

116 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

117 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

118 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

119 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

120 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

121 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

122 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

123 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

124 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

125 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

126 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

127 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

129 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
) || \

130 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

131 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

132 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

133 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

134 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

135 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

136 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

137 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

138 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

139 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

140 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

141 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

142 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

	)

144 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

165 
BKP_DeInô
();

166 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

167 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

169 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

170 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

171 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

172 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

173 
FœgSètus
 
BKP_GëFœgSètus
();

174 
BKP_CÀ¨Fœg
();

175 
ITSètus
 
BKP_GëITSètus
();

176 
BKP_CÀ¨ITPídögBô
();

178 #ifde‡
__˝lu•lus


	@stm32f10x_can.c

23 
	~"°m32f10x_ˇn.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

52 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

55 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

58 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

60 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

65 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

67 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

69 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

71 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

73 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

76 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

77 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

78 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

82 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

107 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

122 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

125 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

127 i‡(
CANx
 =
CAN1
)

130 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

132 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

137 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

141 
	}
}

154 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

156 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

157 
uöt32_t
 
waô_ack
 = 0x00000000;

159 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

161 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

165 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

166 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

167 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

168 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

169 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

170 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

173 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

176 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

179 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

181 
waô_ack
++;

185 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

187 
InôSètus
 = 
CAN_InôSètus_Faûed
;

192 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

194 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

198 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

202 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

204 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

208 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

212 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

214 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

218 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

222 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

224 
CANx
->
MCR
 |
CAN_MCR_NART
;

228 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

232 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

234 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

238 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

242 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

244 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

248 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

252 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

253 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

254 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

255 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

256 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

259 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

262 
waô_ack
 = 0;

264 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

266 
waô_ack
++;

270 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

272 
InôSètus
 = 
CAN_InôSètus_Faûed
;

276 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

281  
InôSètus
;

282 
	}
}

292 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

294 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

296 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

297 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

298 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

299 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

300 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

302 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

305 
CAN1
->
FMR
 |
FMR_FINIT
;

308 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

311 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

314 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

318 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

319 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

320 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

324 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

325 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

326 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

329 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

332 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

338 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

339 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

340 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

344 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

347 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

356 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

359 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

362 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

365 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

369 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

371 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

375 
CAN1
->
FMR
 &~
FMR_FINIT
;

376 
	}
}

384 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

389 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

392 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

395 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

398 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

401 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

404 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

407 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

410 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

413 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

416 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

419 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

420 
	}
}

428 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

431 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

434 
CAN1
->
FMR
 |
FMR_FINIT
;

437 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

438 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

441 
CAN1
->
FMR
 &~
FMR_FINIT
;

442 
	}
}

451 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

457 i‡(
NewSèã
 !
DISABLE
)

460 
CANx
->
MCR
 |
MCR_DBF
;

465 
CANx
->
MCR
 &~
MCR_DBF
;

467 
	}
}

481 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

486 i‡(
NewSèã
 !
DISABLE
)

489 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

492 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

493 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

494 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

499 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

502 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

503 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

504 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

506 
	}
}

515 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

517 
uöt8_t
 
å™smô_maûbox
 = 0;

519 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

520 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

521 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

522 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

525 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

527 
å™smô_maûbox
 = 0;

529 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

531 
å™smô_maûbox
 = 1;

533 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

535 
å™smô_maûbox
 = 2;

539 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

542 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

546 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

548 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

549 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

550 
TxMesßge
->
RTR
);

554 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

555 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

556 
TxMesßge
->
IDE
 | \

557 
TxMesßge
->
RTR
);

561 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

562 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

563 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

566 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

567 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

568 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

569 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

570 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

571 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

572 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

573 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

575 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

577  
å™smô_maûbox
;

578 
	}
}

589 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

591 
uöt32_t
 
°©e
 = 0;

594 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

595 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

597 
TønsmôMaûbox
)

599 (
CAN_TXMAILBOX_0
):

600 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

602 (
CAN_TXMAILBOX_1
):

603 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

605 (
CAN_TXMAILBOX_2
):

606 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

609 
°©e
 = 
CAN_TxSètus_Faûed
;

612 
°©e
)

615 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

618 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

620 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

622 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

625 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

627 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

629 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

631 : 
°©e
 = 
CAN_TxSètus_Faûed
;

634  (
uöt8_t
Ë
°©e
;

635 
	}
}

643 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

646 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

647 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

649 
Maûbox
)

651 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

653 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

655 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

660 
	}
}

671 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

674 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

675 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

677 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

678 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

680 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

684 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

687 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

691 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

693 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

694 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

695 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

696 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

697 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

698 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

699 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

700 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

703 i‡(
FIFONumbî
 =
CAN_FIFO0
)

705 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

710 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

712 
	}
}

720 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

723 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

724 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

726 i‡(
FIFONumbî
 =
CAN_FIFO0
)

728 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

733 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

735 
	}
}

743 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

745 
uöt8_t
 
mesßge_≥ndög
=0;

747 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

748 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

749 i‡(
FIFONumbî
 =
CAN_FIFO0
)

751 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

753 i‡(
FIFONumbî
 =
CAN_FIFO1
)

755 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

759 
mesßge_≥ndög
 = 0;

761  
mesßge_≥ndög
;

762 
	}
}

774 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

776 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

779 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

782 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

783 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

785 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

788 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

791 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

793 
timeout
--;

795 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

797 
°©us
 = 
CAN_ModeSètus_Faûed
;

801 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

804 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

807 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

810 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

812 
timeout
--;

814 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

816 
°©us
 = 
CAN_ModeSètus_Faûed
;

820 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

823 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

826 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

829 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

831 
timeout
--;

833 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

835 
°©us
 = 
CAN_ModeSètus_Faûed
;

839 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

844 
°©us
 = 
CAN_ModeSètus_Faûed
;

847  (
uöt8_t
Ë
°©us
;

848 
	}
}

856 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

858 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

861 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

864 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

867 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

870 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

873  (
uöt8_t
)
¶ìp°©us
;

874 
	}
}

882 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

884 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

885 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

888 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

891 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

894 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

896 
waô_¶ak
--;

898 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

901 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

904  (
uöt8_t
)
wakeup°©us
;

905 
	}
}

922 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

924 
uöt8_t
 
îr‹code
=0;

927 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

930 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

933  
îr‹code
;

934 
	}
}

946 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

948 
uöt8_t
 
cou¡î
=0;

951 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

954 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

957  
cou¡î
;

958 
	}
}

966 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

968 
uöt8_t
 
cou¡î
=0;

971 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

974 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

977  
cou¡î
;

978 
	}
}

1003 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1006 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1007 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1008 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1010 i‡(
NewSèã
 !
DISABLE
)

1013 
CANx
->
IER
 |
CAN_IT
;

1018 
CANx
->
IER
 &~
CAN_IT
;

1020 
	}
}

1043 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1045 
FœgSètus
 
bô°©us
 = 
RESET
;

1048 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1049 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1052 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1055 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1058 
bô°©us
 = 
SET
;

1063 
bô°©us
 = 
RESET
;

1066 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1069 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1072 
bô°©us
 = 
SET
;

1077 
bô°©us
 = 
RESET
;

1080 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1083 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1086 
bô°©us
 = 
SET
;

1091 
bô°©us
 = 
RESET
;

1094 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1097 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1100 
bô°©us
 = 
SET
;

1105 
bô°©us
 = 
RESET
;

1111 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1114 
bô°©us
 = 
SET
;

1119 
bô°©us
 = 
RESET
;

1123  
bô°©us
;

1124 
	}
}

1143 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1145 
uöt32_t
 
Êagtmp
=0;

1147 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1148 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1150 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1153 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1157 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1159 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1162 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1164 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1167 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1169 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1172 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1177 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1180 
	}
}

1203 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1205 
ITSètus
 
ô°©us
 = 
RESET
;

1207 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1208 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1211 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1214 
CAN_IT
)

1216 
CAN_IT_TME
:

1218 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1220 
CAN_IT_FMP0
:

1222 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1224 
CAN_IT_FF0
:

1226 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1228 
CAN_IT_FOV0
:

1230 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1232 
CAN_IT_FMP1
:

1234 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1236 
CAN_IT_FF1
:

1238 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1240 
CAN_IT_FOV1
:

1242 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1244 
CAN_IT_WKU
:

1246 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1248 
CAN_IT_SLK
:

1250 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1252 
CAN_IT_EWG
:

1254 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1256 
CAN_IT_EPV
:

1258 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1260 
CAN_IT_BOF
:

1262 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1264 
CAN_IT_LEC
:

1266 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1268 
CAN_IT_ERR
:

1270 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1274 
ô°©us
 = 
RESET
;

1281 
ô°©us
 = 
RESET
;

1285  
ô°©us
;

1286 
	}
}

1306 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1309 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1310 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1312 
CAN_IT
)

1314 
CAN_IT_TME
:

1316 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1318 
CAN_IT_FF0
:

1320 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1322 
CAN_IT_FOV0
:

1324 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1326 
CAN_IT_FF1
:

1328 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1330 
CAN_IT_FOV1
:

1332 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1334 
CAN_IT_WKU
:

1336 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1338 
CAN_IT_SLK
:

1340 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1342 
CAN_IT_EWG
:

1344 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1348 
CAN_IT_EPV
:

1350 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1354 
CAN_IT_BOF
:

1356 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1360 
CAN_IT_LEC
:

1362 
CANx
->
ESR
 = 
RESET
;

1364 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1366 
CAN_IT_ERR
:

1368 
CANx
->
ESR
 = 
RESET
;

1370 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1377 
	}
}

1385 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1387 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1389 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1392 
≥ndögbô°©us
 = 
SET
;

1397 
≥ndögbô°©us
 = 
RESET
;

1399  
≥ndögbô°©us
;

1400 
	}
}

	@stm32f10x_can.h

24 #i‚de‡
__STM32F10x_CAN_H


25 
	#__STM32F10x_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

47 ((
PERIPH
Ë=
CAN2
))

	)

55 
uöt16_t
 
CAN_PªsˇÀr
;

58 
uöt8_t
 
CAN_Mode
;

62 
uöt8_t
 
CAN_SJW
;

68 
uöt8_t
 
CAN_BS1
;

72 
uöt8_t
 
CAN_BS2
;

77 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

81 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

85 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

89 
Fun˘i⁄ÆSèã
 
CAN_NART
;

93 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

97 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

100 } 
	tCAN_InôTy≥Def
;

108 
uöt16_t
 
CAN_FûãrIdHigh
;

112 
uöt16_t
 
CAN_FûãrIdLow
;

116 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

121 
uöt16_t
 
CAN_FûãrMaskIdLow
;

126 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

129 
uöt8_t
 
CAN_FûãrNumbî
;

131 
uöt8_t
 
CAN_FûãrMode
;

134 
uöt8_t
 
CAN_FûãrSˇÀ
;

137 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

139 } 
	tCAN_FûãrInôTy≥Def
;

147 
uöt32_t
 
StdId
;

150 
uöt32_t
 
ExtId
;

153 
uöt8_t
 
IDE
;

157 
uöt8_t
 
RTR
;

161 
uöt8_t
 
DLC
;

165 
uöt8_t
 
D©a
[8];

167 } 
	tC™TxMsg
;

175 
uöt32_t
 
StdId
;

178 
uöt32_t
 
ExtId
;

181 
uöt8_t
 
IDE
;

185 
uöt8_t
 
RTR
;

189 
uöt8_t
 
DLC
;

192 
uöt8_t
 
D©a
[8];

195 
uöt8_t
 
FMI
;

198 } 
	tC™RxMsg
;

212 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

213 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

223 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

224 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

225 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

226 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

228 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

229 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

230 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

231 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

241 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

242 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

243 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

246 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

247 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

248 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

258 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

259 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

270 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

271 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

272 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

273 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

275 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

276 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

285 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

286 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

287 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

288 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

289 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

290 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

291 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

292 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

293 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

294 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

295 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

296 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

297 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

298 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

299 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

300 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

302 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

311 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

313 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

314 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

315 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

317 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

318 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

320 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

330 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

339 #i‚de‡
STM32F10X_CL


340 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

342 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

352 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

353 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

355 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

356 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

365 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

366 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

368 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

369 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

379 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

380 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

381 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

382 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

390 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

399 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

400 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

401 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

402 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

412 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

413 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

414 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

415 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

424 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

425 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

426 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

436 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

437 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

438 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

439 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

449 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

450 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

452 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

462 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

463 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

473 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

485 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

486 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

487 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

488 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

489 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

490 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

491 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

492 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

507 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

508 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

509 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

512 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

513 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

514 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

515 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

516 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

517 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

520 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

521 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

526 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

527 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

528 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

529 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

531 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

532 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

533 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

534 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

535 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

536 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

537 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

538 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

540 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

541 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

542 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

543 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

544 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

556 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

559 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

560 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

561 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

562 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

563 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

564 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

567 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

568 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

571 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

572 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

573 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

574 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

575 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

578 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

579 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

580 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

583 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

584 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

585 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

586 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

587 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

588 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

589 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

591 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

592 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

593 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

594 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

595 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

596 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

605 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

606 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

607 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

608 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

609 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

610 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

611 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

612 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

613 
	#CANTXFAILE
 
CAN_TxSètus_Faûed


	)

614 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

615 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

616 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

617 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

618 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

619 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

620 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

642 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

645 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

646 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

647 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

648 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

649 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

653 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

654 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

655 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

658 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

659 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

660 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

664 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

665 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

666 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

669 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

670 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

671 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

674 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

675 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

676 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

677 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

678 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

680 #ifde‡
__˝lu•lus


	@stm32f10x_cec.c

23 
	~"°m32f10x_˚c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

54 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

55 
	#PE_BôNumbî
 0x00

	)

56 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

59 
	#IE_BôNumbî
 0x01

	)

60 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

65 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

66 
	#TSOM_BôNumbî
 0x00

	)

67 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

70 
	#TEOM_BôNumbî
 0x01

	)

71 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

73 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

74 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

118 
	$CEC_DeInô
()

121 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

124 
	}
}

135 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

137 
uöt16_t
 
tm¥eg
 = 0;

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

141 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

145 
tm¥eg
 = 
CEC
->
CFGR
;

148 
tm¥eg
 &
CFGR_CLEAR_Mask
;

151 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

154 
CEC
->
CFGR
 = 
tm¥eg
;

156 
	}
}

164 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

169 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

171 if(
NewSèã
 =
DISABLE
)

174 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

178 
	}
}

186 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

199 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

202 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

205 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

206 
	}
}

213 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

216 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

219 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

220 
	}
}

227 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

230 
CEC
->
TXD
 = 
D©a
 ;

231 
	}
}

239 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

242  (
uöt8_t
)(
CEC
->
RXD
);

243 
	}
}

250 
	$CEC_SèπOfMesßge
()

253 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

254 
	}
}

262 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

268 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

269 
	}
}

291 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

293 
FœgSètus
 
bô°©us
 = 
RESET
;

294 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

297 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

300 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

303 
˚¸eg
 = 
CEC_FLAG
 >> 28;

306 
CEC_FLAG
 &
FLAG_Mask
;

308 if(
˚¸eg
 != 0)

311 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

314 
˚cba£
 += 0xC;

319 
˚cba£
 += 0x10;

322 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

325 
bô°©us
 = 
SET
;

330 
bô°©us
 = 
RESET
;

334  
bô°©us
;

335 
	}
}

349 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

351 
uöt32_t
 
tmp
 = 0x0;

354 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

356 
tmp
 = 
CEC
->
CSR
 & 0x2;

359 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

360 
	}
}

372 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

374 
ITSètus
 
bô°©us
 = 
RESET
;

375 
uöt32_t
 
íabÀ°©us
 = 0;

378 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

381 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

384 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

387 
bô°©us
 = 
SET
;

392 
bô°©us
 = 
RESET
;

395  
bô°©us
;

396 
	}
}

408 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

410 
uöt32_t
 
tmp
 = 0x0;

413 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

415 
tmp
 = 
CEC
->
CSR
 & 0x2;

418 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

419 
	}
}

	@stm32f10x_cec.h

24 #i‚de‡
__STM32F10x_CEC_H


25 
	#__STM32F10x_CEC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
CEC_BôTimögMode
;

54 
uöt16_t
 
CEC_BôPîiodMode
;

56 }
	tCEC_InôTy≥Def
;

69 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

70 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

72 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
) || \

73 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

	)

81 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

82 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

84 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
) || \

85 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

	)

94 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

95 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

96 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

97 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

98 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
) || \

99 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

	)

108 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

116 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

129 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

130 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

131 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

132 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

133 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

134 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

135 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

140 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

141 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

142 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

143 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

144 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

145 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

146 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

148 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

150 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
) || \

151 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

154 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

156 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

	)

177 
CEC_DeInô
();

178 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

179 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

182 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

183 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

184 
uöt8_t
 
CEC_Re˚iveD©aByã
();

185 
CEC_SèπOfMesßge
();

186 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

188 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

189 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

190 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

192 #ifde‡
__˝lu•lus


	@stm32f10x_crc.c

23 
	~"°m32f10x_¸c.h
"

83 
	$CRC_Re£tDR
()

86 
CRC
->
CR
 = 
CRC_CR_RESET
;

87 
	}
}

94 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

96 
CRC
->
DR
 = 
D©a
;

98  (
CRC
->
DR
);

99 
	}
}

107 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

109 
uöt32_t
 
ödex
 = 0;

111 
ödex
 = 0; index < 
Buf„rLígth
; index++)

113 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

115  (
CRC
->
DR
);

116 
	}
}

123 
uöt32_t
 
	$CRC_GëCRC
()

125  (
CRC
->
DR
);

126 
	}
}

133 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

135 
CRC
->
IDR
 = 
IDVÆue
;

136 
	}
}

143 
uöt8_t
 
	$CRC_GëIDRegi°î
()

145  (
CRC
->
IDR
);

146 
	}
}

	@stm32f10x_crc.h

24 #i‚de‡
__STM32F10x_CRC_H


25 
	#__STM32F10x_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

70 
CRC_Re£tDR
();

71 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

72 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

73 
uöt32_t
 
CRC_GëCRC
();

74 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

75 
uöt8_t
 
CRC_GëIDRegi°î
();

77 #ifde‡
__˝lu•lus


	@stm32f10x_dac.c

23 
	~"°m32f10x_dac.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

51 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

52 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

55 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

56 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

57 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

60 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

98 
	$DAC_DeInô
()

101 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

104 
	}
}

117 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

119 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

121 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

122 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

123 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

124 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

127 
tm¥eg1
 = 
DAC
->
CR
;

129 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

136 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

137 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

139 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

141 
DAC
->
CR
 = 
tm¥eg1
;

142 
	}
}

150 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

154 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

156 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

158 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

160 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

161 
	}
}

173 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

178 i‡(
NewSèã
 !
DISABLE
)

181 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

186 
DAC
->
CR
 &~(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

188 
	}
}

189 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

203 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

206 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

208 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

210 i‡(
NewSèã
 !
DISABLE
)

213 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

218 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

220 
	}
}

233 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

236 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

238 i‡(
NewSèã
 !
DISABLE
)

241 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

246 
DAC
->
CR
 &~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

248 
	}
}

260 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

263 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

265 i‡(
NewSèã
 !
DISABLE
)

268 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

273 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

275 
	}
}

284 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

287 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

288 i‡(
NewSèã
 !
DISABLE
)

291 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
 ;

296 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

298 
	}
}

314 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

318 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

320 i‡(
NewSèã
 !
DISABLE
)

323 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

328 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

330 
	}
}

342 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

344 
__IO
 
uöt32_t
 
tmp
 = 0;

347 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

348 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

350 
tmp
 = (
uöt32_t
)
DAC_BASE
;

351 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

354 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

355 
	}
}

367 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

369 
__IO
 
uöt32_t
 
tmp
 = 0;

372 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

373 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

375 
tmp
 = (
uöt32_t
)
DAC_BASE
;

376 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

379 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

380 
	}
}

396 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

398 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

401 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

402 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

403 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

406 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

408 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

412 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

415 
tmp
 = (
uöt32_t
)
DAC_BASE
;

416 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

419 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

420 
	}
}

430 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

432 
__IO
 
uöt32_t
 
tmp
 = 0;

435 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

437 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

438 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

441  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

442 
	}
}

444 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

456 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

458 
FœgSètus
 
bô°©us
 = 
RESET
;

460 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

461 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

464 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

467 
bô°©us
 = 
SET
;

472 
bô°©us
 = 
RESET
;

475  
bô°©us
;

476 
	}
}

489 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

492 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

493 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

496 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

497 
	}
}

510 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

512 
ITSètus
 
bô°©us
 = 
RESET
;

513 
uöt32_t
 
íabÀ°©us
 = 0;

516 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

517 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

520 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

523 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

526 
bô°©us
 = 
SET
;

531 
bô°©us
 = 
RESET
;

534  
bô°©us
;

535 
	}
}

548 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

551 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

552 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

555 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

556 
	}
}

	@stm32f10x_dac.h

24 #i‚de‡
__STM32F10x_DAC_H


25 
	#__STM32F10x_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DAC_Triggî
;

55 
uöt32_t
 
DAC_WaveGíî©i⁄
;

59 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

63 
uöt32_t
 
DAC_OuçutBuf„r
;

65 }
	tDAC_InôTy≥Def
;

79 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

81 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

86 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

87 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

88 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

90 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

91 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

92 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

93 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

95 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

103 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

113 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

114 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

115 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

116 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

118 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

127 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

128 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

129 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

130 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

131 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

132 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

133 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

134 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

135 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

136 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

137 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

138 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

150 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

152 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

163 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

175 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

184 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

185 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

186 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

187 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

196 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

197 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

199 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

208 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

209 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

210 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

211 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

212 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

213 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

222 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

223 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

224 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

225 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

234 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

238 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

243 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

244 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

254 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

255 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

278 
DAC_DeInô
();

279 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

281 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

282 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

283 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

291 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

292 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

293 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

294 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

296 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

297 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

300 #ifde‡
__˝lu•lus


	@stm32f10x_dbgmcu.c

23 
	~"°m32f10x_dbgmcu.h
"

46 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

84 
uöt32_t
 
	$DBGMCU_GëREVID
()

86 (
DBGMCU
->
IDCODE
 >> 16);

87 
	}
}

94 
uöt32_t
 
	$DBGMCU_GëDEVID
()

96 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

97 
	}
}

134 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

137 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

140 i‡(
NewSèã
 !
DISABLE
)

142 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

146 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

148 
	}
}

	@stm32f10x_dbgmcu.h

24 #i‚de‡
__STM32F10x_DBGMCU_H


25 
	#__STM32F10x_DBGMCU_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

54 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

55 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

56 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

57 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

58 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

59 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

60 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

61 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

62 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

63 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

66 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

67 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

68 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

69 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

70 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

74 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

75 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

76 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

77 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

78 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

79 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

81 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

98 
uöt32_t
 
DBGMCU_GëREVID
();

99 
uöt32_t
 
DBGMCU_GëDEVID
();

100 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

102 #ifde‡
__˝lu•lus


	@stm32f10x_dma.c

23 
	~"°m32f10x_dma.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

49 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

50 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

51 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

52 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

53 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF6
 | 
DMA_ISR_TCIF6
 | 
DMA_ISR_HTIF6
 | 
DMA_ISR_TEIF6
))

	)

54 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF7
 | 
DMA_ISR_TCIF7
 | 
DMA_ISR_HTIF7
 | 
DMA_ISR_TEIF7
))

	)

57 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

58 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

59 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

60 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

61 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

64 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

67 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

108 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

111 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

114 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
DMA_CCR1_EN
;

308 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

353 
	$DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
)

356 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

360 
DMAy_Ch™√lx
->
CNDTR
 = 
D©aNumbî
;

361 
	}
}

371 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

374 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

376  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

377 
	}
}

433 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
)

435 
FœgSètus
 
bô°©us
 = 
RESET
;

436 
uöt32_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMAy_FLAG
));

442 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

445 
tm¥eg
 = 
DMA2
->
ISR
 ;

450 
tm¥eg
 = 
DMA1
->
ISR
 ;

454 i‡((
tm¥eg
 & 
DMAy_FLAG
Ë!(
uöt32_t
)
RESET
)

457 
bô°©us
 = 
SET
;

462 
bô°©us
 = 
RESET
;

466  
bô°©us
;

467 
	}
}

523 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
)

526 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMAy_FLAG
));

529 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

532 
DMA2
->
IFCR
 = 
DMAy_FLAG
;

537 
DMA1
->
IFCR
 = 
DMAy_FLAG
;

539 
	}
}

595 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
)

597 
ITSètus
 
bô°©us
 = 
RESET
;

598 
uöt32_t
 
tm¥eg
 = 0;

601 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMAy_IT
));

604 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

607 
tm¥eg
 = 
DMA2
->
ISR
;

612 
tm¥eg
 = 
DMA1
->
ISR
;

616 i‡((
tm¥eg
 & 
DMAy_IT
Ë!(
uöt32_t
)
RESET
)

619 
bô°©us
 = 
SET
;

624 
bô°©us
 = 
RESET
;

627  
bô°©us
;

628 
	}
}

684 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
)

687 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMAy_IT
));

690 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

693 
DMA2
->
IFCR
 = 
DMAy_IT
;

698 
DMA1
->
IFCR
 = 
DMAy_IT
;

700 
	}
}

	@stm32f10x_dma.h

24 #i‚de‡
__STM32F10x_DMA_H


25 
	#__STM32F10x_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

54 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

56 
uöt32_t
 
DMA_DIR
;

59 
uöt32_t
 
DMA_Buf„rSize
;

63 
uöt32_t
 
DMA_PîùhîÆInc
;

66 
uöt32_t
 
DMA_Mem‹yInc
;

69 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

72 
uöt32_t
 
DMA_Mem‹yD©aSize
;

75 
uöt32_t
 
DMA_Mode
;

80 
uöt32_t
 
DMA_Pri‹ôy
;

83 
uöt32_t
 
DMA_M2M
;

85 }
	tDMA_InôTy≥Def
;

95 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

	)

112 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

113 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

114 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
) || \

115 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

	)

124 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

125 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

126 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

127 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

136 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

137 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

138 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

139 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

148 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

149 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

150 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

151 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

153 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

162 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

163 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

164 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

165 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

167 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

	)

176 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

177 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

187 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

188 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

189 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

190 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

191 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

194 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

	)

203 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

204 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

205 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

215 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

216 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

217 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

218 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

220 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

221 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

222 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

223 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

224 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

225 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

226 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

227 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

228 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

229 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

230 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

231 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

232 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

233 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

234 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

235 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

236 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

237 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

238 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

239 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

240 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

241 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

242 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

243 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

244 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

245 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

246 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

247 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

249 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

250 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

251 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

252 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

253 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

254 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

255 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

256 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

257 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

258 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

259 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

260 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

261 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

262 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

263 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

264 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

265 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

266 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

267 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

268 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

270 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

272 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
) || \

273 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

274 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

275 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

276 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

277 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

278 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

279 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

280 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

281 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

282 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

283 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

284 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

285 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

286 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

287 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

288 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

289 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

290 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

291 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

292 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

293 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

294 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

295 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

	)

304 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

305 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

306 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

307 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

308 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

309 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

310 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

311 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

312 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

313 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

314 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

315 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

316 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

317 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

318 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

319 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

320 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

321 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

322 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

323 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

324 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

325 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

326 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

327 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

328 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

329 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

330 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

331 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

333 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

334 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

335 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

336 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

337 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

338 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

339 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

340 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

341 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

342 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

343 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

344 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

345 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

346 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

347 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

348 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

349 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

350 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

351 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

352 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

354 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

356 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

379 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

	)

388 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

410 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

411 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

413 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

416 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

417 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

418 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

419 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

420 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

422 #ifde‡
__˝lu•lus


	@stm32f10x_exti.c

23 
	~"°m32f10x_exti.h
"

46 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

85 
	$EXTI_DeInô
()

87 
EXTI
->
IMR
 = 0x00000000;

88 
EXTI
->
EMR
 = 0x00000000;

89 
EXTI
->
RTSR
 = 0x00000000;

90 
EXTI
->
FTSR
 = 0x00000000;

91 
EXTI
->
PR
 = 0x000FFFFF;

92 
	}
}

101 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

103 
uöt32_t
 
tmp
 = 0;

106 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

107 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

108 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

111 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

113 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

116 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

117 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

119 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

121 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

125 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

128 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

131 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

132 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

136 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

139 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

144 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

147 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
	}
}

157 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

159 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

160 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

161 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

162 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

163 
	}
}

171 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

174 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

176 
EXTI
->
SWIER
 |
EXTI_Löe
;

177 
	}
}

186 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

188 
FœgSètus
 
bô°©us
 = 
RESET
;

190 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

192 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

194 
bô°©us
 = 
SET
;

198 
bô°©us
 = 
RESET
;

200  
bô°©us
;

201 
	}
}

209 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

212 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

214 
EXTI
->
PR
 = 
EXTI_Löe
;

215 
	}
}

224 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

226 
ITSètus
 
bô°©us
 = 
RESET
;

227 
uöt32_t
 
íabÀ°©us
 = 0;

229 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

231 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

232 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

	@stm32f10x_exti.h

24 #i‚de‡
__STM32F10x_EXTI_H


25 
	#__STM32F10x_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
EXTI_Mode_I¡îru±
 = 0x00,

53 
EXTI_Mode_Evít
 = 0x04

54 }
	tEXTIMode_Ty≥Def
;

56 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

64 
EXTI_Triggî_Risög
 = 0x08,

65 
EXTI_Triggî_FÆlög
 = 0x0C,

66 
EXTI_Triggî_Risög_FÆlög
 = 0x10

67 }
	tEXTITriggî_Ty≥Def
;

69 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

71 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

78 
uöt32_t
 
EXTI_Löe
;

81 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

84 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

87 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

89 }
	tEXTI_InôTy≥Def
;

103 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

104 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

105 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

106 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

107 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

108 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

109 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

110 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

111 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

112 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

113 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

114 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

115 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

116 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

117 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

118 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

119 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

120 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

121 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

123 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

126 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

127 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

128 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

129 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

130 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

131 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

132 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

133 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

134 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

135 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

	)

158 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

162 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

163 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

164 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

167 #ifde‡
__˝lu•lus


	@stm32f10x_flash.c

23 
	~"°m32f10x_Êash.h
"

47 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

48 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

49 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

52 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

55 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

56 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

57 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

58 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

59 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

60 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

61 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

62 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

63 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

64 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

65 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

66 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

69 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

70 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

71 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

72 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

73 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

74 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

77 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

78 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

79 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

82 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

85 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

86 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

254 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

256 
uöt32_t
 
tm¥eg
 = 0;

259 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

262 
tm¥eg
 = 
FLASH
->
ACR
;

265 
tm¥eg
 &
ACR_LATENCY_Mask
;

266 
tm¥eg
 |
FLASH_L©ícy
;

269 
FLASH
->
ACR
 = 
tm¥eg
;

270 
	}
}

281 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

284 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

287 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

288 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

289 
	}
}

300 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

303 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

306 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

307 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

308 
	}
}

319 
	$FLASH_U∆ock
()

322 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

323 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

325 #ifde‡
STM32F10X_XL


327 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

328 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

330 
	}
}

340 
	$FLASH_U∆ockB™k1
()

343 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

344 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

345 
	}
}

347 #ifde‡
STM32F10X_XL


354 
	$FLASH_U∆ockB™k2
()

357 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

358 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

360 
	}
}

372 
	$FLASH_Lock
()

375 
FLASH
->
CR
 |
CR_LOCK_Së
;

377 #ifde‡
STM32F10X_XL


379 
FLASH
->
CR2
 |
CR_LOCK_Së
;

381 
	}
}

392 
	$FLASH_LockB™k1
()

395 
FLASH
->
CR
 |
CR_LOCK_Së
;

396 
	}
}

398 #ifde‡
STM32F10X_XL


405 
	$FLASH_LockB™k2
()

408 
FLASH
->
CR2
 |
CR_LOCK_Së
;

409 
	}
}

419 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

421 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

423 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

425 #ifde‡
STM32F10X_XL


426 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

429 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

430 if(
°©us
 =
FLASH_COMPLETE
)

433 
FLASH
->
CR
|
CR_PER_Së
;

434 
FLASH
->
AR
 = 
Page_Addªss
;

435 
FLASH
->
CR
|
CR_STRT_Së
;

438 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

447 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

448 if(
°©us
 =
FLASH_COMPLETE
)

451 
FLASH
->
CR2
|
CR_PER_Së
;

452 
FLASH
->
AR2
 = 
Page_Addªss
;

453 
FLASH
->
CR2
|
CR_STRT_Së
;

456 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

459 
FLASH
->
CR2
 &
CR_PER_Re£t
;

464 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

466 if(
°©us
 =
FLASH_COMPLETE
)

469 
FLASH
->
CR
|
CR_PER_Së
;

470 
FLASH
->
AR
 = 
Page_Addªss
;

471 
FLASH
->
CR
|
CR_STRT_Së
;

474 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

477 
FLASH
->
CR
 &
CR_PER_Re£t
;

482  
°©us
;

483 
	}
}

492 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

494 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

496 #ifde‡
STM32F10X_XL


498 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

500 if(
°©us
 =
FLASH_COMPLETE
)

503 
FLASH
->
CR
 |
CR_MER_Së
;

504 
FLASH
->
CR
 |
CR_STRT_Së
;

507 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

510 
FLASH
->
CR
 &
CR_MER_Re£t
;

512 if(
°©us
 =
FLASH_COMPLETE
)

515 
FLASH
->
CR2
 |
CR_MER_Së
;

516 
FLASH
->
CR2
 |
CR_STRT_Së
;

519 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

522 
FLASH
->
CR2
 &
CR_MER_Re£t
;

526 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 =
FLASH_COMPLETE
)

530 
FLASH
->
CR
 |
CR_MER_Së
;

531 
FLASH
->
CR
 |
CR_STRT_Së
;

534 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

537 
FLASH
->
CR
 &
CR_MER_Re£t
;

542  
°©us
;

543 
	}
}

555 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

557 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

559 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

561 if(
°©us
 =
FLASH_COMPLETE
)

564 
FLASH
->
CR
 |
CR_MER_Së
;

565 
FLASH
->
CR
 |
CR_STRT_Së
;

568 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

571 
FLASH
->
CR
 &
CR_MER_Re£t
;

574  
°©us
;

575 
	}
}

577 #ifde‡
STM32F10X_XL


585 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

587 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

589 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

591 if(
°©us
 =
FLASH_COMPLETE
)

594 
FLASH
->
CR2
 |
CR_MER_Së
;

595 
FLASH
->
CR2
 |
CR_STRT_Së
;

598 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

601 
FLASH
->
CR2
 &
CR_MER_Re£t
;

604  
°©us
;

605 
	}
}

616 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

618 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

620 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

623 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

625 
rd±mp
 = 0x00;

629 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

630 if(
°©us
 =
FLASH_COMPLETE
)

633 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

634 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

637 
FLASH
->
CR
 |
CR_OPTER_Së
;

638 
FLASH
->
CR
 |
CR_STRT_Së
;

640 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

642 if(
°©us
 =
FLASH_COMPLETE
)

645 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

648 
FLASH
->
CR
 |
CR_OPTPG_Së
;

650 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

654 if(
°©us
 !
FLASH_TIMEOUT
)

657 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

662 i‡(
°©us
 !
FLASH_TIMEOUT
)

665 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

670  
°©us
;

671 
	}
}

681 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

683 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

684 
__IO
 
uöt32_t
 
tmp
 = 0;

687 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

689 #ifde‡
STM32F10X_XL


690 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

693 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

694 if(
°©us
 =
FLASH_COMPLETE
)

698 
FLASH
->
CR
 |
CR_PG_Së
;

700 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

702 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

704 if(
°©us
 =
FLASH_COMPLETE
)

708 
tmp
 = 
Addªss
 + 2;

710 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

713 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

716 
FLASH
->
CR
 &
CR_PG_Re£t
;

721 
FLASH
->
CR
 &
CR_PG_Re£t
;

725 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

728 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 =
FLASH_COMPLETE
)

734 
FLASH
->
CR
 |
CR_PG_Së
;

736 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

739 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

742 
FLASH
->
CR
 &
CR_PG_Re£t
;

747 
FLASH
->
CR
 &
CR_PG_Re£t
;

751 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

753 if(
°©us
 =
FLASH_COMPLETE
)

757 
FLASH
->
CR2
 |
CR_PG_Së
;

758 
tmp
 = 
Addªss
 + 2;

760 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

763 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

766 
FLASH
->
CR2
 &
CR_PG_Re£t
;

771 
FLASH
->
CR2
 &
CR_PG_Re£t
;

777 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

779 if(
°©us
 =
FLASH_COMPLETE
)

783 
FLASH
->
CR2
 |
CR_PG_Së
;

785 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

787 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

789 if(
°©us
 =
FLASH_COMPLETE
)

793 
tmp
 = 
Addªss
 + 2;

795 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

798 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

801 
FLASH
->
CR2
 &
CR_PG_Re£t
;

806 
FLASH
->
CR2
 &
CR_PG_Re£t
;

812 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

814 if(
°©us
 =
FLASH_COMPLETE
)

818 
FLASH
->
CR
 |
CR_PG_Së
;

820 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

822 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

824 if(
°©us
 =
FLASH_COMPLETE
)

828 
tmp
 = 
Addªss
 + 2;

830 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

833 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

836 
FLASH
->
CR
 &
CR_PG_Re£t
;

841 
FLASH
->
CR
 &
CR_PG_Re£t
;

847  
°©us
;

848 
	}
}

858 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

860 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

862 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

864 #ifde‡
STM32F10X_XL


866 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

868 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

870 if(
°©us
 =
FLASH_COMPLETE
)

873 
FLASH
->
CR
 |
CR_PG_Së
;

875 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

877 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

880 
FLASH
->
CR
 &
CR_PG_Re£t
;

885 if(
°©us
 =
FLASH_COMPLETE
)

888 
FLASH
->
CR2
 |
CR_PG_Së
;

890 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

892 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

895 
FLASH
->
CR2
 &
CR_PG_Re£t
;

900 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

902 if(
°©us
 =
FLASH_COMPLETE
)

905 
FLASH
->
CR
 |
CR_PG_Së
;

907 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

909 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

912 
FLASH
->
CR
 &
CR_PG_Re£t
;

917  
°©us
;

918 
	}
}

929 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

931 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

933 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

934 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

936 if(
°©us
 =
FLASH_COMPLETE
)

939 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

940 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

942 
FLASH
->
CR
 |
CR_OPTPG_Së
;

943 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

946 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

947 if(
°©us
 !
FLASH_TIMEOUT
)

950 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

954  
°©us
;

955 
	}
}

975 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

977 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

979 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

982 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

984 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

985 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

986 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

987 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

988 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

991 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

993 if(
°©us
 =
FLASH_COMPLETE
)

996 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

997 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

998 
FLASH
->
CR
 |
CR_OPTPG_Së
;

999 if(
WRP0_D©a
 != 0xFF)

1001 
OB
->
WRP0
 = 
WRP0_D©a
;

1004 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1006 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1008 
OB
->
WRP1
 = 
WRP1_D©a
;

1011 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1013 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1015 
OB
->
WRP2
 = 
WRP2_D©a
;

1018 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1021 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1023 
OB
->
WRP3
 = 
WRP3_D©a
;

1026 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1029 if(
°©us
 !
FLASH_TIMEOUT
)

1032 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1036  
°©us
;

1037 
	}
}

1049 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1051 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1054 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1055 if(
°©us
 =
FLASH_COMPLETE
)

1058 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1059 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1060 
FLASH
->
CR
 |
CR_OPTER_Së
;

1061 
FLASH
->
CR
 |
CR_STRT_Së
;

1063 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1064 if(
°©us
 =
FLASH_COMPLETE
)

1067 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1069 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1070 if(
NewSèã
 !
DISABLE
)

1072 
OB
->
RDP
 = 0x00;

1076 
OB
->
RDP
 = 
RDP_Key
;

1079 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1081 if(
°©us
 !
FLASH_TIMEOUT
)

1084 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1089 if(
°©us
 !
FLASH_TIMEOUT
)

1092 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1097  
°©us
;

1098 
	}
}

1118 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1120 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1123 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1124 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1125 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1128 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1129 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1132 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1134 if(
°©us
 =
FLASH_COMPLETE
)

1137 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1139 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1142 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1143 if(
°©us
 !
FLASH_TIMEOUT
)

1146 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1150  
°©us
;

1151 
	}
}

1153 #ifde‡
STM32F10X_XL


1172 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1174 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1175 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1177 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1178 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1181 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1183 if(
°©us
 =
FLASH_COMPLETE
)

1186 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1188 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1190 
OB
->
USER
 |
OB_USER_BFB2
;

1194 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1197 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1198 if(
°©us
 !
FLASH_TIMEOUT
)

1201 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1205  
°©us
;

1206 
	}
}

1216 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1219  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1220 
	}
}

1228 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1231  (
uöt32_t
)(
FLASH
->
WRPR
);

1232 
	}
}

1240 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1242 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1243 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1245 
ªadout°©us
 = 
SET
;

1249 
ªadout°©us
 = 
RESET
;

1251  
ªadout°©us
;

1252 
	}
}

1260 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1262 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1266 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1290 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 #ifde‡
STM32F10X_XL


1294 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1297 if((
FLASH_IT
 & 0x80000000) != 0x0)

1299 if(
NewSèã
 !
DISABLE
)

1302 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1307 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1312 if(
NewSèã
 !
DISABLE
)

1315 
FLASH
->
CR
 |
FLASH_IT
;

1320 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1325 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1328 if(
NewSèã
 !
DISABLE
)

1331 
FLASH
->
CR
 |
FLASH_IT
;

1336 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1339 
	}
}

1357 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1359 
FœgSètus
 
bô°©us
 = 
RESET
;

1361 #ifde‡
STM32F10X_XL


1363 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1364 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1366 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1368 
bô°©us
 = 
SET
;

1372 
bô°©us
 = 
RESET
;

1377 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1379 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1381 
bô°©us
 = 
SET
;

1385 
bô°©us
 = 
RESET
;

1390 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1392 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1402 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1403 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1405 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1407 
bô°©us
 = 
SET
;

1411 
bô°©us
 = 
RESET
;

1416 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1428  
bô°©us
;

1429 
	}
}

1443 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1445 #ifde‡
STM32F10X_XL


1447 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1449 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1452 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1457 
FLASH
->
SR
 = 
FLASH_FLAG
;

1462 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1465 
FLASH
->
SR
 = 
FLASH_FLAG
;

1467 
	}
}

1477 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1479 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1481 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1483 
Êash°©us
 = 
FLASH_BUSY
;

1487 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1489 
Êash°©us
 = 
FLASH_ERROR_PG
;

1493 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1495 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1499 
Êash°©us
 = 
FLASH_COMPLETE
;

1504  
Êash°©us
;

1505 
	}
}

1515 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1517 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1519 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1521 
Êash°©us
 = 
FLASH_BUSY
;

1525 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1527 
Êash°©us
 = 
FLASH_ERROR_PG
;

1531 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1533 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1537 
Êash°©us
 = 
FLASH_COMPLETE
;

1542  
Êash°©us
;

1543 
	}
}

1545 #ifde‡
STM32F10X_XL


1553 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1555 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1557 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1559 
Êash°©us
 = 
FLASH_BUSY
;

1563 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1565 
Êash°©us
 = 
FLASH_ERROR_PG
;

1569 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1571 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1575 
Êash°©us
 = 
FLASH_COMPLETE
;

1580  
Êash°©us
;

1581 
	}
}

1595 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1597 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1600 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1602 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1604 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1605 
Timeout
--;

1607 if(
Timeout
 == 0x00 )

1609 
°©us
 = 
FLASH_TIMEOUT
;

1612  
°©us
;

1613 
	}
}

1623 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1625 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1628 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1630 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1632 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1633 
Timeout
--;

1635 if(
Timeout
 == 0x00 )

1637 
°©us
 = 
FLASH_TIMEOUT
;

1640  
°©us
;

1641 
	}
}

1643 #ifde‡
STM32F10X_XL


1651 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1653 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1656 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1658 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1660 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1661 
Timeout
--;

1663 if(
Timeout
 == 0x00 )

1665 
°©us
 = 
FLASH_TIMEOUT
;

1668  
°©us
;

1669 
	}
}

	@stm32f10x_flash.h

24 #i‚de‡
__STM32F10x_FLASH_H


25 
	#__STM32F10x_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
FLASH_BUSY
 = 1,

53 
FLASH_ERROR_PG
,

54 
FLASH_ERROR_WRP
,

55 
FLASH_COMPLETE
,

56 
FLASH_TIMEOUT


57 }
	tFLASH_Sètus
;

71 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

72 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

73 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

76 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

86 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

87 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
) || \

88 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

	)

97 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

98 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

99 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
) || \

100 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

	)

110 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

111 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

112 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

113 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

114 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

115 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

116 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

117 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

120 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

123 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

124 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

125 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

126 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

127 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

128 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

129 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

130 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

132 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

133 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

134 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

135 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

136 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

143 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

146 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

148 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

150 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

152 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

154 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

156 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

158 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

160 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

162 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

164 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

166 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

168 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

170 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

172 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

174 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

176 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

180 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

182 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

184 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

186 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

188 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

190 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

192 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

194 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

196 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

198 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

200 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

202 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

204 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

206 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

210 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

212 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

214 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

216 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

218 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

228 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

229 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

230 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

240 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

241 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

242 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

252 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

253 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

254 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

256 #ifde‡
STM32F10X_XL


263 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

265 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

268 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

276 #ifde‡
STM32F10X_XL


277 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

278 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

280 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

281 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

283 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

284 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

285 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

287 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

288 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

289 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

290 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

292 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

302 #ifde‡
STM32F10X_XL


303 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

304 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

305 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

306 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

308 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

309 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

310 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

311 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

313 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

314 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

315 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

316 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

317 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

319 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

320 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

321 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

322 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

326 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

	)

328 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

329 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

330 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

331 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

332 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

334 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

335 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

336 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

337 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

339 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

340 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

344 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

	)

368 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

369 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

370 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

371 
FLASH_U∆ock
();

372 
FLASH_Lock
();

373 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

374 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

375 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

376 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

379 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

380 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

382 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

383 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

384 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

385 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

386 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

389 
FLASH_Sètus
 
FLASH_GëSètus
();

390 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

393 
FLASH_U∆ockB™k1
();

394 
FLASH_LockB™k1
();

395 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

396 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

397 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

399 #ifde‡
STM32F10X_XL


401 
FLASH_U∆ockB™k2
();

402 
FLASH_LockB™k2
();

403 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

404 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

405 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

406 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

409 #ifde‡
__˝lu•lus


	@stm32f10x_fsmc.c

23 
	~"°m32f10x_fsmc.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

51 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

54 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

55 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

56 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

57 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

58 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

102 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

105 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

108 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

110 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

115 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

117 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

118 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

119 
	}
}

129 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

134 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

137 
FSMC_B™k2
->
PCR2
 = 0x00000018;

138 
FSMC_B™k2
->
SR2
 = 0x00000040;

139 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

140 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

146 
FSMC_B™k3
->
PCR3
 = 0x00000018;

147 
FSMC_B™k3
->
SR3
 = 0x00000040;

148 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

149 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

151 
	}
}

158 
	$FSMC_PCCARDDeInô
()

161 
FSMC_B™k4
->
PCR4
 = 0x00000018;

162 
FSMC_B™k4
->
SR4
 = 0x00000000;

163 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

165 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

166 
	}
}

176 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

179 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

182 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

183 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

184 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

188 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

190 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

191 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

194 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

195 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

196 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

197 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

198 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

201 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

202 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

212 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

213 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

215 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

217 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

221 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

222 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

225 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

226 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

227 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

232 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

234 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

235 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

236 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

237 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

238 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

239 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

240 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

241 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

242 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

243 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

244 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

245 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

250 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

252 
	}
}

262 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

264 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

267 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

268 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

269 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

270 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

271 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

272 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

273 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

276 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

277 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

279 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

280 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

281 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

284 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

285 
PCR_Mem‹yTy≥_NAND
 |

286 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

287 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

288 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

289 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

290 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

293 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

299 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

300 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

301 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

302 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

304 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

307 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

308 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

309 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

314 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

315 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

316 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

318 
	}
}

328 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

331 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

332 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

341 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

342 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

343 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

344 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

345 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

346 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

347 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

350 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

351 
FSMC_Mem‹yD©aWidth_16b
 |

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

353 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

356 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

359 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

362 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

365 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

368 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

369 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

370 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

371 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

372 
	}
}

380 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

402 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

403 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

404 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

405 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

406 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

407 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

408 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

409 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

410 
	}
}

418 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

421 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

422 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

423 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

424 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

425 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

426 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

427 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

428 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

429 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

430 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

431 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

432 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

433 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

434 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

435 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

436 
	}
}

444 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

447 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

455 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

456 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

457 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

458 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

459 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

460 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

461 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

462 
	}
}

475 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

488 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

490 
	}
}

501 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

511 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

515 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

521 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

523 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

527 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

530 
	}
}

538 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

542 i‡(
NewSèã
 !
DISABLE
)

545 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

550 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

552 
	}
}

564 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

566 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

567 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

569 i‡(
NewSèã
 !
DISABLE
)

572 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

574 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

578 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

584 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

586 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

590 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

593 
	}
}

603 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

605 
uöt32_t
 
eccvÆ
 = 0x00000000;

607 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

610 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

615 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

618 (
eccvÆ
);

619 
	}
}

637 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

639 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

640 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

641 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

643 i‡(
NewSèã
 !
DISABLE
)

646 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

648 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

651 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

653 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

658 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

664 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

667 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

670 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

672 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

677 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

680 
	}
}

697 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

699 
FœgSètus
 
bô°©us
 = 
RESET
;

700 
uöt32_t
 
tmp§
 = 0x00000000;

703 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

704 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

706 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

708 
tmp§
 = 
FSMC_B™k2
->
SR2
;

710 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

712 
tmp§
 = 
FSMC_B™k3
->
SR3
;

717 
tmp§
 = 
FSMC_B™k4
->
SR4
;

721 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

723 
bô°©us
 = 
SET
;

727 
bô°©us
 = 
RESET
;

730  
bô°©us
;

731 
	}
}

747 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

750 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

751 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

753 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

755 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

757 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

759 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

764 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

766 
	}
}

782 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

784 
ITSètus
 
bô°©us
 = 
RESET
;

785 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

788 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

789 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

791 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

793 
tmp§
 = 
FSMC_B™k2
->
SR2
;

795 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

797 
tmp§
 = 
FSMC_B™k3
->
SR3
;

802 
tmp§
 = 
FSMC_B™k4
->
SR4
;

805 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

807 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

808 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

810 
bô°©us
 = 
SET
;

814 
bô°©us
 = 
RESET
;

816  
bô°©us
;

817 
	}
}

833 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

836 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

837 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

839 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

841 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

843 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

845 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

850 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

852 
	}
}

	@stm32f10x_fsmc.h

24 #i‚de‡
__STM32F10x_FSMC_H


25 
	#__STM32F10x_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
FSMC_AddªssSëupTime
;

57 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

62 
uöt32_t
 
FSMC_D©aSëupTime
;

67 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

72 
uöt32_t
 
FSMC_CLKDivisi⁄
;

76 
uöt32_t
 
FSMC_D©aL©ícy
;

84 
uöt32_t
 
FSMC_Ac˚ssMode
;

86 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

94 
uöt32_t
 
FSMC_B™k
;

97 
uöt32_t
 
FSMC_D©aAddªssMux
;

101 
uöt32_t
 
FSMC_Mem‹yTy≥
;

105 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

108 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

112 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

116 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

120 
uöt32_t
 
FSMC_WøpMode
;

124 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

129 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

132 
uöt32_t
 
FSMC_WaôSig«l
;

136 
uöt32_t
 
FSMC_ExãndedMode
;

139 
uöt32_t
 
FSMC_WrôeBur°
;

142 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

145 }
	tFSMC_NORSRAMInôTy≥Def
;

153 
uöt32_t
 
FSMC_SëupTime
;

159 
uöt32_t
 
FSMC_WaôSëupTime
;

165 
uöt32_t
 
FSMC_HﬁdSëupTime
;

172 
uöt32_t
 
FSMC_HiZSëupTime
;

177 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

249 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

250 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

251 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

252 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

260 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

261 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

269 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

274 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

276 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

277 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

279 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

280 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

282 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

284 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

286 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

287 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

288 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

298 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

299 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

300 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

301 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

311 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

312 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

313 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

314 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

315 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

316 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

326 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

327 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

328 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

329 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

339 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

341 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

342 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

350 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

352 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

353 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

363 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

364 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

365 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

366 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

376 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

377 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

378 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

379 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

389 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

391 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

392 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

402 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

403 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

404 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

405 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

415 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

416 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

417 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

418 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

427 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

428 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

430 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

431 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

441 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

442 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

443 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

444 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

453 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

463 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

473 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

483 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

493 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

503 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

513 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

514 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

515 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

516 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

517 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

518 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

519 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

520 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

538 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

539 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

540 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

541 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

552 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

553 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

554 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

555 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

565 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

566 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

567 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

568 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

569 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

570 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

571 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

572 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

573 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

574 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

575 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

576 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

586 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

606 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

616 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

626 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

636 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

646 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

647 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

648 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

649 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

650 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

651 ((
IT
Ë=
FSMC_IT_Levñ
) || \

652 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

661 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

662 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

663 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

664 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

665 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

666 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

667 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

668 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

670 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

696 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

697 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

698 
FSMC_PCCARDDeInô
();

699 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

700 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

701 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

702 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

703 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

704 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

705 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

706 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

707 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

708 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

709 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

710 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

711 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

712 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

713 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

714 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

716 #ifde‡
__˝lu•lus


	@stm32f10x_gpio.c

23 
	~"°m32f10x_gpio.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

53 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

54 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

55 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

60 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

61 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

62 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

65 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

66 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

67 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

68 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

69 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

108 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

111 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

113 i‡(
GPIOx
 =
GPIOA
)

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

118 i‡(
GPIOx
 =
GPIOB
)

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

121 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

123 i‡(
GPIOx
 =
GPIOC
)

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

128 i‡(
GPIOx
 =
GPIOD
)

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

131 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

133 i‡(
GPIOx
 =
GPIOE
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

138 i‡(
GPIOx
 =
GPIOF
)

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

141 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

145 i‡(
GPIOx
 =
GPIOG
)

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

148 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

151 
	}
}

159 
	$GPIO_AFIODeInô
()

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

162 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

163 
	}
}

173 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

175 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

176 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

178 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

179 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

180 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

183 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

184 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

187 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

189 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

193 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

195 
tm¥eg
 = 
GPIOx
->
CRL
;

196 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

198 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

200 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

201 i‡(
cuºíçö
 =
pos
)

203 
pos
 = 
pöpos
 << 2;

205 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

206 
tm¥eg
 &~
pömask
;

208 
tm¥eg
 |(
cuºítmode
 << 
pos
);

210 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

212 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

217 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

219 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

224 
GPIOx
->
CRL
 = 
tm¥eg
;

228 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

230 
tm¥eg
 = 
GPIOx
->
CRH
;

231 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

233 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

235 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

236 i‡(
cuºíçö
 =
pos
)

238 
pos
 = 
pöpos
 << 2;

240 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

241 
tm¥eg
 &~
pömask
;

243 
tm¥eg
 |(
cuºítmode
 << 
pos
);

245 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

247 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

250 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

252 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

256 
GPIOx
->
CRH
 = 
tm¥eg
;

258 
	}
}

266 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

269 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

270 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

271 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

272 
	}
}

281 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

283 
uöt8_t
 
bô°©us
 = 0x00;

286 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

287 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

289 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

291 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

295 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

297  
bô°©us
;

298 
	}
}

305 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

308 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

310  ((
uöt16_t
)
GPIOx
->
IDR
);

311 
	}
}

320 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

322 
uöt8_t
 
bô°©us
 = 0x00;

324 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

325 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

327 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

329 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

333 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

335  
bô°©us
;

336 
	}
}

343 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

346 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

348  ((
uöt16_t
)
GPIOx
->
ODR
);

349 
	}
}

358 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

361 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

362 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

364 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

365 
	}
}

374 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

377 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

378 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

380 
GPIOx
->
BRR
 = 
GPIO_Pö
;

381 
	}
}

394 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

397 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

398 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

399 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

401 i‡(
BôVÆ
 !
Bô_RESET
)

403 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

407 
GPIOx
->
BRR
 = 
GPIO_Pö
;

409 
	}
}

417 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

420 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

422 
GPIOx
->
ODR
 = 
P‹tVÆ
;

423 
	}
}

432 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

434 
uöt32_t
 
tmp
 = 0x00010000;

437 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

438 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

440 
tmp
 |
GPIO_Pö
;

442 
GPIOx
->
LCKR
 = 
tmp
;

444 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

446 
GPIOx
->
LCKR
 = 
tmp
;

448 
tmp
 = 
GPIOx
->
LCKR
;

450 
tmp
 = 
GPIOx
->
LCKR
;

451 
	}
}

462 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

464 
uöt32_t
 
tm¥eg
 = 0x00;

466 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

467 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

469 
tm¥eg
 = 
AFIO
->
EVCR
;

471 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

472 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

473 
tm¥eg
 |
GPIO_PöSour˚
;

474 
AFIO
->
EVCR
 = 
tm¥eg
;

475 
	}
}

483 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

489 
	}
}

549 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

551 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

554 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

555 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

559 
tm¥eg
 = 
AFIO
->
MAPR2
;

563 
tm¥eg
 = 
AFIO
->
MAPR
;

566 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

567 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

569 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

571 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

572 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

574 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

576 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

577 
tm¥eg
 &~
tmp1
;

578 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

582 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

586 i‡(
NewSèã
 !
DISABLE
)

588 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

591 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

593 
AFIO
->
MAPR2
 = 
tm¥eg
;

597 
AFIO
->
MAPR
 = 
tm¥eg
;

599 
	}
}

609 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

611 
uöt32_t
 
tmp
 = 0x00;

613 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

614 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

616 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

617 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

618 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

619 
	}
}

630 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

632 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

635 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

636 
	}
}

	@stm32f10x_gpio.h

24 #i‚de‡
__STM32F10x_GPIO_H


25 
	#__STM32F10x_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

47 ((
PERIPH
Ë=
GPIOB
) || \

48 ((
PERIPH
Ë=
GPIOC
) || \

49 ((
PERIPH
Ë=
GPIOD
) || \

50 ((
PERIPH
Ë=
GPIOE
) || \

51 ((
PERIPH
Ë=
GPIOF
) || \

52 ((
PERIPH
Ë=
GPIOG
))

	)

60 
GPIO_S≥ed_10MHz
 = 1,

61 
GPIO_S≥ed_2MHz
,

62 
GPIO_S≥ed_50MHz


63 }
	tGPIOS≥ed_Ty≥Def
;

64 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
) || \

65 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

	)

72 { 
GPIO_Mode_AIN
 = 0x0,

73 
GPIO_Mode_IN_FLOATING
 = 0x04,

74 
GPIO_Mode_IPD
 = 0x28,

75 
GPIO_Mode_IPU
 = 0x48,

76 
GPIO_Mode_Out_OD
 = 0x14,

77 
GPIO_Mode_Out_PP
 = 0x10,

78 
GPIO_Mode_AF_OD
 = 0x1C,

79 
GPIO_Mode_AF_PP
 = 0x18

80 }
	tGPIOMode_Ty≥Def
;

82 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
) || \

83 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

84 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

85 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

	)

93 
uöt16_t
 
GPIO_Pö
;

96 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

99 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

101 }
	tGPIO_InôTy≥Def
;

109 { 
Bô_RESET
 = 0,

110 
Bô_SET


111 }
	tBôA˘i⁄
;

113 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

127 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

128 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

129 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

130 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

131 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

132 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

133 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

134 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

135 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

136 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

137 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

138 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

139 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

140 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

141 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

142 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

143 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

145 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

147 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

148 ((
PIN
Ë=
GPIO_Pö_1
) || \

149 ((
PIN
Ë=
GPIO_Pö_2
) || \

150 ((
PIN
Ë=
GPIO_Pö_3
) || \

151 ((
PIN
Ë=
GPIO_Pö_4
) || \

152 ((
PIN
Ë=
GPIO_Pö_5
) || \

153 ((
PIN
Ë=
GPIO_Pö_6
) || \

154 ((
PIN
Ë=
GPIO_Pö_7
) || \

155 ((
PIN
Ë=
GPIO_Pö_8
) || \

156 ((
PIN
Ë=
GPIO_Pö_9
) || \

157 ((
PIN
Ë=
GPIO_Pö_10
) || \

158 ((
PIN
Ë=
GPIO_Pö_11
) || \

159 ((
PIN
Ë=
GPIO_Pö_12
) || \

160 ((
PIN
Ë=
GPIO_Pö_13
) || \

161 ((
PIN
Ë=
GPIO_Pö_14
) || \

162 ((
PIN
Ë=
GPIO_Pö_15
))

	)

172 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

173 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

174 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

175 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

176 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

177 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

178 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

179 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

180 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

181 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

182 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

183 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

184 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

185 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

186 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

187 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

188 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

189 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

191 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

193 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

194 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

195 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

196 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

197 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

198 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

199 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201100Ë

	)

200 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

203 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

205 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

206 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

207 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

208 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

209 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

211 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

212 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

213 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

214 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

215 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

216 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#GPIO_Rem≠_TIM67_DAC_DMA
 ((
uöt32_t
)0x80000800Ë

	)

219 
	#GPIO_Rem≠_TIM12
 ((
uöt32_t
)0x80001000Ë

	)

220 
	#GPIO_Rem≠_MISC
 ((
uöt32_t
)0x80002000Ë

	)

223 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
) || \

224 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

225 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

226 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

227 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

228 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

229 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

239 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

240 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

241 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

242 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

243 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
Ë|| ((REMAPË=
GPIO_Rem≠_TIM67_DAC_DMA
) || \

244 ((
REMAP
Ë=
GPIO_Rem≠_TIM12
Ë|| ((REMAPË=
GPIO_Rem≠_MISC
))

	)

254 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

255 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

256 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

257 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

258 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

259 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

260 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

261 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

	)

267 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

268 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

269 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

270 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

271 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

272 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

273 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

	)

283 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

284 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

285 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

286 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

287 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

288 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

289 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

290 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

291 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

292 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

293 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

294 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

295 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

296 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

297 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

298 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

300 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

310 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

311 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

312 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

313 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

314 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

315 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

324 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

325 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

327 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
) || \

328 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

	)

349 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

350 
GPIO_AFIODeInô
();

351 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

352 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

353 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

354 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

355 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

357 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

358 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

359 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

360 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

361 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

362 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

363 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

364 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

365 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

366 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

368 #ifde‡
__˝lu•lus


	@stm32f10x_i2c.c

23 
	~"°m32f10x_i2c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

53 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

54 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

57 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

58 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

61 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

62 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

65 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

66 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

69 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

70 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

73 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

74 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

77 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

78 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

81 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

82 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

85 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

86 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

89 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

92 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

93 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

96 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

97 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

100 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

103 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

104 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

107 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

108 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

111 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

114 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

117 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

120 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

123 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

162 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

167 i‡(
I2Cx
 =
I2C1
)

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

181 
	}
}

191 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

193 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

194 
uöt16_t
 
ªsu…
 = 0x04;

195 
uöt32_t
 
p˛k1
 = 8000000;

196 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

198 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

199 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

200 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

201 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

202 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

204 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

208 
tm¥eg
 = 
I2Cx
->
CR2
;

210 
tm¥eg
 &
CR2_FREQ_Re£t
;

212 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

213 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

215 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

216 
tm¥eg
 |
‰eqønge
;

218 
I2Cx
->
CR2
 = 
tm¥eg
;

222 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

225 
tm¥eg
 = 0;

228 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

231 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

233 i‡(
ªsu…
 < 0x04)

236 
ªsu…
 = 0x04;

239 
tm¥eg
 |
ªsu…
;

241 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

246 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

249 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

254 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

256 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

260 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

263 
ªsu…
 |(
uöt16_t
)0x0001;

266 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

268 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

272 
I2Cx
->
CCR
 = 
tm¥eg
;

274 
I2Cx
->
CR1
 |
CR1_PE_Së
;

278 
tm¥eg
 = 
I2Cx
->
CR1
;

280 
tm¥eg
 &
CR1_CLEAR_Mask
;

284 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

286 
I2Cx
->
CR1
 = 
tm¥eg
;

290 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

291 
	}
}

298 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

302 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

304 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

306 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

308 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

310 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

312 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

313 
	}
}

322 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
I2Cx
->
CR1
 |
CR1_PE_Së
;

335 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

337 
	}
}

346 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

349 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

350 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

351 i‡(
NewSèã
 !
DISABLE
)

354 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

359 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

361 
	}
}

370 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

373 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

374 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

375 i‡(
NewSèã
 !
DISABLE
)

378 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

383 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

385 
	}
}

394 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

397 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

398 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

399 i‡(
NewSèã
 !
DISABLE
)

402 
I2Cx
->
CR1
 |
CR1_START_Së
;

407 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

409 
	}
}

418 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

421 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

423 i‡(
NewSèã
 !
DISABLE
)

426 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

431 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

433 
	}
}

442 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

445 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

446 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

447 i‡(
NewSèã
 !
DISABLE
)

450 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

455 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

457 
	}
}

465 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

467 
uöt16_t
 
tm¥eg
 = 0;

470 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

473 
tm¥eg
 = 
I2Cx
->
OAR2
;

476 
tm¥eg
 &
OAR2_ADD2_Re£t
;

479 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

482 
I2Cx
->
OAR2
 = 
tm¥eg
;

483 
	}
}

492 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

497 i‡(
NewSèã
 !
DISABLE
)

500 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

505 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

507 
	}
}

516 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

519 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

521 i‡(
NewSèã
 !
DISABLE
)

524 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

529 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

531 
	}
}

545 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

548 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

549 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

550 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
I2Cx
->
CR2
 |
I2C_IT
;

560 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

562 
	}
}

570 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

573 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

575 
I2Cx
->
DR
 = 
D©a
;

576 
	}
}

583 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

586 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

588  (
uöt8_t
)
I2Cx
->
DR
;

589 
	}
}

601 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

604 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

605 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

607 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

610 
Addªss
 |
OAR1_ADD0_Së
;

615 
Addªss
 &
OAR1_ADD0_Re£t
;

618 
I2Cx
->
DR
 = 
Addªss
;

619 
	}
}

636 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

638 
__IO
 
uöt32_t
 
tmp
 = 0;

641 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

642 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

644 
tmp
 = (
uöt32_t
Ë
I2Cx
;

645 
tmp
 +
I2C_Regi°î
;

648  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

649 
	}
}

658 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

661 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

662 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

663 i‡(
NewSèã
 !
DISABLE
)

666 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

671 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

673 
	}
}

696 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

699 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

700 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

703 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

706 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

711 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

713 
	}
}

724 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

727 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

728 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

729 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

732 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

737 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

739 
	}
}

748 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

751 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

752 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

753 i‡(
NewSèã
 !
DISABLE
)

756 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

761 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

763 
	}
}

779 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

783 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

784 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

787 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

792 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

794 
	}
}

803 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

806 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

807 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

808 i‡(
NewSèã
 !
DISABLE
)

811 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

816 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

818 
	}
}

825 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

828 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

830  ((
I2Cx
->
SR2
) >> 8);

831 
	}
}

840 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

843 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

844 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

845 i‡(
NewSèã
 !
DISABLE
)

848 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

853 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

855 
	}
}

864 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

867 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

868 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 =
DISABLE
)

872 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

877 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

879 
	}
}

890 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

893 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

894 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

895 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

898 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

903 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

905 
	}
}

1030 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1032 
uöt32_t
 
œ°evít
 = 0;

1033 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1034 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1037 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1038 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1052 
°©us
 = 
SUCCESS
;

1057 
°©us
 = 
ERROR
;

1060  
°©us
;

1061 
	}
}

1078 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1080 
uöt32_t
 
œ°evít
 = 0;

1081 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1084 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1087 
Êag1
 = 
I2Cx
->
SR1
;

1088 
Êag2
 = 
I2Cx
->
SR2
;

1089 
Êag2
 = flag2 << 16;

1092 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1095  
œ°evít
;

1096 
	}
}

1133 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1135 
FœgSètus
 
bô°©us
 = 
RESET
;

1136 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1139 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1140 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1143 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1146 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1149 
I2C_FLAG
 &
FLAG_Mask
;

1151 if(
i2¸eg
 != 0)

1154 
i2cxba£
 += 0x14;

1159 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1161 
i2cxba£
 += 0x18;

1164 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1167 
bô°©us
 = 
SET
;

1172 
bô°©us
 = 
RESET
;

1176  
bô°©us
;

1177 
	}
}

1212 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1214 
uöt32_t
 
Êagpos
 = 0;

1216 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1217 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1219 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1221 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1222 
	}
}

1246 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1253 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1256 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1259 
I2C_IT
 &
FLAG_Mask
;

1262 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1265 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1307 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1309 
uöt32_t
 
Êagpos
 = 0;

1311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1312 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1314 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1316 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1317 
	}
}

	@stm32f10x_i2c.h

24 #i‚de‡
__STM32F10x_I2C_H


25 
	#__STM32F10x_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
I2C_ClockS≥ed
;

55 
uöt16_t
 
I2C_Mode
;

58 
uöt16_t
 
I2C_DutyCy˛e
;

61 
uöt16_t
 
I2C_OwnAddªss1
;

64 
uöt16_t
 
I2C_Ack
;

67 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

69 }
	tI2C_InôTy≥Def
;

80 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

81 ((
PERIPH
Ë=
I2C2
))

	)

86 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

87 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

88 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

89 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

91 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

100 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

101 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

102 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

103 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

112 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

113 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

114 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

115 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

124 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

125 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

126 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

127 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

136 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

137 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

138 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

139 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

148 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

149 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

150 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

151 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

152 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

153 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

154 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

155 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

156 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

157 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

165 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

174 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

175 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

176 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

177 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

186 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

187 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

188 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

189 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

198 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

199 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

200 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

201 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

210 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

211 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

212 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

213 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

222 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

223 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

224 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

225 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

226 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

227 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

228 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

229 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

230 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

231 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

232 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

233 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

234 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

235 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

237 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

239 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

240 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

241 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

242 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

243 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

244 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

245 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

258 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

259 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

260 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

261 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

262 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

263 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

264 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

270 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

271 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

272 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

273 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

274 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

275 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

276 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

277 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

278 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

279 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

280 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

281 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

282 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

283 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

285 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

287 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

288 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

289 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

290 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

292 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

293 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

295 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

296 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

297 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

319 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

347 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

348 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

350 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

383 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

387 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

389 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

424 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

425 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

428 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

429 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

432 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

463 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

465 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

469 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

472 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

476 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

477 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

481 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

482 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

483 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

485 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

486 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

487 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

488 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

489 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

490 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

491 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

492 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

495 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

504 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

513 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

534 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

535 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

537 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

540 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

542 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

544 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

547 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

548 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

549 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

550 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

551 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

553 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

554 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

556 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

558 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

645 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

651 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

657 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

663 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

664 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

665 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

667 #ifde‡
__˝lu•lus


	@stm32f10x_iwdg.c

23 
	~"°m32f10x_iwdg.h
"

49 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

50 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

92 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

95 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

96 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

97 
	}
}

112 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

115 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

116 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

117 
	}
}

125 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

128 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

129 
IWDG
->
RLR
 = 
Rñﬂd
;

130 
	}
}

138 
	$IWDG_RñﬂdCou¡î
()

140 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

141 
	}
}

148 
	$IWDG_E«bÀ
()

150 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

151 
	}
}

161 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

163 
FœgSètus
 
bô°©us
 = 
RESET
;

165 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

166 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

168 
bô°©us
 = 
SET
;

172 
bô°©us
 = 
RESET
;

175  
bô°©us
;

176 
	}
}

	@stm32f10x_iwdg.h

24 #i‚de‡
__STM32F10x_IWDG_H


25 
	#__STM32F10x_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

70 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

71 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

72 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

73 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

74 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

75 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

76 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

77 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

92 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

93 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

94 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

95 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

116 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

117 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

118 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

119 
IWDG_RñﬂdCou¡î
();

120 
IWDG_E«bÀ
();

121 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

123 #ifde‡
__˝lu•lus


	@stm32f10x_pwr.c

23 
	~"°m32f10x_pwr.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

54 
	#DBP_BôNumbî
 0x08

	)

55 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

58 
	#PVDE_BôNumbî
 0x04

	)

59 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

65 
	#EWUP_BôNumbî
 0x08

	)

66 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

71 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

112 
	$PWR_DeInô
()

114 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

115 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

116 
	}
}

124 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

128 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

129 
	}
}

137 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

142 
	}
}

158 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

160 
uöt32_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

163 
tm¥eg
 = 
PWR
->
CR
;

165 
tm¥eg
 &
CR_PLS_MASK
;

167 
tm¥eg
 |
PWR_PVDLevñ
;

169 
PWR
->
CR
 = 
tm¥eg
;

170 
	}
}

178 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

182 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

183 
	}
}

197 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

199 
uöt32_t
 
tm¥eg
 = 0;

201 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

202 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

205 
tm¥eg
 = 
PWR
->
CR
;

207 
tm¥eg
 &
CR_DS_MASK
;

209 
tm¥eg
 |
PWR_Reguœt‹
;

211 
PWR
->
CR
 = 
tm¥eg
;

213 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

216 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

219 
	`__WFI
();

224 
	`__WFE
();

228 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP
);

229 
	}
}

236 
	$PWR_E¡îSTANDBYMode
()

239 
PWR
->
CR
 |
PWR_CR_CWUF
;

241 
PWR
->
CR
 |
PWR_CR_PDDS
;

243 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

245 #i‡
	`deföed
 ( 
__CC_ARM
 )

246 
	`__f‹˚_°‹es
();

249 
	`__WFI
();

250 
	}
}

261 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

263 
FœgSètus
 
bô°©us
 = 
RESET
;

265 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

267 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

269 
bô°©us
 = 
SET
;

273 
bô°©us
 = 
RESET
;

276  
bô°©us
;

277 
	}
}

287 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

290 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

292 
PWR
->
CR
 |
PWR_FLAG
 << 2;

293 
	}
}

	@stm32f10x_pwr.h

24 #i‚de‡
__STM32F10x_PWR_H


25 
	#__STM32F10x_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

59 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

60 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

61 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

62 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

63 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

64 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

65 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

66 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

	)

78 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

79 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

80 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

81 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

90 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

91 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

92 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

102 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

103 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

104 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

105 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

106 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

	)

108 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

129 
PWR_DeInô
();

130 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

132 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

133 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

134 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

135 
PWR_E¡îSTANDBYMode
();

136 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

137 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

139 #ifde‡
__˝lu•lus


	@stm32f10x_rcc.c

23 
	~"°m32f10x_rcc.h
"

47 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

53 
	#HSION_BôNumbî
 0x00

	)

54 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

57 
	#PLLON_BôNumbî
 0x18

	)

58 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

60 #ifde‡
STM32F10X_CL


62 
	#PLL2ON_BôNumbî
 0x1A

	)

63 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

66 
	#PLL3ON_BôNumbî
 0x1C

	)

67 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

71 
	#CSSON_BôNumbî
 0x13

	)

72 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

77 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

79 #i‚de‡
STM32F10X_CL


80 
	#USBPRE_BôNumbî
 0x16

	)

81 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

83 
	#OTGFSPRE_BôNumbî
 0x16

	)

84 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

90 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

91 
	#RTCEN_BôNumbî
 0x0F

	)

92 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

95 
	#BDRST_BôNumbî
 0x10

	)

96 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

101 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

102 
	#LSION_BôNumbî
 0x00

	)

103 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

105 #ifde‡
STM32F10X_CL


109 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

110 
	#I2S2SRC_BôNumbî
 0x11

	)

111 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

114 
	#I2S3SRC_BôNumbî
 0x12

	)

115 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

121 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

122 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

123 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

124 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

125 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

128 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

129 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

131 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

134 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

135 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

136 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

137 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

138 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

139 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

140 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

141 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

142 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

143 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

144 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

145 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

146 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

149 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

151 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

153 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

154 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

156 #ifde‡
STM32F10X_CL


157 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

158 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

159 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

163 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

166 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

169 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

172 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

175 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

193 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

194 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

217 
	$RCC_DeInô
()

220 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

223 #i‚de‡
STM32F10X_CL


224 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

226 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

230 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

233 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

236 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

238 #ifde‡
STM32F10X_CL


240 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

243 
RCC
->
CIR
 = 0x00FF0000;

246 
RCC
->
CFGR2
 = 0x00000000;

247 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

249 
RCC
->
CIR
 = 0x009F0000;

252 
RCC
->
CFGR2
 = 0x00000000;

255 
RCC
->
CIR
 = 0x009F0000;

258 
	}
}

270 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

273 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

276 
RCC
->
CR
 &
CR_HSEON_Re£t
;

278 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

280 
RCC_HSE
)

282 
RCC_HSE_ON
:

284 
RCC
->
CR
 |
CR_HSEON_Së
;

287 
RCC_HSE_By∑ss
:

289 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

295 
	}
}

304 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

306 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

307 
Eº‹Sètus
 
°©us
 = 
ERROR
;

308 
FœgSètus
 
HSESètus
 = 
RESET
;

313 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

314 
SèπUpCou¡î
++;

315 } (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
HSESètus
 =
RESET
));

317 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

319 
°©us
 = 
SUCCESS
;

323 
°©us
 = 
ERROR
;

325  (
°©us
);

326 
	}
}

334 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

336 
uöt32_t
 
tm¥eg
 = 0;

338 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

339 
tm¥eg
 = 
RCC
->
CR
;

341 
tm¥eg
 &
CR_HSITRIM_Mask
;

343 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

345 
RCC
->
CR
 = 
tm¥eg
;

346 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

359 
	}
}

378 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

380 
uöt32_t
 
tm¥eg
 = 0;

383 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

384 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

386 
tm¥eg
 = 
RCC
->
CFGR
;

388 
tm¥eg
 &
CFGR_PLL_Mask
;

390 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

392 
RCC
->
CFGR
 = 
tm¥eg
;

393 
	}
}

401 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

404 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

406 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

407 
	}
}

409 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

426 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

428 
uöt32_t
 
tm¥eg
 = 0;

431 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

432 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

434 
tm¥eg
 = 
RCC
->
CFGR2
;

436 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

438 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

440 
RCC
->
CFGR2
 = 
tm¥eg
;

441 
	}
}

444 #ifde‡
STM32F10X_CL


454 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

456 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

461 
tm¥eg
 = 
RCC
->
CFGR2
;

463 
tm¥eg
 &~
CFGR2_PREDIV2
;

465 
tm¥eg
 |
RCC_PREDIV2_Div
;

467 
RCC
->
CFGR2
 = 
tm¥eg
;

468 
	}
}

479 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

481 
uöt32_t
 
tm¥eg
 = 0;

484 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

486 
tm¥eg
 = 
RCC
->
CFGR2
;

488 
tm¥eg
 &~
CFGR2_PLL2MUL
;

490 
tm¥eg
 |
RCC_PLL2Mul
;

492 
RCC
->
CFGR2
 = 
tm¥eg
;

493 
	}
}

505 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

508 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

510 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

511 
	}
}

523 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

525 
uöt32_t
 
tm¥eg
 = 0;

528 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

530 
tm¥eg
 = 
RCC
->
CFGR2
;

532 
tm¥eg
 &~
CFGR2_PLL3MUL
;

534 
tm¥eg
 |
RCC_PLL3Mul
;

536 
RCC
->
CFGR2
 = 
tm¥eg
;

537 
	}
}

546 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

551 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

552 
	}
}

564 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

566 
uöt32_t
 
tm¥eg
 = 0;

568 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

569 
tm¥eg
 = 
RCC
->
CFGR
;

571 
tm¥eg
 &
CFGR_SW_Mask
;

573 
tm¥eg
 |
RCC_SYSCLKSour˚
;

575 
RCC
->
CFGR
 = 
tm¥eg
;

576 
	}
}

587 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

589  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

590 
	}
}

608 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

610 
uöt32_t
 
tm¥eg
 = 0;

612 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

613 
tm¥eg
 = 
RCC
->
CFGR
;

615 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

617 
tm¥eg
 |
RCC_SYSCLK
;

619 
RCC
->
CFGR
 = 
tm¥eg
;

620 
	}
}

634 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

636 
uöt32_t
 
tm¥eg
 = 0;

638 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

639 
tm¥eg
 = 
RCC
->
CFGR
;

641 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

643 
tm¥eg
 |
RCC_HCLK
;

645 
RCC
->
CFGR
 = 
tm¥eg
;

646 
	}
}

660 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

662 
uöt32_t
 
tm¥eg
 = 0;

664 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

665 
tm¥eg
 = 
RCC
->
CFGR
;

667 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

669 
tm¥eg
 |
RCC_HCLK
 << 3;

671 
RCC
->
CFGR
 = 
tm¥eg
;

672 
	}
}

700 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

703 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

704 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

705 i‡(
NewSèã
 !
DISABLE
)

708 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

713 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

715 
	}
}

717 #i‚de‡
STM32F10X_CL


728 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

731 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

733 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

734 
	}
}

746 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

749 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

751 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

752 
	}
}

766 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

768 
uöt32_t
 
tm¥eg
 = 0;

770 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

771 
tm¥eg
 = 
RCC
->
CFGR
;

773 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

775 
tm¥eg
 |
RCC_PCLK2
;

777 
RCC
->
CFGR
 = 
tm¥eg
;

778 
	}
}

780 #ifde‡
STM32F10X_CL


792 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

795 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

797 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

798 
	}
}

811 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

814 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

816 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

817 
	}
}

829 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

832 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

835 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

837 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

839 
RCC_LSE
)

841 
RCC_LSE_ON
:

843 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

846 
RCC_LSE_By∑ss
:

848 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

854 
	}
}

862 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

866 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

867 
	}
}

879 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

882 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

884 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

885 
	}
}

893 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

896 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

897 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

898 
	}
}

908 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

910 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

912 #ifde‡ 
STM32F10X_CL


913 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

916 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

917 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

921 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

923 
tmp
)

926 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

929 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

934 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

935 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

937 #i‚de‡
STM32F10X_CL


938 
∂lmuŒ
 = (Öllmull >> 18) + 2;

940 i‡(
∂lsour˚
 == 0x00)

942 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

946 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

947 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

952 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

954 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

958 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
 * 
∂lmuŒ
;

963 
∂lmuŒ
 =Öllmull >> 18;

965 i‡(
∂lmuŒ
 != 0x0D)

967 
∂lmuŒ
 += 2;

971 
∂lmuŒ
 = 13 / 2;

974 i‡(
∂lsour˚
 == 0x00)

976 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

982 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

983 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

985 i‡(
¥ediv1sour˚
 == 0)

987 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

993 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

994 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

995 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1008 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1009 
tmp
 =Åmp >> 4;

1010 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1012 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1014 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1015 
tmp
 =Åmp >> 8;

1016 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1018 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1020 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1021 
tmp
 =Åmp >> 11;

1022 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1024 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1026 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1027 
tmp
 =Åmp >> 14;

1028 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1030 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1031 
	}
}

1064 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1067 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1068 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1070 i‡(
NewSèã
 !
DISABLE
)

1072 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1076 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1078 
	}
}

1095 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1098 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1099 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1100 i‡(
NewSèã
 !
DISABLE
)

1102 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1106 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1108 
	}
}

1126 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1129 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 i‡(
NewSèã
 !
DISABLE
)

1133 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1137 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1139 
	}
}

1141 #ifde‡
STM32F10X_CL


1153 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1156 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1157 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1159 i‡(
NewSèã
 !
DISABLE
)

1161 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1165 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1167 
	}
}

1185 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1188 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1190 i‡(
NewSèã
 !
DISABLE
)

1192 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1196 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1198 
	}
}

1216 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1219 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1220 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1221 i‡(
NewSèã
 !
DISABLE
)

1223 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1227 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1229 
	}
}

1237 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1242 
	}
}

1250 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1253 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1254 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1255 
	}
}

1282 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1285 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1288 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1289 
	}
}

1326 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1328 
uöt32_t
 
tmp
 = 0;

1329 
uöt32_t
 
°©u§eg
 = 0;

1330 
FœgSètus
 
bô°©us
 = 
RESET
;

1332 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1335 
tmp
 = 
RCC_FLAG
 >> 5;

1336 i‡(
tmp
 == 1)

1338 
°©u§eg
 = 
RCC
->
CR
;

1340 i‡(
tmp
 == 2)

1342 
°©u§eg
 = 
RCC
->
BDCR
;

1346 
°©u§eg
 = 
RCC
->
CSR
;

1350 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1351 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1353 
bô°©us
 = 
SET
;

1357 
bô°©us
 = 
RESET
;

1361  
bô°©us
;

1362 
	}
}

1371 
	$RCC_CÀ¨Fœg
()

1374 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1375 
	}
}

1402 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1404 
ITSètus
 
bô°©us
 = 
RESET
;

1406 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1409 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1411 
bô°©us
 = 
SET
;

1415 
bô°©us
 = 
RESET
;

1419  
bô°©us
;

1420 
	}
}

1448 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1451 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1455 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1456 
	}
}

	@stm32f10x_rcc.h

24 #i‚de‡
__STM32F10x_RCC_H


25 
	#__STM32F10x_RCC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SYSCLK_Fªquícy
;

49 
uöt32_t
 
HCLK_Fªquícy
;

50 
uöt32_t
 
PCLK1_Fªquícy
;

51 
uöt32_t
 
PCLK2_Fªquícy
;

52 
uöt32_t
 
ADCCLK_Fªquícy
;

53 }
	tRCC_ClocksTy≥Def
;

67 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

68 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

69 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

70 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

71 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

81 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

83 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_CL
)

84 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

85 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

86 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

88 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

	)

90 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

91 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

92 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

	)

102 #i‚de‡
STM32F10X_CL


103 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

105 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

106 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

107 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

108 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

109 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

110 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

111 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

112 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

113 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

114 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

115 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

116 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

117 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

118 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
) || \

119 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

120 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

121 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

122 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

123 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

124 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

125 ((
MUL
Ë=
RCC_PLLMul_16
))

	)

128 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

129 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

130 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

131 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

132 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

133 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

134 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

136 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

137 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

138 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

139 ((
MUL
Ë=
RCC_PLLMul_6_5
))

	)

148 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

149 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

150 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

151 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

152 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

153 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

154 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

155 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

156 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

157 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

158 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

159 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

160 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

161 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

162 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

163 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

164 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

166 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

173 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

	)

183 #ifde‡
STM32F10X_CL


185 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

186 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

188 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
) || \

189 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

	)

190 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

192 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

194 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

200 #ifde‡
STM32F10X_CL


205 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

207 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

208 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

209 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

210 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

211 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

212 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

213 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

214 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

215 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

216 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

217 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

218 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

219 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

220 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

222 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
) || \

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

229 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

	)

239 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

240 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

241 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

242 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

243 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

244 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

245 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

246 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

247 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

249 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
) || \

250 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

253 ((
MUL
Ë=
RCC_PLL2Mul_20
))

	)

263 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

264 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

265 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

266 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

267 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

268 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

269 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

270 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

271 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

273 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
) || \

274 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

277 ((
MUL
Ë=
RCC_PLL3Mul_20
))

	)

289 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

290 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

291 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

294 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

303 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

304 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

305 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

306 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

307 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

308 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

309 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

310 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

311 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

312 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

313 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

316 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

325 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

326 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

327 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

328 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

329 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

330 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

331 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

332 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

341 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

342 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

343 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

344 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

345 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

346 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

348 #i‚de‡
STM32F10X_CL


349 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

350 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

351 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

352 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

	)

353 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

355 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

356 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

357 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

358 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

359 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

360 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

361 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

	)

362 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

370 #i‚de‡
STM32F10X_CL


375 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

376 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

378 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
) || \

379 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

	)

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

388 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

390 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
) || \

391 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

	)

398 #ifde‡
STM32F10X_CL


402 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

403 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

405 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
) || \

406 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

	)

414 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

415 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

417 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
) || \

418 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

	)

429 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

430 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

431 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

432 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

433 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
) || \

434 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

	)

443 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

444 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

445 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

446 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

447 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

456 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

457 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

458 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

459 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

461 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

	)

470 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

471 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

472 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

473 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

474 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

476 #i‚de‡
STM32F10X_CL


477 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

478 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

479 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

481 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

484 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

486 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

487 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

497 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

498 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

499 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

500 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

501 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

502 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

503 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

504 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

505 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

506 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

507 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

508 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

509 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

510 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

511 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

512 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

513 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

514 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

515 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

516 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

517 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

519 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

528 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

529 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

530 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

531 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

532 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

533 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

534 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

535 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

536 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

537 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

538 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

539 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

540 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

541 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

542 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

543 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

544 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

545 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

546 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

547 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

548 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

549 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

550 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

551 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

552 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

554 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

564 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

565 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

566 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

567 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

568 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

570 #i‚de‡
STM32F10X_CL


571 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

572 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

573 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

	)

575 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

576 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

577 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

578 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

580 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

581 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

582 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

584 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

	)

595 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

596 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

597 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

598 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

599 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

600 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

601 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

602 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

603 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

604 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

605 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

607 #i‚de‡
STM32F10X_CL


608 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

609 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

610 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

612 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

613 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

615 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

616 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

617 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

618 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

620 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

622 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

623 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

626 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

647 
RCC_DeInô
();

648 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

649 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

650 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

651 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

652 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

653 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

655 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

656 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

659 #ifde‡ 
STM32F10X_CL


660 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

661 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

662 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

663 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

664 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

667 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

668 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

669 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

670 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

672 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

674 #i‚de‡
STM32F10X_CL


675 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

677 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

680 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

682 #ifde‡
STM32F10X_CL


683 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

684 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

687 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

688 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

690 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

692 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

696 #ifde‡
STM32F10X_CL


697 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

704 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

705 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

706 
RCC_CÀ¨Fœg
();

707 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

708 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

710 #ifde‡
__˝lu•lus


	@stm32f10x_rtc.c

23 
	~"°m32f10x_πc.h
"

44 
	#RTC_LSB_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

45 
	#PRLH_MSB_MASK
 ((
uöt32_t
)0x000F0000Ë

	)

90 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

93 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

94 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

96 i‡(
NewSèã
 !
DISABLE
)

98 
RTC
->
CRH
 |
RTC_IT
;

102 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

104 
	}
}

111 
	$RTC_E¡îC⁄figMode
()

114 
RTC
->
CRL
 |
RTC_CRL_CNF
;

115 
	}
}

122 
	$RTC_ExôC⁄figMode
()

125 
RTC
->
CRL
 &(
uöt16_t
)~((uöt16_t)
RTC_CRL_CNF
);

126 
	}
}

133 
uöt32_t
 
	$RTC_GëCou¡î
()

135 
uöt16_t
 
tmp
 = 0;

136 
tmp
 = 
RTC
->
CNTL
;

137  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

138 
	}
}

145 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

147 
	`RTC_E¡îC⁄figMode
();

149 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

151 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_MASK
);

152 
	`RTC_ExôC⁄figMode
();

153 
	}
}

160 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

163 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

165 
	`RTC_E¡îC⁄figMode
();

167 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_MASK
) >> 16;

169 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_MASK
);

170 
	`RTC_ExôC⁄figMode
();

171 
	}
}

178 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

180 
	`RTC_E¡îC⁄figMode
();

182 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

184 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_MASK
);

185 
	`RTC_ExôC⁄figMode
();

186 
	}
}

193 
uöt32_t
 
	$RTC_GëDividî
()

195 
uöt32_t
 
tmp
 = 0x00;

196 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

197 
tmp
 |
RTC
->
DIVL
;

198  
tmp
;

199 
	}
}

207 
	$RTC_WaôF‹La°Task
()

210 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

213 
	}
}

223 
	$RTC_WaôF‹Synchro
()

226 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

228 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

231 
	}
}

244 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

246 
FœgSètus
 
bô°©us
 = 
RESET
;

249 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

251 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

253 
bô°©us
 = 
SET
;

257 
bô°©us
 = 
RESET
;

259  
bô°©us
;

260 
	}
}

273 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

276 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

279 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

280 
	}
}

291 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

293 
ITSètus
 
bô°©us
 = 
RESET
;

295 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

297 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

298 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

300 
bô°©us
 = 
SET
;

304 
bô°©us
 = 
RESET
;

306  
bô°©us
;

307 
	}
}

318 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

321 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

324 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

325 
	}
}

	@stm32f10x_rtc.h

24 #i‚de‡
__STM32F10x_RTC_H


25 
	#__STM32F10x_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

59 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

60 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

61 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

62 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
) || \

63 ((
IT
Ë=
RTC_IT_SEC
))

	)

72 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

73 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

74 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

75 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

76 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

77 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

78 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
) || \

79 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

80 ((
FLAG
Ë=
RTC_FLAG_SEC
))

	)

81 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

103 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

104 
RTC_E¡îC⁄figMode
();

105 
RTC_ExôC⁄figMode
();

106 
uöt32_t
 
RTC_GëCou¡î
();

107 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

108 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

109 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

110 
uöt32_t
 
RTC_GëDividî
();

111 
RTC_WaôF‹La°Task
();

112 
RTC_WaôF‹Synchro
();

113 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

114 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

115 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

116 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

118 #ifde‡
__˝lu•lus


	@stm32f10x_sdio.c

23 
	~"°m32f10x_sdio.h
"

24 
	~"°m32f10x_rcc.h
"

40 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

45 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

46 
	#CLKEN_BôNumbî
 0x08

	)

47 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

52 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

53 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

54 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

57 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

58 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

61 
	#NIEN_BôNumbî
 0x0D

	)

62 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

65 
	#ATACMD_BôNumbî
 0x0E

	)

66 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

71 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

72 
	#DMAEN_BôNumbî
 0x03

	)

73 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

76 
	#RWSTART_BôNumbî
 0x08

	)

77 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

80 
	#RWSTOP_BôNumbî
 0x09

	)

81 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

84 
	#RWMOD_BôNumbî
 0x0A

	)

85 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

88 
	#SDIOEN_BôNumbî
 0x0B

	)

89 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

96 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

101 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

106 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

111 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

114 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

161 
	$SDIO_DeInô
()

163 
SDIO
->
POWER
 = 0x00000000;

164 
SDIO
->
CLKCR
 = 0x00000000;

165 
SDIO
->
ARG
 = 0x00000000;

166 
SDIO
->
CMD
 = 0x00000000;

167 
SDIO
->
DTIMER
 = 0x00000000;

168 
SDIO
->
DLEN
 = 0x00000000;

169 
SDIO
->
DCTRL
 = 0x00000000;

170 
SDIO
->
ICR
 = 0x00C007FF;

171 
SDIO
->
MASK
 = 0x00000000;

172 
	}
}

181 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

183 
uöt32_t
 
tm¥eg
 = 0;

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

188 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

189 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

190 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

194 
tm¥eg
 = 
SDIO
->
CLKCR
;

197 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

205 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

207 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

210 
SDIO
->
CLKCR
 = 
tm¥eg
;

211 
	}
}

219 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

222 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

223 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

224 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

226 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

227 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

228 
	}
}

235 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

240 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

241 
	}
}

251 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

254 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

256 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

257 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

258 
	}
}

269 
uöt32_t
 
	$SDIO_GëPowîSèã
()

271  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

272 
	}
}

307 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

310 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

311 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 i‡(
NewSèã
 !
DISABLE
)

316 
SDIO
->
MASK
 |
SDIO_IT
;

321 
SDIO
->
MASK
 &~
SDIO_IT
;

323 
	}
}

331 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

334 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

336 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

337 
	}
}

346 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

348 
uöt32_t
 
tm¥eg
 = 0;

351 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

352 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

353 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

354 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

358 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

362 
tm¥eg
 = 
SDIO
->
CMD
;

364 
tm¥eg
 &
CMD_CLEAR_MASK
;

369 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


370 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

373 
SDIO
->
CMD
 = 
tm¥eg
;

374 
	}
}

382 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

385 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

387 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

389 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

390 
	}
}

397 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

399  (
uöt8_t
)(
SDIO
->
RESPCMD
);

400 
	}
}

412 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

414 
__IO
 
uöt32_t
 
tmp
 = 0;

417 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

419 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

421  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

422 
	}
}

431 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

433 
uöt32_t
 
tm¥eg
 = 0;

436 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

437 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

439 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

440 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

444 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

448 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

452 
tm¥eg
 = 
SDIO
->
DCTRL
;

454 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

459 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


460 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

463 
SDIO
->
DCTRL
 = 
tm¥eg
;

464 
	}
}

472 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

477 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

479 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

480 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

481 
	}
}

488 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

490  
SDIO
->
DCOUNT
;

491 
	}
}

498 
uöt32_t
 
	$SDIO_RódD©a
()

500  
SDIO
->
FIFO
;

501 
	}
}

508 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

510 
SDIO
->
FIFO
 = 
D©a
;

511 
	}
}

518 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

520  
SDIO
->
FIFOCNT
;

521 
	}
}

529 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

535 
	}
}

543 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

546 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

548 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

549 
	}
}

559 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

562 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

564 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

565 
	}
}

573 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

576 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

578 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

579 
	}
}

587 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

593 
	}
}

601 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

604 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

606 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

607 
	}
}

614 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

617 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

620 
	}
}

627 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

630 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

632 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

633 
	}
}

666 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

668 
FœgSètus
 
bô°©us
 = 
RESET
;

671 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

673 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

675 
bô°©us
 = 
SET
;

679 
bô°©us
 = 
RESET
;

681  
bô°©us
;

682 
	}
}

704 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

707 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

709 
SDIO
->
ICR
 = 
SDIO_FLAG
;

710 
	}
}

743 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

745 
ITSètus
 
bô°©us
 = 
RESET
;

748 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

749 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

751 
bô°©us
 = 
SET
;

755 
bô°©us
 = 
RESET
;

757  
bô°©us
;

758 
	}
}

779 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

782 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

784 
SDIO
->
ICR
 = 
SDIO_IT
;

785 
	}
}

	@stm32f10x_sdio.h

24 #i‚de‡
__STM32F10x_SDIO_H


25 
	#__STM32F10x_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SDIO_ClockEdge
;

51 
uöt32_t
 
SDIO_ClockBy∑ss
;

55 
uöt32_t
 
SDIO_ClockPowîSave
;

59 
uöt32_t
 
SDIO_BusWide
;

62 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

65 
uöt8_t
 
SDIO_ClockDiv
;

68 } 
	tSDIO_InôTy≥Def
;

72 
uöt32_t
 
SDIO_Argumít
;

77 
uöt32_t
 
SDIO_CmdIndex
;

79 
uöt32_t
 
SDIO_Re•⁄£
;

82 
uöt32_t
 
SDIO_Waô
;

85 
uöt32_t
 
SDIO_CPSM
;

88 } 
	tSDIO_CmdInôTy≥Def
;

92 
uöt32_t
 
SDIO_D©aTimeOut
;

94 
uöt32_t
 
SDIO_D©aLígth
;

96 
uöt32_t
 
SDIO_D©aBlockSize
;

99 
uöt32_t
 
SDIO_Tøns„rDú
;

103 
uöt32_t
 
SDIO_Tøns„rMode
;

106 
uöt32_t
 
SDIO_DPSM
;

109 } 
	tSDIO_D©aInôTy≥Def
;

123 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

124 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

125 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

126 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

135 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

136 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

137 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

138 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

147 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

148 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

149 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

150 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

159 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

160 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

161 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

162 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

163 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

174 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

175 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

176 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

185 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

186 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

187 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

197 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

198 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

199 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

200 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

201 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

202 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

203 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

204 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

205 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

206 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

207 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

208 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

209 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

210 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

211 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

212 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

213 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

214 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

215 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

216 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

217 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

218 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

219 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

220 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

221 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

230 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

239 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

240 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

241 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

242 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

244 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

253 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

254 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

255 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

256 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

257 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

266 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

267 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

268 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

277 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

278 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

279 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

280 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

281 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

282 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

291 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

300 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

301 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

302 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

303 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

304 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

305 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

306 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

307 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

308 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

309 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

310 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

311 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

312 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

313 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

314 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

315 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

338 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

339 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

340 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

341 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

350 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

351 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

352 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

353 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

362 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

363 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

364 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

373 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

374 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

375 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

376 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

377 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

378 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

379 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

380 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

381 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

382 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

383 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

384 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

385 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

386 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

387 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

388 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

389 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

390 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

391 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

392 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

393 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

394 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

395 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

396 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

397 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

422 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

424 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

426 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

428 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

429 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

430 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

431 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

432 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

433 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

434 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

435 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

436 ((
IT
Ë=
SDIO_IT_TXACT
) || \

437 ((
IT
Ë=
SDIO_IT_RXACT
) || \

438 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

439 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

440 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

442 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

444 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

446 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

447 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

449 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

459 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

460 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

461 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

462 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

483 
SDIO_DeInô
();

484 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

486 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

487 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

488 
uöt32_t
 
SDIO_GëPowîSèã
();

489 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

492 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

493 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

494 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

495 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

497 
uöt32_t
 
SDIO_GëD©aCou¡î
();

498 
uöt32_t
 
SDIO_RódD©a
();

499 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

500 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

510 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

511 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

512 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

514 #ifde‡
__˝lu•lus


	@stm32f10x_spi.c

23 
	~"°m32f10x_•i.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

50 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

53 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

54 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

57 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

60 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

61 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

64 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

65 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

69 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

72 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

73 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

76 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

77 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

78 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

79 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

119 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

122 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

124 i‡(
SPIx
 =
SPI1
)

127 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

131 i‡(
SPIx
 =
SPI2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

140 i‡(
SPIx
 =
SPI3
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

148 
	}
}

158 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

160 
uöt16_t
 
tm¥eg
 = 0;

163 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

166 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

167 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

168 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

170 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

171 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

172 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

173 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

174 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

178 
tm¥eg
 = 
SPIx
->
CR1
;

180 
tm¥eg
 &
CR1_CLEAR_Mask
;

189 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

190 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

191 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

192 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

194 
SPIx
->
CR1
 = 
tm¥eg
;

197 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

201 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

202 
	}
}

219 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

221 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

222 
uöt32_t
 
tmp
 = 0;

223 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

224 
uöt32_t
 
sour˚˛ock
 = 0;

227 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

228 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

229 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

230 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

231 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

232 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

233 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

237 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

238 
SPIx
->
I2SPR
 = 0x0002;

241 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

244 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

246 
i2sodd
 = (
uöt16_t
)0;

247 
i2sdiv
 = (
uöt16_t
)2;

253 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

256 
∑ckëÀngth
 = 1;

261 
∑ckëÀngth
 = 2;

265 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

268 
tmp
 = 
I2S2_CLOCK_SRC
;

273 
tmp
 = 
I2S3_CLOCK_SRC
;

278 #ifde‡
STM32F10X_CL


279 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

282 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

285 if((
tmp
 > 5) && (tmp < 15))

288 
tmp
 += 2;

292 i‡(
tmp
 == 15)

295 
tmp
 = 20;

299 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

302 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

307 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

310 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

314 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

317 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

321 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

324 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

329 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

333 
tmp
 =Åmp / 10;

336 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

339 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

342 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

346 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

349 
i2sdiv
 = 2;

350 
i2sodd
 = 0;

354 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

357 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

358 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

359 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

362 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

363 
	}
}

370 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

374 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

376 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

378 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

380 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

382 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

384 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

386 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

388 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

390 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

391 
	}
}

398 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

402 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

405 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

408 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

411 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

414 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

417 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

418 
	}
}

427 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

432 i‡(
NewSèã
 !
DISABLE
)

435 
SPIx
->
CR1
 |
CR1_SPE_Së
;

440 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

442 
	}
}

451 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

456 i‡(
NewSèã
 !
DISABLE
)

459 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

464 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

466 
	}
}

482 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

486 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

491 
ôpos
 = 
SPI_I2S_IT
 >> 4;

494 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

496 i‡(
NewSèã
 !
DISABLE
)

499 
SPIx
->
CR2
 |
ômask
;

504 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

506 
	}
}

521 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

524 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

525 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

526 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

527 i‡(
NewSèã
 !
DISABLE
)

530 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

535 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

537 
	}
}

547 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

550 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

553 
SPIx
->
DR
 = 
D©a
;

554 
	}
}

563 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

566 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

569  
SPIx
->
DR
;

570 
	}
}

581 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

584 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

585 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

586 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

589 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

594 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

596 
	}
}

605 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

608 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 i‡(
NewSèã
 !
DISABLE
)

613 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

618 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

620 
	}
}

631 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

634 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

635 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

637 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

639 
SPIx
->
CR1
 |
SPI_D©aSize
;

640 
	}
}

647 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

650 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

653 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

654 
	}
}

663 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 i‡(
NewSèã
 !
DISABLE
)

671 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

676 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

678 
	}
}

689 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

691 
uöt16_t
 
¸¸eg
 = 0;

693 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

694 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

695 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

698 
¸¸eg
 = 
SPIx
->
TXCRCR
;

703 
¸¸eg
 = 
SPIx
->
RXCRCR
;

706  
¸¸eg
;

707 
	}
}

714 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

717 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

720  
SPIx
->
CRCPR
;

721 
	}
}

732 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

735 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

736 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

737 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

740 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

745 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

747 
	}
}

766 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

768 
FœgSètus
 
bô°©us
 = 
RESET
;

770 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

771 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

773 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

776 
bô°©us
 = 
SET
;

781 
bô°©us
 = 
RESET
;

784  
bô°©us
;

785 
	}
}

804 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

807 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

808 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

811 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

812 
	}
}

829 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

831 
ITSètus
 
bô°©us
 = 
RESET
;

832 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

835 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

836 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

839 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

842 
ômask
 = 
SPI_I2S_IT
 >> 4;

845 
ômask
 = 0x01 << itmask;

848 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

851 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

854 
bô°©us
 = 
SET
;

859 
bô°©us
 = 
RESET
;

862  
bô°©us
;

863 
	}
}

883 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

885 
uöt16_t
 
ôpos
 = 0;

887 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

888 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

891 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

894 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

895 
	}
}

	@stm32f10x_spi.h

24 #i‚de‡
__STM32F10x_SPI_H


25 
	#__STM32F10x_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
SPI_Dúe˘i⁄
;

55 
uöt16_t
 
SPI_Mode
;

58 
uöt16_t
 
SPI_D©aSize
;

61 
uöt16_t
 
SPI_CPOL
;

64 
uöt16_t
 
SPI_CPHA
;

67 
uöt16_t
 
SPI_NSS
;

71 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

77 
uöt16_t
 
SPI_Fú°Bô
;

80 
uöt16_t
 
SPI_CRCPﬁynomül
;

81 }
	tSPI_InôTy≥Def
;

90 
uöt16_t
 
I2S_Mode
;

93 
uöt16_t
 
I2S_Sènd¨d
;

96 
uöt16_t
 
I2S_D©aF‹m©
;

99 
uöt16_t
 
I2S_MCLKOuçut
;

102 
uöt32_t
 
I2S_AudioFªq
;

105 
uöt16_t
 
I2S_CPOL
;

107 }
	tI2S_InôTy≥Def
;

117 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
))

	)

121 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

122 ((
PERIPH
Ë=
SPI3
))

	)

128 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

129 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

131 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

132 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

135 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

144 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

145 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

146 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

147 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

156 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

157 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

158 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

159 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

168 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

169 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

170 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

171 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

180 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

181 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

182 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

183 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

192 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

193 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

194 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

195 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

204 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

205 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

206 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

207 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

208 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

209 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

210 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

211 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

212 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

219 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

228 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

229 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

230 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

231 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

240 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

241 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

242 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

243 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

244 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

245 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

247 ((
MODE
Ë=
I2S_Mode_Ma°îRx
Ë)

	)

256 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

257 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

258 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

259 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

260 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

261 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

265 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

274 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

275 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

276 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

277 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

278 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

281 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

290 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

291 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

292 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

293 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

302 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

303 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

304 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

305 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

306 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

307 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

308 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

309 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

310 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

311 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

313 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

314 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

324 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

325 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

326 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

327 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

336 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

337 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

338 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

347 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

348 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

349 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

350 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

359 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

360 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

361 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

370 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

371 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

372 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

373 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

382 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

383 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

384 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

385 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

386 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

387 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

388 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

389 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

390 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

391 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

392 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

393 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
) || \

394 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

395 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

	)

404 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

405 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

406 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

407 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

408 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

409 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

410 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

411 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

412 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

413 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

414 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

415 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

416 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

	)

425 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

446 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

447 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

448 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

449 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

450 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

451 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

456 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

457 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

458 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

460 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

461 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

463 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

465 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

466 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

467 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

468 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

470 #ifde‡
__˝lu•lus


	@stm32f10x_tim.c

23 
	~"°m32f10x_tim.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

49 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

50 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

51 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

77 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

78 
uöt16_t
 
TIM_ICFûãr
);

79 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

80 
uöt16_t
 
TIM_ICFûãr
);

81 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

82 
uöt16_t
 
TIM_ICFûãr
);

83 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

84 
uöt16_t
 
TIM_ICFûãr
);

122 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

125 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

127 i‡(
TIMx
 =
TIM1
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

132 i‡(
TIMx
 =
TIM2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

137 i‡(
TIMx
 =
TIM3
)

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

142 i‡(
TIMx
 =
TIM4
)

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

147 i‡(
TIMx
 =
TIM5
)

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

152 i‡(
TIMx
 =
TIM6
)

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

157 i‡(
TIMx
 =
TIM7
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

162 i‡(
TIMx
 =
TIM8
)

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

165 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

167 i‡(
TIMx
 =
TIM9
)

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

170 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

172 i‡(
TIMx
 =
TIM10
)

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

175 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

177 i‡(
TIMx
 =
TIM11
)

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

180 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

182 i‡(
TIMx
 =
TIM12
)

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

187 i‡(
TIMx
 =
TIM13
)

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

192 i‡(
TIMx
 =
TIM14
)

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

197 i‡(
TIMx
 =
TIM15
)

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

202 i‡(
TIMx
 =
TIM16
)

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM17
)

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

215 
	}
}

226 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

228 
uöt16_t
 
tmp¸1
 = 0;

231 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

232 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

233 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

235 
tmp¸1
 = 
TIMx
->
CR1
;

237 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

238 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

241 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

242 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

245 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

248 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

249 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

252 
TIMx
->
CR1
 = 
tmp¸1
;

255 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

258 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

260 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

263 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

268 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

269 
	}
}

279 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

281 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

284 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

286 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

287 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

289 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

291 
tmpc˚r
 = 
TIMx
->
CCER
;

293 
tmp¸2
 = 
TIMx
->
CR2
;

296 
tmpccmrx
 = 
TIMx
->
CCMR1
;

299 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

300 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

303 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

306 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

308 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

311 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

313 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

314 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

316 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

318 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

319 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

322 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

324 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

327 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

329 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

332 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

333 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

338 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

341 
TIMx
->
CR2
 = 
tmp¸2
;

344 
TIMx
->
CCMR1
 = 
tmpccmrx
;

347 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

350 
TIMx
->
CCER
 = 
tmpc˚r
;

351 
	}
}

362 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

364 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

367 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

369 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

370 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

372 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

375 
tmpc˚r
 = 
TIMx
->
CCER
;

377 
tmp¸2
 = 
TIMx
->
CR2
;

380 
tmpccmrx
 = 
TIMx
->
CCMR1
;

383 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

384 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

387 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

390 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

392 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

395 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

397 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

399 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

401 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

402 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

405 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

407 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

410 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

412 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

415 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

416 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

421 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

424 
TIMx
->
CR2
 = 
tmp¸2
;

427 
TIMx
->
CCMR1
 = 
tmpccmrx
;

430 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

433 
TIMx
->
CCER
 = 
tmpc˚r
;

434 
	}
}

444 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

446 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

449 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

451 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

452 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

454 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

457 
tmpc˚r
 = 
TIMx
->
CCER
;

459 
tmp¸2
 = 
TIMx
->
CR2
;

462 
tmpccmrx
 = 
TIMx
->
CCMR2
;

465 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

466 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

468 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

471 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

473 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

476 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

478 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

480 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

482 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

483 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

486 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

488 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

490 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

493 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

495 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

496 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

500 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

503 
TIMx
->
CR2
 = 
tmp¸2
;

506 
TIMx
->
CCMR2
 = 
tmpccmrx
;

509 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

512 
TIMx
->
CCER
 = 
tmpc˚r
;

513 
	}
}

523 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

525 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

528 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

530 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

531 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

533 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

536 
tmpc˚r
 = 
TIMx
->
CCER
;

538 
tmp¸2
 = 
TIMx
->
CR2
;

541 
tmpccmrx
 = 
TIMx
->
CCMR2
;

544 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

545 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

548 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

551 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

553 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

556 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

558 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

560 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

562 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

564 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

567 
TIMx
->
CR2
 = 
tmp¸2
;

570 
TIMx
->
CCMR2
 = 
tmpccmrx
;

573 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

576 
TIMx
->
CCER
 = 
tmpc˚r
;

577 
	}
}

587 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

590 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

593 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

595 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

596 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

598 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

602 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY_LITE
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

608 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

618 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

624 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

636 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

638 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

639 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

640 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

642 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

644 
	}
}

654 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

656 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

657 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

659 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

661 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

663 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

667 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

670 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

672 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

676 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

678 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

681 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

682 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

684 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

686 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

688 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

693 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

694 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

696 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

698 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

700 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

702 
	}
}

712 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

715 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

716 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

717 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

718 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

719 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

720 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

721 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

724 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

725 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

726 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

727 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

728 
	}
}

736 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

739 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

740 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

741 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

742 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

743 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

744 
	}
}

752 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

755 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

756 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

757 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

758 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

759 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

760 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

761 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

762 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

763 
	}
}

771 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

774 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

775 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

776 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

777 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

778 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

779 
	}
}

787 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

790 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

791 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

792 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

793 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

794 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

795 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

796 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

797 
	}
}

806 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

809 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

810 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

812 i‡(
NewSèã
 !
DISABLE
)

815 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

820 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

822 
	}
}

831 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

834 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

835 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

836 i‡(
NewSèã
 !
DISABLE
)

839 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

844 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

846 
	}
}

872 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

875 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

876 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

877 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

879 i‡(
NewSèã
 !
DISABLE
)

882 
TIMx
->
DIER
 |
TIM_IT
;

887 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

889 
	}
}

909 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

912 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

913 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

916 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

917 
	}
}

937 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

940 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

941 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

942 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

944 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

945 
	}
}

964 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

968 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

969 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

971 i‡(
NewSèã
 !
DISABLE
)

974 
TIMx
->
DIER
 |
TIM_DMASour˚
;

979 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

981 
	}
}

989 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

992 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

994 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

995 
	}
}

1008 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1011 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1012 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1014 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1016 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1017 
	}
}

1035 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1036 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1039 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1040 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1041 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1042 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1044 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1046 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1050 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1053 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1055 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1056 
	}
}

1075 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1076 
uöt16_t
 
ExtTRGFûãr
)

1078 
uöt16_t
 
tmpsm¸
 = 0;

1080 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1081 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1082 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1083 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1085 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1088 
tmpsm¸
 = 
TIMx
->
SMCR
;

1090 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1092 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1094 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1095 
tmpsm¸
 |
TIM_TS_ETRF
;

1097 
TIMx
->
SMCR
 = 
tmpsm¸
;

1098 
	}
}

1117 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1121 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1123 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1124 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1126 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1128 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1129 
	}
}

1148 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1149 
uöt16_t
 
ExtTRGFûãr
)

1151 
uöt16_t
 
tmpsm¸
 = 0;

1153 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1154 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1155 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1156 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1157 
tmpsm¸
 = 
TIMx
->
SMCR
;

1159 
tmpsm¸
 &
SMCR_ETR_Mask
;

1161 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1163 
TIMx
->
SMCR
 = 
tmpsm¸
;

1164 
	}
}

1176 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1179 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1180 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1182 
TIMx
->
PSC
 = 
PªsˇÀr
;

1184 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1185 
	}
}

1199 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1201 
uöt16_t
 
tmp¸1
 = 0;

1203 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1204 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1205 
tmp¸1
 = 
TIMx
->
CR1
;

1207 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1209 
tmp¸1
 |
TIM_Cou¡îMode
;

1211 
TIMx
->
CR1
 = 
tmp¸1
;

1212 
	}
}

1229 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1231 
uöt16_t
 
tmpsm¸
 = 0;

1233 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1234 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1236 
tmpsm¸
 = 
TIMx
->
SMCR
;

1238 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1240 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1242 
TIMx
->
SMCR
 = 
tmpsm¸
;

1243 
	}
}

1264 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1265 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1267 
uöt16_t
 
tmpsm¸
 = 0;

1268 
uöt16_t
 
tmpccmr1
 = 0;

1269 
uöt16_t
 
tmpc˚r
 = 0;

1272 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1273 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1274 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1275 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1278 
tmpsm¸
 = 
TIMx
->
SMCR
;

1281 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1284 
tmpc˚r
 = 
TIMx
->
CCER
;

1287 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1288 
tmpsm¸
 |
TIM_EncodîMode
;

1291 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1292 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1295 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1296 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1299 
TIMx
->
SMCR
 = 
tmpsm¸
;

1301 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1303 
TIMx
->
CCER
 = 
tmpc˚r
;

1304 
	}
}

1315 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1317 
uöt16_t
 
tmpccmr1
 = 0;

1319 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1320 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1321 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1323 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1325 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1327 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1328 
	}
}

1339 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1341 
uöt16_t
 
tmpccmr1
 = 0;

1343 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1344 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1345 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1347 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1349 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1351 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1352 
	}
}

1363 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1365 
uöt16_t
 
tmpccmr2
 = 0;

1367 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1368 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1369 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1371 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1373 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1375 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1376 
	}
}

1387 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1389 
uöt16_t
 
tmpccmr2
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1393 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1395 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1397 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1399 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1400 
	}
}

1409 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1414 i‡(
NewSèã
 !
DISABLE
)

1417 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1422 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1424 
	}
}

1433 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1436 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1437 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1438 i‡(
NewSèã
 !
DISABLE
)

1441 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1446 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1448 
	}
}

1458 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1461 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1463 i‡(
NewSèã
 !
DISABLE
)

1466 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1471 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1473 
	}
}

1483 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1486 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1488 i‡(
NewSèã
 !
DISABLE
)

1491 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1496 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1498 
	}
}

1509 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1511 
uöt16_t
 
tmpccmr1
 = 0;

1513 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1514 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1515 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1519 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1521 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1522 
	}
}

1534 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1536 
uöt16_t
 
tmpccmr1
 = 0;

1538 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1539 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1540 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1542 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1544 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1546 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1547 
	}
}

1558 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1560 
uöt16_t
 
tmpccmr2
 = 0;

1562 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1563 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1564 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1566 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1568 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1570 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1571 
	}
}

1582 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1584 
uöt16_t
 
tmpccmr2
 = 0;

1586 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1587 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1588 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1590 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1592 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1594 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1595 
	}
}

1606 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1608 
uöt16_t
 
tmpccmr1
 = 0;

1610 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1611 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1613 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1615 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1617 
tmpccmr1
 |
TIM_OCFa°
;

1619 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1620 
	}
}

1632 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1634 
uöt16_t
 
tmpccmr1
 = 0;

1636 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1637 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1639 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1641 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1643 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1645 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1646 
	}
}

1657 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1659 
uöt16_t
 
tmpccmr2
 = 0;

1661 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1662 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1664 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1666 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1668 
tmpccmr2
 |
TIM_OCFa°
;

1670 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1671 
	}
}

1682 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1684 
uöt16_t
 
tmpccmr2
 = 0;

1686 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1687 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1689 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1691 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1693 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1695 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1696 
	}
}

1707 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1709 
uöt16_t
 
tmpccmr1
 = 0;

1711 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1712 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1714 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1717 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1719 
tmpccmr1
 |
TIM_OCCÀ¨
;

1721 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1722 
	}
}

1733 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1735 
uöt16_t
 
tmpccmr1
 = 0;

1737 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1738 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1739 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1741 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1743 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1745 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1746 
	}
}

1757 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1759 
uöt16_t
 
tmpccmr2
 = 0;

1761 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1762 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1763 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1765 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1767 
tmpccmr2
 |
TIM_OCCÀ¨
;

1769 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1770 
	}
}

1781 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1783 
uöt16_t
 
tmpccmr2
 = 0;

1785 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1786 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1787 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1789 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1791 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1793 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1794 
	}
}

1805 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1807 
uöt16_t
 
tmpc˚r
 = 0;

1809 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1810 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1811 
tmpc˚r
 = 
TIMx
->
CCER
;

1813 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1814 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1816 
TIMx
->
CCER
 = 
tmpc˚r
;

1817 
	}
}

1828 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1830 
uöt16_t
 
tmpc˚r
 = 0;

1832 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1833 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1835 
tmpc˚r
 = 
TIMx
->
CCER
;

1837 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1838 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1840 
TIMx
->
CCER
 = 
tmpc˚r
;

1841 
	}
}

1852 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1854 
uöt16_t
 
tmpc˚r
 = 0;

1856 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1857 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1858 
tmpc˚r
 = 
TIMx
->
CCER
;

1860 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1861 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1863 
TIMx
->
CCER
 = 
tmpc˚r
;

1864 
	}
}

1875 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1877 
uöt16_t
 
tmpc˚r
 = 0;

1879 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1880 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1882 
tmpc˚r
 = 
TIMx
->
CCER
;

1884 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1887 
TIMx
->
CCER
 = 
tmpc˚r
;

1888 
	}
}

1899 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1901 
uöt16_t
 
tmpc˚r
 = 0;

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1905 
tmpc˚r
 = 
TIMx
->
CCER
;

1907 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1908 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1910 
TIMx
->
CCER
 = 
tmpc˚r
;

1911 
	}
}

1922 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1924 
uöt16_t
 
tmpc˚r
 = 0;

1927 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1928 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1930 
tmpc˚r
 = 
TIMx
->
CCER
;

1932 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1933 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1935 
TIMx
->
CCER
 = 
tmpc˚r
;

1936 
	}
}

1947 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1949 
uöt16_t
 
tmpc˚r
 = 0;

1951 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1952 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1953 
tmpc˚r
 = 
TIMx
->
CCER
;

1955 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1956 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1958 
TIMx
->
CCER
 = 
tmpc˚r
;

1959 
	}
}

1974 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1976 
uöt16_t
 
tmp
 = 0;

1979 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1980 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1981 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1983 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1986 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1989 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1990 
	}
}

2004 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

2006 
uöt16_t
 
tmp
 = 0;

2009 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2010 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2011 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2013 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2016 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2019 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2020 
	}
}

2045 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2047 
uöt32_t
 
tmp
 = 0;

2048 
uöt16_t
 
tmp1
 = 0;

2051 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2052 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2053 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2055 
tmp
 = (
uöt32_t
Ë
TIMx
;

2056 
tmp
 +
CCMR_Off£t
;

2058 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2061 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2063 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2065 
tmp
 +(
TIM_Ch™√l
>>1);

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2075 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2078 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2081 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2083 
	}
}

2092 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2095 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2096 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2097 i‡(
NewSèã
 !
DISABLE
)

2100 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2105 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2107 
	}
}

2120 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2123 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2125 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2128 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2133 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2135 
	}
}

2144 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2149 i‡(
NewSèã
 !
DISABLE
)

2152 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2157 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2159 
	}
}

2170 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2173 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2174 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2176 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2178 
TIMx
->
CR1
 |
TIM_OPMode
;

2179 
	}
}

2202 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2205 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2206 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2208 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2210 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2211 
	}
}

2225 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2228 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2229 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2231 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2233 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2234 
	}
}

2246 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2249 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2250 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2252 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2255 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2256 
	}
}

2264 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2267 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2269 
TIMx
->
CNT
 = 
Cou¡î
;

2270 
	}
}

2278 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2281 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2283 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2284 
	}
}

2292 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2295 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2297 
TIMx
->
CCR1
 = 
Com∑ª1
;

2298 
	}
}

2306 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2309 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2311 
TIMx
->
CCR2
 = 
Com∑ª2
;

2312 
	}
}

2320 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2323 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2325 
TIMx
->
CCR3
 = 
Com∑ª3
;

2326 
	}
}

2334 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2337 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2339 
TIMx
->
CCR4
 = 
Com∑ª4
;

2340 
	}
}

2353 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2356 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2357 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2359 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2361 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2362 
	}
}

2375 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2378 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2379 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2381 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2383 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2384 
	}
}

2397 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2400 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2401 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2403 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2405 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2406 
	}
}

2419 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2422 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2423 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2425 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2427 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2428 
	}
}

2441 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2444 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2445 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2447 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2449 
TIMx
->
CR1
 |
TIM_CKD
;

2450 
	}
}

2457 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2460 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2462  
TIMx
->
CCR1
;

2463 
	}
}

2470 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2473 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2475  
TIMx
->
CCR2
;

2476 
	}
}

2483 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2486 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2488  
TIMx
->
CCR3
;

2489 
	}
}

2496 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2499 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2501  
TIMx
->
CCR4
;

2502 
	}
}

2509 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2512 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2514  
TIMx
->
CNT
;

2515 
	}
}

2522 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2527  
TIMx
->
PSC
;

2528 
	}
}

2556 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2558 
ITSètus
 
bô°©us
 = 
RESET
;

2560 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2561 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2563 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2565 
bô°©us
 = 
SET
;

2569 
bô°©us
 = 
RESET
;

2571  
bô°©us
;

2572 
	}
}

2600 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2603 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2604 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2607 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2608 
	}
}

2632 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2634 
ITSètus
 
bô°©us
 = 
RESET
;

2635 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2637 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2638 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2640 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2642 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2643 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2645 
bô°©us
 = 
SET
;

2649 
bô°©us
 = 
RESET
;

2651  
bô°©us
;

2652 
	}
}

2676 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2679 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2680 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2682 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2683 
	}
}

2701 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2702 
uöt16_t
 
TIM_ICFûãr
)

2704 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2706 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2707 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2708 
tmpc˚r
 = 
TIMx
->
CCER
;

2710 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2711 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2713 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2714 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2717 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2718 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2723 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

2724 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2728 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2729 
TIMx
->
CCER
 = 
tmpc˚r
;

2730 
	}
}

2748 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2749 
uöt16_t
 
TIM_ICFûãr
)

2751 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2753 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2754 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2755 
tmpc˚r
 = 
TIMx
->
CCER
;

2756 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2758 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2759 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2760 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2762 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2763 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2766 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2767 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2772 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

2773 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC2E
);

2777 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2778 
TIMx
->
CCER
 = 
tmpc˚r
;

2779 
	}
}

2797 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2798 
uöt16_t
 
TIM_ICFûãr
)

2800 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2802 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2803 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2804 
tmpc˚r
 = 
TIMx
->
CCER
;

2805 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2807 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2808 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2810 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2811 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2814 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2815 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2820 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

2821 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC3E
);

2825 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2826 
TIMx
->
CCER
 = 
tmpc˚r
;

2827 
	}
}

2845 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2846 
uöt16_t
 
TIM_ICFûãr
)

2848 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2851 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2852 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2853 
tmpc˚r
 = 
TIMx
->
CCER
;

2854 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2856 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2857 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2858 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2860 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2861 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2864 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2865 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2870 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC4NP
));

2871 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC4E
);

2874 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2875 
TIMx
->
CCER
 = 
tmpc˚r
;

2876 
	}
}

	@stm32f10x_tim.h

24 #i‚de‡
__STM32F10x_TIM_H


25 
	#__STM32F10x_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

53 
uöt16_t
 
TIM_PªsˇÀr
;

56 
uöt16_t
 
TIM_Cou¡îMode
;

59 
uöt16_t
 
TIM_Pîiod
;

63 
uöt16_t
 
TIM_ClockDivisi⁄
;

66 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

74 } 
	tTIM_TimeBa£InôTy≥Def
;

82 
uöt16_t
 
TIM_OCMode
;

85 
uöt16_t
 
TIM_OuçutSèã
;

88 
uöt16_t
 
TIM_OuçutNSèã
;

92 
uöt16_t
 
TIM_Pul£
;

95 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

98 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCIdÀSèã
;

106 
uöt16_t
 
TIM_OCNIdÀSèã
;

109 } 
	tTIM_OCInôTy≥Def
;

118 
uöt16_t
 
TIM_Ch™√l
;

121 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

124 
uöt16_t
 
TIM_ICSñe˘i⁄
;

127 
uöt16_t
 
TIM_ICPªsˇÀr
;

130 
uöt16_t
 
TIM_ICFûãr
;

132 } 
	tTIM_ICInôTy≥Def
;

142 
uöt16_t
 
TIM_OSSRSèã
;

145 
uöt16_t
 
TIM_OSSISèã
;

148 
uöt16_t
 
TIM_LOCKLevñ
;

151 
uöt16_t
 
TIM_DódTime
;

155 
uöt16_t
 
TIM_Bªak
;

158 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

161 
uöt16_t
 
TIM_Autom©icOuçut
;

163 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
)|| \

179 ((
PERIPH
Ë=
TIM11
)|| \

180 ((
PERIPH
Ë=
TIM12
)|| \

181 ((
PERIPH
Ë=
TIM13
)|| \

182 ((
PERIPH
Ë=
TIM14
)|| \

183 ((
PERIPH
Ë=
TIM15
)|| \

184 ((
PERIPH
Ë=
TIM16
)|| \

185 ((
PERIPH
Ë=
TIM17
))

	)

188 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

189 ((
PERIPH
Ë=
TIM8
))

	)

192 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

193 ((
PERIPH
Ë=
TIM8
) || \

194 ((
PERIPH
Ë=
TIM15
)|| \

195 ((
PERIPH
Ë=
TIM16
)|| \

196 ((
PERIPH
Ë=
TIM17
))

	)

199 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

200 ((
PERIPH
Ë=
TIM2
) || \

201 ((
PERIPH
Ë=
TIM3
) || \

202 ((
PERIPH
Ë=
TIM4
) || \

203 ((
PERIPH
Ë=
TIM5
) || \

204 ((
PERIPH
Ë=
TIM8
))

	)

207 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
) || \

213 ((
PERIPH
Ë=
TIM15
)|| \

214 ((
PERIPH
Ë=
TIM16
)|| \

215 ((
PERIPH
Ë=
TIM17
))

	)

218 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

219 ((
PERIPH
Ë=
TIM2
) || \

220 ((
PERIPH
Ë=
TIM3
) || \

221 ((
PERIPH
Ë=
TIM4
) || \

222 ((
PERIPH
Ë=
TIM5
) || \

223 ((
PERIPH
Ë=
TIM8
) || \

224 ((
PERIPH
Ë=
TIM15
))

	)

227 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

228 ((
PERIPH
Ë=
TIM2
) || \

229 ((
PERIPH
Ë=
TIM3
) || \

230 ((
PERIPH
Ë=
TIM4
) || \

231 ((
PERIPH
Ë=
TIM5
) || \

232 ((
PERIPH
Ë=
TIM8
) || \

233 ((
PERIPH
Ë=
TIM9
) || \

234 ((
PERIPH
Ë=
TIM12
)|| \

235 ((
PERIPH
Ë=
TIM15
))

	)

238 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

239 ((
PERIPH
Ë=
TIM2
) || \

240 ((
PERIPH
Ë=
TIM3
) || \

241 ((
PERIPH
Ë=
TIM4
) || \

242 ((
PERIPH
Ë=
TIM5
) || \

243 ((
PERIPH
Ë=
TIM6
) || \

244 ((
PERIPH
Ë=
TIM7
) || \

245 ((
PERIPH
Ë=
TIM8
) || \

246 ((
PERIPH
Ë=
TIM9
) || \

247 ((
PERIPH
Ë=
TIM12
)|| \

248 ((
PERIPH
Ë=
TIM15
))

	)

251 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

252 ((
PERIPH
Ë=
TIM2
) || \

253 ((
PERIPH
Ë=
TIM3
) || \

254 ((
PERIPH
Ë=
TIM4
) || \

255 ((
PERIPH
Ë=
TIM5
) || \

256 ((
PERIPH
Ë=
TIM8
) || \

257 ((
PERIPH
Ë=
TIM9
) || \

258 ((
PERIPH
Ë=
TIM10
)|| \

259 ((
PERIPH
Ë=
TIM11
)|| \

260 ((
PERIPH
Ë=
TIM12
)|| \

261 ((
PERIPH
Ë=
TIM13
)|| \

262 ((
PERIPH
Ë=
TIM14
)|| \

263 ((
PERIPH
Ë=
TIM15
)|| \

264 ((
PERIPH
Ë=
TIM16
)|| \

265 ((
PERIPH
Ë=
TIM17
))

	)

268 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

269 ((
PERIPH
Ë=
TIM2
) || \

270 ((
PERIPH
Ë=
TIM3
) || \

271 ((
PERIPH
Ë=
TIM4
) || \

272 ((
PERIPH
Ë=
TIM5
) || \

273 ((
PERIPH
Ë=
TIM6
) || \

274 ((
PERIPH
Ë=
TIM7
) || \

275 ((
PERIPH
Ë=
TIM8
) || \

276 ((
PERIPH
Ë=
TIM15
)|| \

277 ((
PERIPH
Ë=
TIM16
)|| \

278 ((
PERIPH
Ë=
TIM17
))

	)

288 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

289 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

290 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

291 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

292 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

293 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

294 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

295 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

297 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

298 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

299 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

300 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

301 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

303 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

304 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

305 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

307 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

316 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

317 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

318 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

319 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

328 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

329 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

330 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

331 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

332 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

333 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

335 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

336 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

337 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

338 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

339 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

340 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

349 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

350 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

351 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

352 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

353 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

354 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

363 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

364 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

367 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

368 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

369 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

372 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

381 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

382 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

383 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

384 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

393 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

394 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

395 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

396 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

405 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

406 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

407 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

408 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

417 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

419 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

420 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

429 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

430 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

431 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

432 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

441 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

442 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

443 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

444 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

453 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

454 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

456 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

465 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

467 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

468 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

477 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

478 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

480 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

489 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

490 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

491 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

492 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

493 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

496 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

505 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

506 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

507 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

508 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

517 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

518 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

519 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

520 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

529 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

530 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

531 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

532 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

541 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

542 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

543 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

544 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

553 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

554 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

556 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

557 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

	)

558 
	#IS_TIM_IC_POLARITY_LITE
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

559 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

560 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

569 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

571 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

573 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

574 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

575 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

576 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

585 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

586 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

587 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

588 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

589 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

590 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

591 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

592 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

601 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

602 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

603 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

604 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

605 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

606 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

607 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

608 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

609 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

611 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

612 ((
IT
Ë=
TIM_IT_CC1
) || \

613 ((
IT
Ë=
TIM_IT_CC2
) || \

614 ((
IT
Ë=
TIM_IT_CC3
) || \

615 ((
IT
Ë=
TIM_IT_CC4
) || \

616 ((
IT
Ë=
TIM_IT_COM
) || \

617 ((
IT
Ë=
TIM_IT_Triggî
) || \

618 ((
IT
Ë=
TIM_IT_Bªak
))

	)

627 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

629 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

630 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

631 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

632 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

633 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

634 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

635 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

636 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

637 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

638 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

639 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

640 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

641 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

642 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

643 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

644 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

645 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

646 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

647 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

648 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

649 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

651 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

652 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

653 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

656 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

657 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

658 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

660 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

661 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

662 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

663 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

664 ((
BASE
Ë=
TIM_DMABa£_DCR
))

	)

673 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

674 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

675 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

676 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

677 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

678 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

679 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

680 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

681 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

682 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

683 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

684 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

685 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

686 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

687 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

688 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

689 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

691 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

704 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

705 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

706 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

707 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

708 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

717 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

718 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

719 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

720 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

721 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

722 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

723 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

724 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

734 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

735 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

736 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

737 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

738 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

739 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

740 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

741 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

750 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

751 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

752 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

753 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

754 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

755 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

756 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

757 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

758 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

759 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

760 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

761 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

762 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

763 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

764 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

765 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

766 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

767 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

768 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

769 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

778 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

779 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

780 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

781 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
) || \

782 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

783 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

	)

791 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

792 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

793 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

794 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

803 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

804 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

805 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

806 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

815 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

816 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

817 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

818 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

827 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

828 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

829 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

830 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

831 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

832 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

842 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

843 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

844 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

845 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

846 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

847 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

848 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

849 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

850 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

860 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

863 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

864 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

865 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

874 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

875 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

876 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

877 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

886 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

887 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

888 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

889 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

899 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

900 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

901 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

902 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

911 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

912 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

913 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

914 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

915 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

916 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

917 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

918 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

919 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

922 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

923 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

924 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

925 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

926 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

935 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

936 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

937 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

938 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

939 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

940 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

941 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

942 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

951 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

952 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

953 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

954 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

963 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

964 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

965 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

966 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

967 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

968 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

969 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

970 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

971 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

972 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

973 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

974 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

975 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

976 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

977 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

980 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

981 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

982 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

983 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

984 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

985 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

986 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

989 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

998 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1007 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1016 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

1017 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

1018 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

1019 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1020 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1021 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1022 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1023 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1024 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1025 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1026 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1027 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1028 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1029 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1030 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1031 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1032 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1033 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1054 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1055 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1056 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1057 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1058 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1059 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1060 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1061 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1062 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1063 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1064 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1065 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1066 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1067 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1068 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1069 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1070 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1071 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1072 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1073 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1074 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1075 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1076 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1077 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1078 
uöt16_t
 
ExtTRGFûãr
);

1079 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1080 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1081 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1082 
uöt16_t
 
ExtTRGFûãr
);

1083 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1084 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1085 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1086 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1087 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1088 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1089 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1090 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1091 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1092 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1093 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1097 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1098 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1099 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1100 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1101 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1102 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1103 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1104 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1105 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1106 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1107 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1108 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1109 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1110 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1111 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1112 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1113 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1114 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1115 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1116 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1117 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1118 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1119 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1120 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1121 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1126 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1127 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1128 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1129 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1130 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1131 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1132 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1133 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1134 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1135 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1136 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1137 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1138 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1139 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1140 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1141 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1142 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1143 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1144 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1145 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1147 #ifde‡
__˝lu•lus


	@stm32f10x_usart.c

23 
	~"°m32f10x_ußπ.h
"

24 
	~"°m32f10x_rcc.h
"

47 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

48 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

50 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

52 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

53 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

54 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

55 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

56 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

58 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

59 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

61 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

62 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

63 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

65 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

66 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

68 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

69 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

71 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

72 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

74 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

75 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

77 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

78 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

79 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

80 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

81 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

84 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

85 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

88 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

89 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

130 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

133 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

135 i‡(
USARTx
 =
USART1
)

137 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

138 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

140 i‡(
USARTx
 =
USART2
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

145 i‡(
USARTx
 =
USART3
)

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

150 i‡(
USARTx
 =
UART4
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

157 i‡(
USARTx
 =
UART5
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

163 
	}
}

176 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

178 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

179 
uöt32_t
 
öãgîdividî
 = 0x00;

180 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

181 
uöt32_t
 
ußπxba£
 = 0;

182 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

184 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

185 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

186 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

187 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

188 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

189 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

190 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

192 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

194 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

197 
ußπxba£
 = (
uöt32_t
)
USARTx
;

200 
tm¥eg
 = 
USARTx
->
CR2
;

202 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

205 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

208 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

211 
tm¥eg
 = 
USARTx
->
CR1
;

213 
tm¥eg
 &
CR1_CLEAR_Mask
;

218 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

219 
USART_InôSåu˘
->
USART_Mode
;

221 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

224 
tm¥eg
 = 
USARTx
->
CR3
;

226 
tm¥eg
 &
CR3_CLEAR_Mask
;

229 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

231 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

235 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

236 i‡(
ußπxba£
 =
USART1_BASE
)

238 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

242 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

246 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

249 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

254 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

256 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

259 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

262 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

264 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

268 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

272 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

273 
	}
}

281 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

284 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

285 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

286 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

287 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

288 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

289 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

290 
	}
}

302 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

304 
uöt32_t
 
tm¥eg
 = 0x00;

306 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

307 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

308 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

309 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

310 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

313 
tm¥eg
 = 
USARTx
->
CR2
;

315 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

321 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

322 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

324 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

325 
	}
}

333 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

336 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

337 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

338 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

339 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

340 
	}
}

351 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

355 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

357 i‡(
NewSèã
 !
DISABLE
)

360 
USARTx
->
CR1
 |
CR1_UE_Së
;

365 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

367 
	}
}

388 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

390 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

391 
uöt32_t
 
ußπxba£
 = 0x00;

393 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

394 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

395 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

397 i‡(
USART_IT
 =
USART_IT_CTS
)

399 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

402 
ußπxba£
 = (
uöt32_t
)
USARTx
;

405 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

408 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

409 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

411 i‡(
ußπªg
 == 0x01)

413 
ußπxba£
 += 0x0C;

415 i‡(
ußπªg
 == 0x02)

417 
ußπxba£
 += 0x10;

421 
ußπxba£
 += 0x14;

423 i‡(
NewSèã
 !
DISABLE
)

425 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

429 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

431 
	}
}

448 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

451 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

452 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

454 i‡(
NewSèã
 !
DISABLE
)

458 
USARTx
->
CR3
 |
USART_DMAReq
;

464 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

466 
	}
}

476 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

479 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

480 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

483 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

485 
USARTx
->
CR2
 |
USART_Addªss
;

486 
	}
}

499 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

502 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

503 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

505 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

506 
USARTx
->
CR1
 |
USART_WakeUp
;

507 
	}
}

518 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

524 i‡(
NewSèã
 !
DISABLE
)

527 
USARTx
->
CR1
 |
CR1_RWU_Së
;

532 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

534 
	}
}

547 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

550 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

551 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

553 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

554 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

555 
	}
}

566 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

569 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

570 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

572 i‡(
NewSèã
 !
DISABLE
)

575 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

580 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

582 
	}
}

592 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

595 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

596 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

599 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

600 
	}
}

609 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

612 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

615  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

616 
	}
}

625 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

631 
USARTx
->
CR1
 |
CR1_SBK_Së
;

632 
	}
}

641 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

644 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

647 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

649 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

650 
	}
}

661 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

664 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

667 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

669 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

670 
	}
}

680 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

683 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

684 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

685 i‡(
NewSèã
 !
DISABLE
)

688 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

693 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

695 
	}
}

705 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

708 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

709 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

710 i‡(
NewSèã
 !
DISABLE
)

713 
USARTx
->
CR3
 |
CR3_NACK_Së
;

718 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

720 
	}
}

731 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

735 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

737 i‡(
NewSèã
 !
DISABLE
)

740 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

745 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

747 
	}
}

762 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

765 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

766 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

776 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

778 
	}
}

789 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

792 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

793 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

795 i‡(
NewSèã
 !
DISABLE
)

798 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

803 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

805 
	}
}

818 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

821 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

822 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

824 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

825 
USARTx
->
CR3
 |
USART_IrDAMode
;

826 
	}
}

837 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

840 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

843 i‡(
NewSèã
 !
DISABLE
)

846 
USARTx
->
CR3
 |
CR3_IREN_Së
;

851 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

853 
	}
}

874 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

876 
FœgSètus
 
bô°©us
 = 
RESET
;

878 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

879 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

881 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

883 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

886 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

888 
bô°©us
 = 
SET
;

892 
bô°©us
 = 
RESET
;

894  
bô°©us
;

895 
	}
}

923 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

926 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

927 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

929 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

931 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

934 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

935 
	}
}

956 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

958 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

959 
ITSètus
 
bô°©us
 = 
RESET
;

961 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

962 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

964 i‡(
USART_IT
 =
USART_IT_CTS
)

966 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

970 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

972 
ômask
 = 
USART_IT
 & 
IT_Mask
;

973 
ômask
 = (
uöt32_t
)0x01 << itmask;

975 i‡(
ußπªg
 == 0x01)

977 
ômask
 &
USARTx
->
CR1
;

979 i‡(
ußπªg
 == 0x02)

981 
ômask
 &
USARTx
->
CR2
;

985 
ômask
 &
USARTx
->
CR3
;

988 
bôpos
 = 
USART_IT
 >> 0x08;

989 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

990 
bôpos
 &
USARTx
->
SR
;

991 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

993 
bô°©us
 = 
SET
;

997 
bô°©us
 = 
RESET
;

1000  
bô°©us
;

1001 
	}
}

1030 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1032 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1034 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1035 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1037 i‡(
USART_IT
 =
USART_IT_CTS
)

1039 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1042 
bôpos
 = 
USART_IT
 >> 0x08;

1043 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1044 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1045 
	}
}

	@stm32f10x_usart.h

24 #i‚de‡
__STM32F10x_USART_H


25 
	#__STM32F10x_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
USART_BaudR©e
;

57 
uöt16_t
 
USART_W‹dLígth
;

60 
uöt16_t
 
USART_St›Bôs
;

63 
uöt16_t
 
USART_P¨ôy
;

70 
uöt16_t
 
USART_Mode
;

73 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

76 } 
	tUSART_InôTy≥Def
;

85 
uöt16_t
 
USART_Clock
;

88 
uöt16_t
 
USART_CPOL
;

91 
uöt16_t
 
USART_CPHA
;

94 
uöt16_t
 
USART_La°Bô
;

97 } 
	tUSART_ClockInôTy≥Def
;

107 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

108 ((
PERIPH
Ë=
USART2
) || \

109 ((
PERIPH
Ë=
USART3
) || \

110 ((
PERIPH
Ë=
UART4
) || \

111 ((
PERIPH
Ë=
UART5
))

	)

113 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

114 ((
PERIPH
Ë=
USART2
) || \

115 ((
PERIPH
Ë=
USART3
))

	)

117 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

118 ((
PERIPH
Ë=
USART2
) || \

119 ((
PERIPH
Ë=
USART3
) || \

120 ((
PERIPH
Ë=
UART4
))

	)

125 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

126 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

128 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

129 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

138 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

139 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

140 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

141 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

142 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

145 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

154 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

155 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

156 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

157 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

159 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

168 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

169 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

170 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

182 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

183 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

186 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

194 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

195 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

196 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

197 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

206 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

207 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

208 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

218 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

219 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

220 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

230 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

231 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

232 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

233 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

242 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

243 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

244 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

245 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

246 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

247 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

248 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

249 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

250 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

251 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

252 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

253 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

254 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

255 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

256 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

257 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

258 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

259 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

260 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

261 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

262 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

263 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

272 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

273 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

274 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

284 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

285 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

286 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

287 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

296 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

297 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

298 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

299 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

300 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

309 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

310 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

311 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

312 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

321 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

322 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

323 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

324 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

325 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

326 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

327 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

328 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

329 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

330 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

331 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

332 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

333 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

334 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

335 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

337 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

338 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
) &&\

339 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

340 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

	)

341 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

342 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

343 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

365 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

366 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

368 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

370 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

373 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

374 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

375 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

376 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

377 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

379 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

381 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

382 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

383 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

388 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

389 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

390 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

392 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

393 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

395 #ifde‡
__˝lu•lus


	@stm32f10x_wwdg.c

23 
	~"°m32f10x_wwdg.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

52 
	#EWI_BôNumbî
 0x09

	)

53 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

58 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

61 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

62 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

63 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

102 
	$WWDG_DeInô
()

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

105 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

106 
	}
}

118 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

120 
uöt32_t
 
tm¥eg
 = 0;

122 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

124 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

126 
tm¥eg
 |
WWDG_PªsˇÀr
;

128 
WWDG
->
CFR
 = 
tm¥eg
;

129 
	}
}

137 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

139 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

142 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

145 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

148 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

151 
WWDG
->
CFR
 = 
tm¥eg
;

152 
	}
}

159 
	$WWDG_E«bÀIT
()

161 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

162 
	}
}

170 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

173 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

176 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

177 
	}
}

185 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

188 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

189 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

190 
	}
}

197 
FœgSètus
 
	$WWDG_GëFœgSètus
()

199  (
FœgSètus
)(
WWDG
->
SR
);

200 
	}
}

207 
	$WWDG_CÀ¨Fœg
()

209 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

210 
	}
}

	@stm32f10x_wwdg.h

24 #i‚de‡
__STM32F10x_WWDG_H


25 
	#__STM32F10x_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

59 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

60 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

61 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

62 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

66 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

67 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

88 
WWDG_DeInô
();

89 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

90 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

91 
WWDG_E«bÀIT
();

92 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

93 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@
1
.
0
51
792
common.h
init.c
main.c
misc.c
misc.h
regs.h
stm32f103_timer.h
stm32f10x_adc.c
stm32f10x_adc.h
stm32f10x_bkp.c
stm32f10x_bkp.h
stm32f10x_can.c
stm32f10x_can.h
stm32f10x_cec.c
stm32f10x_cec.h
stm32f10x_crc.c
stm32f10x_crc.h
stm32f10x_dac.c
stm32f10x_dac.h
stm32f10x_dbgmcu.c
stm32f10x_dbgmcu.h
stm32f10x_dma.c
stm32f10x_dma.h
stm32f10x_exti.c
stm32f10x_exti.h
stm32f10x_flash.c
stm32f10x_flash.h
stm32f10x_fsmc.c
stm32f10x_fsmc.h
stm32f10x_gpio.c
stm32f10x_gpio.h
stm32f10x_i2c.c
stm32f10x_i2c.h
stm32f10x_iwdg.c
stm32f10x_iwdg.h
stm32f10x_pwr.c
stm32f10x_pwr.h
stm32f10x_rcc.c
stm32f10x_rcc.h
stm32f10x_rtc.c
stm32f10x_rtc.h
stm32f10x_sdio.c
stm32f10x_sdio.h
stm32f10x_spi.c
stm32f10x_spi.h
stm32f10x_tim.c
stm32f10x_tim.h
stm32f10x_usart.c
stm32f10x_usart.h
stm32f10x_wwdg.c
stm32f10x_wwdg.h
