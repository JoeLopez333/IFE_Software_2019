ARM GAS  /tmp/ccbFgecN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB74:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccbFgecN.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** #define CHANNELS 2
  57:Src/main.c    **** /* USER CODE END PD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** SPI_HandleTypeDef hspi1;
  66:Src/main.c    **** 
  67:Src/main.c    **** UART_HandleTypeDef huart1;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PV */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void SystemClock_Config(void);
  75:Src/main.c    **** static void MX_GPIO_Init(void);
  76:Src/main.c    **** static void MX_SPI1_Init(void);
  77:Src/main.c    **** static void MX_USART1_UART_Init(void);
  78:Src/main.c    **** /* USER CODE BEGIN PFP */
  79:Src/main.c    **** void read(long r[3]);
  80:Src/main.c    **** void send(int a);
  81:Src/main.c    **** void set_ch(int gain);
  82:Src/main.c    **** void ADC_setup();
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** void send(int a){
  88:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  89:Src/main.c    ****     uint8_t message[1];
  90:Src/main.c    ****     message[0] = a & 0xFF;
  91:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
ARM GAS  /tmp/ccbFgecN.s 			page 3


  92:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
  93:Src/main.c    ****     HAL_Delay(10);
  94:Src/main.c    **** }
  95:Src/main.c    **** 
  96:Src/main.c    **** void set_ch(int gain){
  97:Src/main.c    ****     if (gain == 8){
  98:Src/main.c    ****         gain = 5;
  99:Src/main.c    ****     }
 100:Src/main.c    ****     if (gain == 12){
 101:Src/main.c    ****         gain = 6;
 102:Src/main.c    ****     }
 103:Src/main.c    ****     for(int i = 0; i<CHANNELS; i++){
 104:Src/main.c    ****         send(69+i);
 105:Src/main.c    ****         send(0);
 106:Src/main.c    ****         send(0+(gain<<4));
 107:Src/main.c    ****         HAL_Delay(10);
 108:Src/main.c    ****     }
 109:Src/main.c    ****     for(int i = CHANNELS; i<8; i++){
 110:Src/main.c    ****         send(69+i);
 111:Src/main.c    ****         send(0);
 112:Src/main.c    ****         send(144);
 113:Src/main.c    ****         HAL_Delay(10);
 114:Src/main.c    ****     }
 115:Src/main.c    **** 
 116:Src/main.c    **** }
 117:Src/main.c    **** 
 118:Src/main.c    **** void read(long r[9]){
 119:Src/main.c    ****     int t = HAL_GetTick();
 120:Src/main.c    ****     while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 121:Src/main.c    ****         HAL_Delay(25);
 122:Src/main.c    ****         char data[] = ".";
 123:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, sizeof(data), 1000);
 124:Src/main.c    **** 
 125:Src/main.c    ****         if((t+1000)<HAL_GetTick()){
 126:Src/main.c    ****             char data[] = "Resetting \n";
 127:Src/main.c    ****             HAL_UART_Transmit(&huart1, (uint8_t*)data, sizeof(data), 1000);
 128:Src/main.c    ****             send(2);
 129:Src/main.c    ****             HAL_Delay(1);
 130:Src/main.c    ****             send(8);
 131:Src/main.c    **** //            ADC_setup();
 132:Src/main.c    ****             HAL_Delay(500);
 133:Src/main.c    ****             if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)) return;
 134:Src/main.c    ****             break;
 135:Src/main.c    ****         }
 136:Src/main.c    ****     }
 137:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 138:Src/main.c    ****     for(int j =0; j<CHANNELS+1; j++){
 139:Src/main.c    ****         r[j] = 0;
 140:Src/main.c    ****         uint8_t data;
 141:Src/main.c    ****         HAL_SPI_Receive(&hspi1, &data, 1, 100);
 142:Src/main.c    ****         r[j] += data<<16;
 143:Src/main.c    ****         HAL_SPI_Receive(&hspi1, &data, 1, 100);
 144:Src/main.c    ****         r[j] += data<<8;
 145:Src/main.c    ****         HAL_SPI_Receive(&hspi1, &data, 1, 100);
 146:Src/main.c    ****         r[j] += data;
 147:Src/main.c    ****     }
 148:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
ARM GAS  /tmp/ccbFgecN.s 			page 4


 149:Src/main.c    ****     HAL_Delay(1);
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** void ADC_setup(){
 153:Src/main.c    ****     set_ch(1);
 154:Src/main.c    ****     HAL_Delay(1);
 155:Src/main.c    ****     send(0x41);
 156:Src/main.c    ****     send(0);
 157:Src/main.c    ****     send(0xD6);
 158:Src/main.c    ****     HAL_Delay(1);
 159:Src/main.c    ****     send(0x08);
 160:Src/main.c    ****     HAL_Delay(1);
 161:Src/main.c    **** }
 162:Src/main.c    **** /* USER CODE END 0 */
 163:Src/main.c    **** 
 164:Src/main.c    **** /**
 165:Src/main.c    ****   * @brief  The application entry point.
 166:Src/main.c    ****   * @retval int
 167:Src/main.c    ****   */
 168:Src/main.c    **** int main(void)
 169:Src/main.c    **** {
 170:Src/main.c    ****   /* USER CODE BEGIN 1 */
 171:Src/main.c    **** 
 172:Src/main.c    ****   /* USER CODE END 1 */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 177:Src/main.c    ****   HAL_Init();
 178:Src/main.c    **** 
 179:Src/main.c    ****   /* USER CODE BEGIN Init */
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE END Init */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* Configure the system clock */
 184:Src/main.c    ****   SystemClock_Config();
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 187:Src/main.c    **** 
 188:Src/main.c    ****   /* USER CODE END SysInit */
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* Initialize all configured peripherals */
 191:Src/main.c    ****   MX_GPIO_Init();
 192:Src/main.c    ****   MX_SPI1_Init();
 193:Src/main.c    ****   MX_USART1_UART_Init();
 194:Src/main.c    ****   /* USER CODE BEGIN 2 */
 195:Src/main.c    ****     long result[9];
 196:Src/main.c    ****   /* USER CODE END 2 */
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* Infinite loop */
 199:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 200:Src/main.c    ****   while (1)
 201:Src/main.c    ****   {
 202:Src/main.c    ****     /* USER CODE END WHILE */
 203:Src/main.c    ****     read(result);
 204:Src/main.c    ****     char stat[22];
 205:Src/main.c    ****     sprintf(stat, "Status: %5d %5d \n", (int)result[0]&0xFFFF, (int)(result[0]>>16)&0xFFFF);
ARM GAS  /tmp/ccbFgecN.s 			page 5


 206:Src/main.c    ****     HAL_UART_Transmit (&huart1, (uint8_t *)stat, 22, 100);
 207:Src/main.c    ****     result[0] = 0;
 208:Src/main.c    **** 
 209:Src/main.c    ****     for(int i = 1; i <= CHANNELS; i++){
 210:Src/main.c    ****         float volts = ((float) result[i])*8000.0/16777216.0;
 211:Src/main.c    ****         result[i] = 0;
 212:Src/main.c    ****         char *s = (volts < 0) ? "-" : "+";
 213:Src/main.c    ****         volts = (volts < 0) ? -volts: volts;
 214:Src/main.c    ****         int iv = volts;
 215:Src/main.c    ****         int dv = volts*100000;
 216:Src/main.c    ****         char str[100];
 217:Src/main.c    ****         sprintf(str, " %s%d.%05d,", s, iv, dv);
 218:Src/main.c    ****         int i = 0;
 219:Src/main.c    ****         for(; i < sizeof(str); i++){
 220:Src/main.c    ****             if(str[i] == ',') break;
 221:Src/main.c    ****         }
 222:Src/main.c    ****         HAL_UART_Transmit (&huart1, (uint8_t *)str, i+1, 100);
 223:Src/main.c    ****     }
 224:Src/main.c    ****     HAL_UART_Transmit (&huart1, (uint8_t *)"\n", 1, 100);
 225:Src/main.c    **** 
 226:Src/main.c    ****     /* USER CODE BEGIN 3 */
 227:Src/main.c    ****   }
 228:Src/main.c    ****   /* USER CODE END 3 */
 229:Src/main.c    **** }
 230:Src/main.c    **** 
 231:Src/main.c    **** /**
 232:Src/main.c    ****   * @brief System Clock Configuration
 233:Src/main.c    ****   * @retval None
 234:Src/main.c    ****   */
 235:Src/main.c    **** void SystemClock_Config(void)
 236:Src/main.c    **** {
 237:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 238:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 239:Src/main.c    **** 
 240:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 241:Src/main.c    ****   */
 242:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 243:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 244:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 245:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 246:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 251:Src/main.c    ****   */
 252:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 253:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 254:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 255:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 256:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 257:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 258:Src/main.c    **** 
 259:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 260:Src/main.c    ****   {
 261:Src/main.c    ****     Error_Handler();
 262:Src/main.c    ****   }
ARM GAS  /tmp/ccbFgecN.s 			page 6


 263:Src/main.c    **** }
 264:Src/main.c    **** 
 265:Src/main.c    **** /**
 266:Src/main.c    ****   * @brief SPI1 Initialization Function
 267:Src/main.c    ****   * @param None
 268:Src/main.c    ****   * @retval None
 269:Src/main.c    ****   */
 270:Src/main.c    **** static void MX_SPI1_Init(void)
 271:Src/main.c    **** {
 272:Src/main.c    **** 
 273:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 274:Src/main.c    **** 
 275:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 280:Src/main.c    ****   /* SPI1 parameter configuration*/
 281:Src/main.c    ****   hspi1.Instance = SPI1;
 282:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 283:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 284:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 285:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 286:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 287:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 288:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 289:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 290:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 291:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 292:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 293:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 294:Src/main.c    ****   {
 295:Src/main.c    ****     Error_Handler();
 296:Src/main.c    ****   }
 297:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 298:Src/main.c    **** 
 299:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 300:Src/main.c    **** 
 301:Src/main.c    **** }
 302:Src/main.c    **** 
 303:Src/main.c    **** /**
 304:Src/main.c    ****   * @brief USART1 Initialization Function
 305:Src/main.c    ****   * @param None
 306:Src/main.c    ****   * @retval None
 307:Src/main.c    ****   */
 308:Src/main.c    **** static void MX_USART1_UART_Init(void)
 309:Src/main.c    **** {
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 318:Src/main.c    ****   huart1.Instance = USART1;
 319:Src/main.c    ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/ccbFgecN.s 			page 7


 320:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 321:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 322:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 323:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 324:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 325:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 326:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 327:Src/main.c    ****   {
 328:Src/main.c    ****     Error_Handler();
 329:Src/main.c    ****   }
 330:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 333:Src/main.c    **** 
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** /**
 337:Src/main.c    ****   * @brief GPIO Initialization Function
 338:Src/main.c    ****   * @param None
 339:Src/main.c    ****   * @retval None
 340:Src/main.c    ****   */
 341:Src/main.c    **** static void MX_GPIO_Init(void)
 342:Src/main.c    **** {
  25              		.loc 1 342 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 343:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 343 0
  39 0004 0024     		movs	r4, #0
  40 0006 0294     		str	r4, [sp, #8]
  41 0008 0394     		str	r4, [sp, #12]
  42 000a 0494     		str	r4, [sp, #16]
  43 000c 0594     		str	r4, [sp, #20]
  44              	.LBB2:
 344:Src/main.c    **** 
 345:Src/main.c    ****   /* GPIO Ports Clock Enable */
 346:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  45              		.loc 1 346 0
  46 000e 134B     		ldr	r3, .L3
  47 0010 9A69     		ldr	r2, [r3, #24]
  48 0012 42F00402 		orr	r2, r2, #4
  49 0016 9A61     		str	r2, [r3, #24]
  50 0018 9B69     		ldr	r3, [r3, #24]
  51 001a 03F00403 		and	r3, r3, #4
  52 001e 0193     		str	r3, [sp, #4]
  53 0020 019B     		ldr	r3, [sp, #4]
  54              	.LBE2:
ARM GAS  /tmp/ccbFgecN.s 			page 8


 347:Src/main.c    **** 
 348:Src/main.c    ****   /*Configure GPIO pin Output Level */
 349:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  55              		.loc 1 349 0
  56 0022 0F4D     		ldr	r5, .L3+4
  57 0024 2246     		mov	r2, r4
  58 0026 1021     		movs	r1, #16
  59 0028 2846     		mov	r0, r5
  60 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL0:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pin : PA3 */
 352:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
  62              		.loc 1 352 0
  63 002e 0823     		movs	r3, #8
  64 0030 0293     		str	r3, [sp, #8]
 353:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  65              		.loc 1 353 0
  66 0032 0394     		str	r4, [sp, #12]
 354:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
  67              		.loc 1 354 0
  68 0034 0124     		movs	r4, #1
  69 0036 0494     		str	r4, [sp, #16]
 355:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  70              		.loc 1 355 0
  71 0038 0DEB0301 		add	r1, sp, r3
  72 003c 2846     		mov	r0, r5
  73 003e FFF7FEFF 		bl	HAL_GPIO_Init
  74              	.LVL1:
 356:Src/main.c    **** 
 357:Src/main.c    ****   /*Configure GPIO pin : PA4 */
 358:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
  75              		.loc 1 358 0
  76 0042 1023     		movs	r3, #16
  77 0044 0293     		str	r3, [sp, #8]
 359:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  78              		.loc 1 359 0
  79 0046 0394     		str	r4, [sp, #12]
 360:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
  80              		.loc 1 360 0
  81 0048 0494     		str	r4, [sp, #16]
 361:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  82              		.loc 1 361 0
  83 004a 0223     		movs	r3, #2
  84 004c 0593     		str	r3, [sp, #20]
 362:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  85              		.loc 1 362 0
  86 004e 02A9     		add	r1, sp, #8
  87 0050 2846     		mov	r0, r5
  88 0052 FFF7FEFF 		bl	HAL_GPIO_Init
  89              	.LVL2:
 363:Src/main.c    **** 
 364:Src/main.c    **** }
  90              		.loc 1 364 0
  91 0056 07B0     		add	sp, sp, #28
  92              	.LCFI2:
  93              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccbFgecN.s 			page 9


  94              		@ sp needed
  95 0058 30BD     		pop	{r4, r5, pc}
  96              	.L4:
  97 005a 00BF     		.align	2
  98              	.L3:
  99 005c 00100240 		.word	1073876992
 100 0060 00080140 		.word	1073809408
 101              		.cfi_endproc
 102              	.LFE74:
 104              		.section	.text.MX_SPI1_Init,"ax",%progbits
 105              		.align	1
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu softvfp
 111              	MX_SPI1_Init:
 112              	.LFB72:
 271:Src/main.c    **** 
 113              		.loc 1 271 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117 0000 08B5     		push	{r3, lr}
 118              	.LCFI3:
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 3, -8
 121              		.cfi_offset 14, -4
 281:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 122              		.loc 1 281 0
 123 0002 0B48     		ldr	r0, .L7
 124 0004 0B4B     		ldr	r3, .L7+4
 125 0006 0360     		str	r3, [r0]
 282:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 126              		.loc 1 282 0
 127 0008 4FF48273 		mov	r3, #260
 128 000c 4360     		str	r3, [r0, #4]
 283:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 129              		.loc 1 283 0
 130 000e 0023     		movs	r3, #0
 131 0010 8360     		str	r3, [r0, #8]
 284:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 132              		.loc 1 284 0
 133 0012 C360     		str	r3, [r0, #12]
 285:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 134              		.loc 1 285 0
 135 0014 0361     		str	r3, [r0, #16]
 286:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 136              		.loc 1 286 0
 137 0016 4361     		str	r3, [r0, #20]
 287:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 138              		.loc 1 287 0
 139 0018 4FF40072 		mov	r2, #512
 140 001c 8261     		str	r2, [r0, #24]
 288:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 141              		.loc 1 288 0
 142 001e C361     		str	r3, [r0, #28]
 289:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
ARM GAS  /tmp/ccbFgecN.s 			page 10


 143              		.loc 1 289 0
 144 0020 0362     		str	r3, [r0, #32]
 290:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 145              		.loc 1 290 0
 146 0022 4362     		str	r3, [r0, #36]
 291:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 147              		.loc 1 291 0
 148 0024 8362     		str	r3, [r0, #40]
 292:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 149              		.loc 1 292 0
 150 0026 0A23     		movs	r3, #10
 151 0028 C362     		str	r3, [r0, #44]
 293:Src/main.c    ****   {
 152              		.loc 1 293 0
 153 002a FFF7FEFF 		bl	HAL_SPI_Init
 154              	.LVL3:
 301:Src/main.c    **** 
 155              		.loc 1 301 0
 156 002e 08BD     		pop	{r3, pc}
 157              	.L8:
 158              		.align	2
 159              	.L7:
 160 0030 00000000 		.word	hspi1
 161 0034 00300140 		.word	1073819648
 162              		.cfi_endproc
 163              	.LFE72:
 165              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 166              		.align	1
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	MX_USART1_UART_Init:
 173              	.LFB73:
 309:Src/main.c    **** 
 174              		.loc 1 309 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178 0000 08B5     		push	{r3, lr}
 179              	.LCFI4:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 3, -8
 182              		.cfi_offset 14, -4
 318:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 183              		.loc 1 318 0
 184 0002 0848     		ldr	r0, .L11
 185 0004 084B     		ldr	r3, .L11+4
 186 0006 0360     		str	r3, [r0]
 319:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 187              		.loc 1 319 0
 188 0008 4FF4E133 		mov	r3, #115200
 189 000c 4360     		str	r3, [r0, #4]
 320:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 190              		.loc 1 320 0
 191 000e 0023     		movs	r3, #0
 192 0010 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccbFgecN.s 			page 11


 321:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 193              		.loc 1 321 0
 194 0012 C360     		str	r3, [r0, #12]
 322:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 195              		.loc 1 322 0
 196 0014 0361     		str	r3, [r0, #16]
 323:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 197              		.loc 1 323 0
 198 0016 0C22     		movs	r2, #12
 199 0018 4261     		str	r2, [r0, #20]
 324:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 200              		.loc 1 324 0
 201 001a 8361     		str	r3, [r0, #24]
 325:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 202              		.loc 1 325 0
 203 001c C361     		str	r3, [r0, #28]
 326:Src/main.c    ****   {
 204              		.loc 1 326 0
 205 001e FFF7FEFF 		bl	HAL_UART_Init
 206              	.LVL4:
 334:Src/main.c    **** 
 207              		.loc 1 334 0
 208 0022 08BD     		pop	{r3, pc}
 209              	.L12:
 210              		.align	2
 211              	.L11:
 212 0024 00000000 		.word	huart1
 213 0028 00380140 		.word	1073821696
 214              		.cfi_endproc
 215              	.LFE73:
 217              		.section	.text.send,"ax",%progbits
 218              		.align	1
 219              		.global	send
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu softvfp
 225              	send:
 226              	.LFB66:
  87:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 227              		.loc 1 87 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              	.LVL5:
 232 0000 30B5     		push	{r4, r5, lr}
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 12
 235              		.cfi_offset 4, -12
 236              		.cfi_offset 5, -8
 237              		.cfi_offset 14, -4
 238 0002 83B0     		sub	sp, sp, #12
 239              	.LCFI6:
 240              		.cfi_def_cfa_offset 24
 241 0004 0546     		mov	r5, r0
  88:Src/main.c    ****     uint8_t message[1];
 242              		.loc 1 88 0
ARM GAS  /tmp/ccbFgecN.s 			page 12


 243 0006 0C4C     		ldr	r4, .L15
 244 0008 0022     		movs	r2, #0
 245 000a 1021     		movs	r1, #16
 246 000c 2046     		mov	r0, r4
 247              	.LVL6:
 248 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 249              	.LVL7:
  90:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 250              		.loc 1 90 0
 251 0012 02A9     		add	r1, sp, #8
 252 0014 01F8045D 		strb	r5, [r1, #-4]!
  91:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 253              		.loc 1 91 0
 254 0018 4FF0FF33 		mov	r3, #-1
 255 001c 0122     		movs	r2, #1
 256 001e 0748     		ldr	r0, .L15+4
 257 0020 FFF7FEFF 		bl	HAL_SPI_Transmit
 258              	.LVL8:
  92:Src/main.c    ****     HAL_Delay(10);
 259              		.loc 1 92 0
 260 0024 0122     		movs	r2, #1
 261 0026 1021     		movs	r1, #16
 262 0028 2046     		mov	r0, r4
 263 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 264              	.LVL9:
  93:Src/main.c    **** }
 265              		.loc 1 93 0
 266 002e 0A20     		movs	r0, #10
 267 0030 FFF7FEFF 		bl	HAL_Delay
 268              	.LVL10:
  94:Src/main.c    **** 
 269              		.loc 1 94 0
 270 0034 03B0     		add	sp, sp, #12
 271              	.LCFI7:
 272              		.cfi_def_cfa_offset 12
 273              		@ sp needed
 274 0036 30BD     		pop	{r4, r5, pc}
 275              	.LVL11:
 276              	.L16:
 277              		.align	2
 278              	.L15:
 279 0038 00080140 		.word	1073809408
 280 003c 00000000 		.word	hspi1
 281              		.cfi_endproc
 282              	.LFE66:
 284              		.section	.text.set_ch,"ax",%progbits
 285              		.align	1
 286              		.global	set_ch
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu softvfp
 292              	set_ch:
 293              	.LFB67:
  96:Src/main.c    ****     if (gain == 8){
 294              		.loc 1 96 0
 295              		.cfi_startproc
ARM GAS  /tmp/ccbFgecN.s 			page 13


 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              	.LVL12:
 299 0000 38B5     		push	{r3, r4, r5, lr}
 300              	.LCFI8:
 301              		.cfi_def_cfa_offset 16
 302              		.cfi_offset 3, -16
 303              		.cfi_offset 4, -12
 304              		.cfi_offset 5, -8
 305              		.cfi_offset 14, -4
  97:Src/main.c    ****         gain = 5;
 306              		.loc 1 97 0
 307 0002 0828     		cmp	r0, #8
 308 0004 04D0     		beq	.L23
 309 0006 0546     		mov	r5, r0
 100:Src/main.c    ****         gain = 6;
 310              		.loc 1 100 0
 311 0008 0C28     		cmp	r0, #12
 312 000a 03D0     		beq	.L26
 313              	.L18:
 314              	.LVL13:
 315              	.LBB3:
 103:Src/main.c    ****         send(69+i);
 316              		.loc 1 103 0
 317 000c 0024     		movs	r4, #0
 318 000e 11E0     		b	.L19
 319              	.LVL14:
 320              	.L23:
 321              	.LBE3:
  98:Src/main.c    ****     }
 322              		.loc 1 98 0
 323 0010 0525     		movs	r5, #5
 324 0012 FBE7     		b	.L18
 325              	.L26:
 101:Src/main.c    ****     }
 326              		.loc 1 101 0
 327 0014 0625     		movs	r5, #6
 328 0016 F9E7     		b	.L18
 329              	.LVL15:
 330              	.L20:
 331              	.LBB4:
 104:Src/main.c    ****         send(0);
 332              		.loc 1 104 0 discriminator 3
 333 0018 04F14500 		add	r0, r4, #69
 334 001c FFF7FEFF 		bl	send
 335              	.LVL16:
 105:Src/main.c    ****         send(0+(gain<<4));
 336              		.loc 1 105 0 discriminator 3
 337 0020 0020     		movs	r0, #0
 338 0022 FFF7FEFF 		bl	send
 339              	.LVL17:
 106:Src/main.c    ****         HAL_Delay(10);
 340              		.loc 1 106 0 discriminator 3
 341 0026 2801     		lsls	r0, r5, #4
 342 0028 FFF7FEFF 		bl	send
 343              	.LVL18:
 107:Src/main.c    ****     }
ARM GAS  /tmp/ccbFgecN.s 			page 14


 344              		.loc 1 107 0 discriminator 3
 345 002c 0A20     		movs	r0, #10
 346 002e FFF7FEFF 		bl	HAL_Delay
 347              	.LVL19:
 103:Src/main.c    ****         send(69+i);
 348              		.loc 1 103 0 discriminator 3
 349 0032 0134     		adds	r4, r4, #1
 350              	.LVL20:
 351              	.L19:
 103:Src/main.c    ****         send(69+i);
 352              		.loc 1 103 0 is_stmt 0 discriminator 1
 353 0034 012C     		cmp	r4, #1
 354 0036 EFDD     		ble	.L20
 355              	.LBE4:
 356              	.LBB5:
 109:Src/main.c    ****         send(69+i);
 357              		.loc 1 109 0 is_stmt 1
 358 0038 0224     		movs	r4, #2
 359              	.LVL21:
 360 003a 0DE0     		b	.L21
 361              	.LVL22:
 362              	.L22:
 110:Src/main.c    ****         send(0);
 363              		.loc 1 110 0 discriminator 3
 364 003c 04F14500 		add	r0, r4, #69
 365 0040 FFF7FEFF 		bl	send
 366              	.LVL23:
 111:Src/main.c    ****         send(144);
 367              		.loc 1 111 0 discriminator 3
 368 0044 0020     		movs	r0, #0
 369 0046 FFF7FEFF 		bl	send
 370              	.LVL24:
 112:Src/main.c    ****         HAL_Delay(10);
 371              		.loc 1 112 0 discriminator 3
 372 004a 9020     		movs	r0, #144
 373 004c FFF7FEFF 		bl	send
 374              	.LVL25:
 113:Src/main.c    ****     }
 375              		.loc 1 113 0 discriminator 3
 376 0050 0A20     		movs	r0, #10
 377 0052 FFF7FEFF 		bl	HAL_Delay
 378              	.LVL26:
 109:Src/main.c    ****         send(69+i);
 379              		.loc 1 109 0 discriminator 3
 380 0056 0134     		adds	r4, r4, #1
 381              	.LVL27:
 382              	.L21:
 109:Src/main.c    ****         send(69+i);
 383              		.loc 1 109 0 is_stmt 0 discriminator 1
 384 0058 072C     		cmp	r4, #7
 385 005a EFDD     		ble	.L22
 386              	.LBE5:
 116:Src/main.c    **** 
 387              		.loc 1 116 0 is_stmt 1
 388 005c 38BD     		pop	{r3, r4, r5, pc}
 389              		.cfi_endproc
 390              	.LFE67:
ARM GAS  /tmp/ccbFgecN.s 			page 15


 392              		.section	.text.read,"ax",%progbits
 393              		.align	1
 394              		.global	read
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	read:
 401              	.LFB68:
 118:Src/main.c    ****     int t = HAL_GetTick();
 402              		.loc 1 118 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 16
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              	.LVL28:
 407 0000 70B5     		push	{r4, r5, r6, lr}
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 16
 410              		.cfi_offset 4, -16
 411              		.cfi_offset 5, -12
 412              		.cfi_offset 6, -8
 413              		.cfi_offset 14, -4
 414 0002 84B0     		sub	sp, sp, #16
 415              	.LCFI10:
 416              		.cfi_def_cfa_offset 32
 417 0004 0546     		mov	r5, r0
 119:Src/main.c    ****     while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 418              		.loc 1 119 0
 419 0006 FFF7FEFF 		bl	HAL_GetTick
 420              	.LVL29:
 421 000a 0646     		mov	r6, r0
 422              	.LVL30:
 423              	.L28:
 120:Src/main.c    ****         HAL_Delay(25);
 424              		.loc 1 120 0
 425 000c 0821     		movs	r1, #8
 426 000e 3C48     		ldr	r0, .L37
 427 0010 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 428              	.LVL31:
 429 0014 90B3     		cbz	r0, .L32
 430              	.LBB6:
 121:Src/main.c    ****         char data[] = ".";
 431              		.loc 1 121 0
 432 0016 1920     		movs	r0, #25
 433 0018 FFF7FEFF 		bl	HAL_Delay
 434              	.LVL32:
 122:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, sizeof(data), 1000);
 435              		.loc 1 122 0
 436 001c 04A9     		add	r1, sp, #16
 437 001e 2E23     		movs	r3, #46
 438 0020 21F8103D 		strh	r3, [r1, #-16]!	@ movhi
 123:Src/main.c    **** 
 439              		.loc 1 123 0
 440 0024 4FF47A73 		mov	r3, #1000
 441 0028 0222     		movs	r2, #2
 442 002a 3648     		ldr	r0, .L37+4
 443 002c FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccbFgecN.s 			page 16


 444              	.LVL33:
 125:Src/main.c    ****             char data[] = "Resetting \n";
 445              		.loc 1 125 0
 446 0030 06F57A74 		add	r4, r6, #1000
 447 0034 FFF7FEFF 		bl	HAL_GetTick
 448              	.LVL34:
 449 0038 8442     		cmp	r4, r0
 450 003a E7D2     		bcs	.L28
 451              	.LBB7:
 126:Src/main.c    ****             HAL_UART_Transmit(&huart1, (uint8_t*)data, sizeof(data), 1000);
 452              		.loc 1 126 0
 453 003c 324B     		ldr	r3, .L37+8
 454 003e 01AC     		add	r4, sp, #4
 455 0040 93E80700 		ldm	r3, {r0, r1, r2}
 456 0044 84E80700 		stm	r4, {r0, r1, r2}
 127:Src/main.c    ****             send(2);
 457              		.loc 1 127 0
 458 0048 4FF47A73 		mov	r3, #1000
 459 004c 0C22     		movs	r2, #12
 460 004e 2146     		mov	r1, r4
 461 0050 2C48     		ldr	r0, .L37+4
 462 0052 FFF7FEFF 		bl	HAL_UART_Transmit
 463              	.LVL35:
 128:Src/main.c    ****             HAL_Delay(1);
 464              		.loc 1 128 0
 465 0056 0220     		movs	r0, #2
 466 0058 FFF7FEFF 		bl	send
 467              	.LVL36:
 129:Src/main.c    ****             send(8);
 468              		.loc 1 129 0
 469 005c 0120     		movs	r0, #1
 470 005e FFF7FEFF 		bl	HAL_Delay
 471              	.LVL37:
 130:Src/main.c    **** //            ADC_setup();
 472              		.loc 1 130 0
 473 0062 0820     		movs	r0, #8
 474 0064 FFF7FEFF 		bl	send
 475              	.LVL38:
 132:Src/main.c    ****             if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)) return;
 476              		.loc 1 132 0
 477 0068 4FF4FA70 		mov	r0, #500
 478 006c FFF7FEFF 		bl	HAL_Delay
 479              	.LVL39:
 133:Src/main.c    ****             break;
 480              		.loc 1 133 0
 481 0070 0821     		movs	r1, #8
 482 0072 2348     		ldr	r0, .L37
 483 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 484              	.LVL40:
 485 0078 0028     		cmp	r0, #0
 486 007a 3ED1     		bne	.L27
 487              	.L32:
 488              	.LBE7:
 489              	.LBE6:
 137:Src/main.c    ****     for(int j =0; j<CHANNELS+1; j++){
 490              		.loc 1 137 0
 491 007c 0022     		movs	r2, #0
ARM GAS  /tmp/ccbFgecN.s 			page 17


 492 007e 1021     		movs	r1, #16
 493 0080 1F48     		ldr	r0, .L37
 494 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 495              	.LVL41:
 496              	.LBB8:
 138:Src/main.c    ****         r[j] = 0;
 497              		.loc 1 138 0
 498 0086 0024     		movs	r4, #0
 499 0088 2DE0     		b	.L34
 500              	.LVL42:
 501              	.L35:
 502              	.LBB9:
 139:Src/main.c    ****         uint8_t data;
 503              		.loc 1 139 0 discriminator 3
 504 008a 0023     		movs	r3, #0
 505 008c 45F82430 		str	r3, [r5, r4, lsl #2]
 141:Src/main.c    ****         r[j] += data<<16;
 506              		.loc 1 141 0 discriminator 3
 507 0090 1E4E     		ldr	r6, .L37+12
 508 0092 6423     		movs	r3, #100
 509 0094 0122     		movs	r2, #1
 510 0096 01A9     		add	r1, sp, #4
 511 0098 3046     		mov	r0, r6
 512 009a FFF7FEFF 		bl	HAL_SPI_Receive
 513              	.LVL43:
 142:Src/main.c    ****         HAL_SPI_Receive(&hspi1, &data, 1, 100);
 514              		.loc 1 142 0 discriminator 3
 515 009e 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 516 00a2 55F82430 		ldr	r3, [r5, r4, lsl #2]
 517 00a6 03EB0243 		add	r3, r3, r2, lsl #16
 518 00aa 45F82430 		str	r3, [r5, r4, lsl #2]
 143:Src/main.c    ****         r[j] += data<<8;
 519              		.loc 1 143 0 discriminator 3
 520 00ae 6423     		movs	r3, #100
 521 00b0 0122     		movs	r2, #1
 522 00b2 01A9     		add	r1, sp, #4
 523 00b4 3046     		mov	r0, r6
 524 00b6 FFF7FEFF 		bl	HAL_SPI_Receive
 525              	.LVL44:
 144:Src/main.c    ****         HAL_SPI_Receive(&hspi1, &data, 1, 100);
 526              		.loc 1 144 0 discriminator 3
 527 00ba 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 528 00be 55F82430 		ldr	r3, [r5, r4, lsl #2]
 529 00c2 03EB0223 		add	r3, r3, r2, lsl #8
 530 00c6 45F82430 		str	r3, [r5, r4, lsl #2]
 145:Src/main.c    ****         r[j] += data;
 531              		.loc 1 145 0 discriminator 3
 532 00ca 6423     		movs	r3, #100
 533 00cc 0122     		movs	r2, #1
 534 00ce 01A9     		add	r1, sp, #4
 535 00d0 3046     		mov	r0, r6
 536 00d2 FFF7FEFF 		bl	HAL_SPI_Receive
 537              	.LVL45:
 146:Src/main.c    ****     }
 538              		.loc 1 146 0 discriminator 3
 539 00d6 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 540 00da 55F82430 		ldr	r3, [r5, r4, lsl #2]
ARM GAS  /tmp/ccbFgecN.s 			page 18


 541 00de 1344     		add	r3, r3, r2
 542 00e0 45F82430 		str	r3, [r5, r4, lsl #2]
 543              	.LBE9:
 138:Src/main.c    ****         r[j] = 0;
 544              		.loc 1 138 0 discriminator 3
 545 00e4 0134     		adds	r4, r4, #1
 546              	.LVL46:
 547              	.L34:
 138:Src/main.c    ****         r[j] = 0;
 548              		.loc 1 138 0 is_stmt 0 discriminator 1
 549 00e6 022C     		cmp	r4, #2
 550 00e8 CFDD     		ble	.L35
 551              	.LBE8:
 148:Src/main.c    ****     HAL_Delay(1);
 552              		.loc 1 148 0 is_stmt 1
 553 00ea 0122     		movs	r2, #1
 554 00ec 1021     		movs	r1, #16
 555 00ee 0448     		ldr	r0, .L37
 556 00f0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 557              	.LVL47:
 149:Src/main.c    **** }
 558              		.loc 1 149 0
 559 00f4 0120     		movs	r0, #1
 560 00f6 FFF7FEFF 		bl	HAL_Delay
 561              	.LVL48:
 562              	.L27:
 150:Src/main.c    **** 
 563              		.loc 1 150 0
 564 00fa 04B0     		add	sp, sp, #16
 565              	.LCFI11:
 566              		.cfi_def_cfa_offset 16
 567              		@ sp needed
 568 00fc 70BD     		pop	{r4, r5, r6, pc}
 569              	.LVL49:
 570              	.L38:
 571 00fe 00BF     		.align	2
 572              	.L37:
 573 0100 00080140 		.word	1073809408
 574 0104 00000000 		.word	huart1
 575 0108 00000000 		.word	.LC0
 576 010c 00000000 		.word	hspi1
 577              		.cfi_endproc
 578              	.LFE68:
 580              		.section	.text.ADC_setup,"ax",%progbits
 581              		.align	1
 582              		.global	ADC_setup
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu softvfp
 588              	ADC_setup:
 589              	.LFB69:
 152:Src/main.c    ****     set_ch(1);
 590              		.loc 1 152 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccbFgecN.s 			page 19


 594 0000 08B5     		push	{r3, lr}
 595              	.LCFI12:
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 3, -8
 598              		.cfi_offset 14, -4
 153:Src/main.c    ****     HAL_Delay(1);
 599              		.loc 1 153 0
 600 0002 0120     		movs	r0, #1
 601 0004 FFF7FEFF 		bl	set_ch
 602              	.LVL50:
 154:Src/main.c    ****     send(0x41);
 603              		.loc 1 154 0
 604 0008 0120     		movs	r0, #1
 605 000a FFF7FEFF 		bl	HAL_Delay
 606              	.LVL51:
 155:Src/main.c    ****     send(0);
 607              		.loc 1 155 0
 608 000e 4120     		movs	r0, #65
 609 0010 FFF7FEFF 		bl	send
 610              	.LVL52:
 156:Src/main.c    ****     send(0xD6);
 611              		.loc 1 156 0
 612 0014 0020     		movs	r0, #0
 613 0016 FFF7FEFF 		bl	send
 614              	.LVL53:
 157:Src/main.c    ****     HAL_Delay(1);
 615              		.loc 1 157 0
 616 001a D620     		movs	r0, #214
 617 001c FFF7FEFF 		bl	send
 618              	.LVL54:
 158:Src/main.c    ****     send(0x08);
 619              		.loc 1 158 0
 620 0020 0120     		movs	r0, #1
 621 0022 FFF7FEFF 		bl	HAL_Delay
 622              	.LVL55:
 159:Src/main.c    ****     HAL_Delay(1);
 623              		.loc 1 159 0
 624 0026 0820     		movs	r0, #8
 625 0028 FFF7FEFF 		bl	send
 626              	.LVL56:
 160:Src/main.c    **** }
 627              		.loc 1 160 0
 628 002c 0120     		movs	r0, #1
 629 002e FFF7FEFF 		bl	HAL_Delay
 630              	.LVL57:
 161:Src/main.c    **** /* USER CODE END 0 */
 631              		.loc 1 161 0
 632 0032 08BD     		pop	{r3, pc}
 633              		.cfi_endproc
 634              	.LFE69:
 636              		.section	.text.SystemClock_Config,"ax",%progbits
 637              		.align	1
 638              		.global	SystemClock_Config
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu softvfp
ARM GAS  /tmp/ccbFgecN.s 			page 20


 644              	SystemClock_Config:
 645              	.LFB71:
 236:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 646              		.loc 1 236 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 64
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650 0000 10B5     		push	{r4, lr}
 651              	.LCFI13:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 4, -8
 654              		.cfi_offset 14, -4
 655 0002 90B0     		sub	sp, sp, #64
 656              	.LCFI14:
 657              		.cfi_def_cfa_offset 72
 237:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 658              		.loc 1 237 0
 659 0004 2422     		movs	r2, #36
 660 0006 0021     		movs	r1, #0
 661 0008 07A8     		add	r0, sp, #28
 662 000a FFF7FEFF 		bl	memset
 663              	.LVL58:
 238:Src/main.c    **** 
 664              		.loc 1 238 0
 665 000e 0024     		movs	r4, #0
 666 0010 0194     		str	r4, [sp, #4]
 667 0012 0294     		str	r4, [sp, #8]
 668 0014 0394     		str	r4, [sp, #12]
 669 0016 0494     		str	r4, [sp, #16]
 670 0018 0594     		str	r4, [sp, #20]
 242:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 671              		.loc 1 242 0
 672 001a 0223     		movs	r3, #2
 673 001c 0693     		str	r3, [sp, #24]
 243:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 674              		.loc 1 243 0
 675 001e 0123     		movs	r3, #1
 676 0020 0A93     		str	r3, [sp, #40]
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 677              		.loc 1 244 0
 678 0022 1023     		movs	r3, #16
 679 0024 0B93     		str	r3, [sp, #44]
 246:Src/main.c    ****   {
 680              		.loc 1 246 0
 681 0026 06A8     		add	r0, sp, #24
 682 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 683              	.LVL59:
 252:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 684              		.loc 1 252 0
 685 002c 0F23     		movs	r3, #15
 686 002e 0193     		str	r3, [sp, #4]
 254:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 687              		.loc 1 254 0
 688 0030 0294     		str	r4, [sp, #8]
 255:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 689              		.loc 1 255 0
 690 0032 0394     		str	r4, [sp, #12]
ARM GAS  /tmp/ccbFgecN.s 			page 21


 256:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 691              		.loc 1 256 0
 692 0034 0494     		str	r4, [sp, #16]
 257:Src/main.c    **** 
 693              		.loc 1 257 0
 694 0036 0594     		str	r4, [sp, #20]
 259:Src/main.c    ****   {
 695              		.loc 1 259 0
 696 0038 2146     		mov	r1, r4
 697 003a 01A8     		add	r0, sp, #4
 698 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 699              	.LVL60:
 263:Src/main.c    **** 
 700              		.loc 1 263 0
 701 0040 10B0     		add	sp, sp, #64
 702              	.LCFI15:
 703              		.cfi_def_cfa_offset 8
 704              		@ sp needed
 705 0042 10BD     		pop	{r4, pc}
 706              		.cfi_endproc
 707              	.LFE71:
 709              		.global	__aeabi_i2f
 710              		.global	__aeabi_f2d
 711              		.global	__aeabi_dmul
 712              		.global	__aeabi_d2f
 713              		.global	__aeabi_fcmplt
 714              		.global	__aeabi_f2iz
 715              		.global	__aeabi_fmul
 716              		.section	.text.main,"ax",%progbits
 717              		.align	1
 718              		.global	main
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 722              		.fpu softvfp
 724              	main:
 725              	.LFB70:
 169:Src/main.c    ****   /* USER CODE BEGIN 1 */
 726              		.loc 1 169 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 160
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 731              	.LCFI16:
 732              		.cfi_def_cfa_offset 20
 733              		.cfi_offset 4, -20
 734              		.cfi_offset 5, -16
 735              		.cfi_offset 6, -12
 736              		.cfi_offset 7, -8
 737              		.cfi_offset 14, -4
 738 0002 ABB0     		sub	sp, sp, #172
 739              	.LCFI17:
 740              		.cfi_def_cfa_offset 192
 177:Src/main.c    **** 
 741              		.loc 1 177 0
 742 0004 FFF7FEFF 		bl	HAL_Init
 743              	.LVL61:
ARM GAS  /tmp/ccbFgecN.s 			page 22


 184:Src/main.c    **** 
 744              		.loc 1 184 0
 745 0008 FFF7FEFF 		bl	SystemClock_Config
 746              	.LVL62:
 191:Src/main.c    ****   MX_SPI1_Init();
 747              		.loc 1 191 0
 748 000c FFF7FEFF 		bl	MX_GPIO_Init
 749              	.LVL63:
 192:Src/main.c    ****   MX_USART1_UART_Init();
 750              		.loc 1 192 0
 751 0010 FFF7FEFF 		bl	MX_SPI1_Init
 752              	.LVL64:
 193:Src/main.c    ****   /* USER CODE BEGIN 2 */
 753              		.loc 1 193 0
 754 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 755              	.LVL65:
 756 0018 53E0     		b	.L53
 757              	.LVL66:
 758              	.L60:
 759              	.LBB10:
 760              	.LBB11:
 761              	.LBB12:
 212:Src/main.c    ****         volts = (volts < 0) ? -volts: volts;
 762              		.loc 1 212 0
 763 001a 344E     		ldr	r6, .L62
 764 001c 29E0     		b	.L45
 765              	.LVL67:
 766              	.L61:
 213:Src/main.c    ****         int iv = volts;
 767              		.loc 1 213 0 discriminator 1
 768 001e 04F10044 		add	r4, r4, #-2147483648
 769              	.LVL68:
 770 0022 2CE0     		b	.L47
 771              	.LVL69:
 772              	.L50:
 222:Src/main.c    ****     }
 773              		.loc 1 222 0 discriminator 2
 774 0024 0132     		adds	r2, r2, #1
 775              	.LVL70:
 776 0026 6423     		movs	r3, #100
 777 0028 92B2     		uxth	r2, r2
 778              	.LVL71:
 779 002a 08A9     		add	r1, sp, #32
 780 002c 3048     		ldr	r0, .L62+4
 781 002e FFF7FEFF 		bl	HAL_UART_Transmit
 782              	.LVL72:
 783              	.LBE12:
 209:Src/main.c    ****         float volts = ((float) result[i])*8000.0/16777216.0;
 784              		.loc 1 209 0 discriminator 2
 785 0032 0135     		adds	r5, r5, #1
 786              	.LVL73:
 787              	.L44:
 209:Src/main.c    ****         float volts = ((float) result[i])*8000.0/16777216.0;
 788              		.loc 1 209 0 is_stmt 0 discriminator 1
 789 0034 022D     		cmp	r5, #2
 790 0036 3EDC     		bgt	.L59
 791              	.LBB13:
ARM GAS  /tmp/ccbFgecN.s 			page 23


 210:Src/main.c    ****         result[i] = 0;
 792              		.loc 1 210 0 is_stmt 1
 793 0038 2AAB     		add	r3, sp, #168
 794 003a 03EB8506 		add	r6, r3, r5, lsl #2
 795 003e 56F8240C 		ldr	r0, [r6, #-36]
 796 0042 FFF7FEFF 		bl	__aeabi_i2f
 797              	.LVL74:
 798 0046 FFF7FEFF 		bl	__aeabi_f2d
 799              	.LVL75:
 800 004a 0022     		movs	r2, #0
 801 004c 294B     		ldr	r3, .L62+8
 802 004e FFF7FEFF 		bl	__aeabi_dmul
 803              	.LVL76:
 804 0052 0022     		movs	r2, #0
 805 0054 284B     		ldr	r3, .L62+12
 806 0056 FFF7FEFF 		bl	__aeabi_dmul
 807              	.LVL77:
 808 005a FFF7FEFF 		bl	__aeabi_d2f
 809              	.LVL78:
 810 005e 0446     		mov	r4, r0
 811              	.LVL79:
 211:Src/main.c    ****         char *s = (volts < 0) ? "-" : "+";
 812              		.loc 1 211 0
 813 0060 0023     		movs	r3, #0
 814 0062 46F8243C 		str	r3, [r6, #-36]
 212:Src/main.c    ****         volts = (volts < 0) ? -volts: volts;
 815              		.loc 1 212 0
 816 0066 0021     		movs	r1, #0
 817 0068 FFF7FEFF 		bl	__aeabi_fcmplt
 818              	.LVL80:
 819 006c 0028     		cmp	r0, #0
 820 006e D4D1     		bne	.L60
 821 0070 224E     		ldr	r6, .L62+16
 822              	.L45:
 823              	.LVL81:
 213:Src/main.c    ****         int iv = volts;
 824              		.loc 1 213 0 discriminator 4
 825 0072 0021     		movs	r1, #0
 826 0074 2046     		mov	r0, r4
 827 0076 FFF7FEFF 		bl	__aeabi_fcmplt
 828              	.LVL82:
 829 007a 0028     		cmp	r0, #0
 830 007c CFD1     		bne	.L61
 831              	.LVL83:
 832              	.L47:
 214:Src/main.c    ****         int dv = volts*100000;
 833              		.loc 1 214 0 discriminator 4
 834 007e 2046     		mov	r0, r4
 835 0080 FFF7FEFF 		bl	__aeabi_f2iz
 836              	.LVL84:
 837 0084 0746     		mov	r7, r0
 838              	.LVL85:
 215:Src/main.c    ****         char str[100];
 839              		.loc 1 215 0 discriminator 4
 840 0086 1E49     		ldr	r1, .L62+20
 841 0088 2046     		mov	r0, r4
 842              	.LVL86:
ARM GAS  /tmp/ccbFgecN.s 			page 24


 843 008a FFF7FEFF 		bl	__aeabi_fmul
 844              	.LVL87:
 845 008e FFF7FEFF 		bl	__aeabi_f2iz
 846              	.LVL88:
 217:Src/main.c    ****         int i = 0;
 847              		.loc 1 217 0 discriminator 4
 848 0092 0090     		str	r0, [sp]
 849 0094 3B46     		mov	r3, r7
 850 0096 3246     		mov	r2, r6
 851 0098 1A49     		ldr	r1, .L62+24
 852 009a 08A8     		add	r0, sp, #32
 853              	.LVL89:
 854 009c FFF7FEFF 		bl	sprintf
 855              	.LVL90:
 218:Src/main.c    ****         for(; i < sizeof(str); i++){
 856              		.loc 1 218 0 discriminator 4
 857 00a0 0022     		movs	r2, #0
 858              	.LVL91:
 859              	.L49:
 219:Src/main.c    ****             if(str[i] == ',') break;
 860              		.loc 1 219 0 discriminator 1
 861 00a2 632A     		cmp	r2, #99
 862 00a4 BED8     		bhi	.L50
 220:Src/main.c    ****         }
 863              		.loc 1 220 0
 864 00a6 2AAB     		add	r3, sp, #168
 865 00a8 1344     		add	r3, r3, r2
 866 00aa 13F8883C 		ldrb	r3, [r3, #-136]	@ zero_extendqisi2
 867 00ae 2C2B     		cmp	r3, #44
 868 00b0 B8D0     		beq	.L50
 219:Src/main.c    ****             if(str[i] == ',') break;
 869              		.loc 1 219 0
 870 00b2 0132     		adds	r2, r2, #1
 871              	.LVL92:
 872 00b4 F5E7     		b	.L49
 873              	.LVL93:
 874              	.L59:
 875              	.LBE13:
 876              	.LBE11:
 224:Src/main.c    **** 
 877              		.loc 1 224 0
 878 00b6 6423     		movs	r3, #100
 879 00b8 0122     		movs	r2, #1
 880 00ba 1349     		ldr	r1, .L62+28
 881 00bc 0C48     		ldr	r0, .L62+4
 882 00be FFF7FEFF 		bl	HAL_UART_Transmit
 883              	.LVL94:
 884              	.L53:
 203:Src/main.c    ****     char stat[22];
 885              		.loc 1 203 0
 886 00c2 21A8     		add	r0, sp, #132
 887 00c4 FFF7FEFF 		bl	read
 888              	.LVL95:
 205:Src/main.c    ****     HAL_UART_Transmit (&huart1, (uint8_t *)stat, 22, 100);
 889              		.loc 1 205 0
 890 00c8 219A     		ldr	r2, [sp, #132]
 891 00ca 130C     		lsrs	r3, r2, #16
ARM GAS  /tmp/ccbFgecN.s 			page 25


 892 00cc 92B2     		uxth	r2, r2
 893 00ce 0F49     		ldr	r1, .L62+32
 894 00d0 02A8     		add	r0, sp, #8
 895 00d2 FFF7FEFF 		bl	sprintf
 896              	.LVL96:
 206:Src/main.c    ****     result[0] = 0;
 897              		.loc 1 206 0
 898 00d6 6423     		movs	r3, #100
 899 00d8 1622     		movs	r2, #22
 900 00da 02A9     		add	r1, sp, #8
 901 00dc 0448     		ldr	r0, .L62+4
 902 00de FFF7FEFF 		bl	HAL_UART_Transmit
 903              	.LVL97:
 207:Src/main.c    **** 
 904              		.loc 1 207 0
 905 00e2 0023     		movs	r3, #0
 906 00e4 2193     		str	r3, [sp, #132]
 907              	.LVL98:
 908              	.LBB14:
 209:Src/main.c    ****         float volts = ((float) result[i])*8000.0/16777216.0;
 909              		.loc 1 209 0
 910 00e6 0125     		movs	r5, #1
 911 00e8 A4E7     		b	.L44
 912              	.L63:
 913 00ea 00BF     		.align	2
 914              	.L62:
 915 00ec 00000000 		.word	.LC1
 916 00f0 00000000 		.word	huart1
 917 00f4 0040BF40 		.word	1086275584
 918 00f8 0000703E 		.word	1047527424
 919 00fc 04000000 		.word	.LC2
 920 0100 0050C347 		.word	1203982336
 921 0104 1C000000 		.word	.LC4
 922 0108 28000000 		.word	.LC5
 923 010c 08000000 		.word	.LC3
 924              	.LBE14:
 925              	.LBE10:
 926              		.cfi_endproc
 927              	.LFE70:
 929              		.section	.text.Error_Handler,"ax",%progbits
 930              		.align	1
 931              		.global	Error_Handler
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 935              		.fpu softvfp
 937              	Error_Handler:
 938              	.LFB75:
 365:Src/main.c    **** 
 366:Src/main.c    **** /* USER CODE BEGIN 4 */
 367:Src/main.c    **** 
 368:Src/main.c    **** /* USER CODE END 4 */
 369:Src/main.c    **** 
 370:Src/main.c    **** /**
 371:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 372:Src/main.c    ****   * @retval None
 373:Src/main.c    ****   */
ARM GAS  /tmp/ccbFgecN.s 			page 26


 374:Src/main.c    **** void Error_Handler(void)
 375:Src/main.c    **** {
 939              		.loc 1 375 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943              		@ link register save eliminated.
 376:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 377:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 378:Src/main.c    **** 
 379:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 380:Src/main.c    **** }
 944              		.loc 1 380 0
 945 0000 7047     		bx	lr
 946              		.cfi_endproc
 947              	.LFE75:
 949              		.comm	huart1,64,4
 950              		.comm	hspi1,88,4
 951              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 952              		.align	2
 953              	.LC1:
 954 0000 2D00     		.ascii	"-\000"
 955 0002 0000     		.space	2
 956              	.LC2:
 957 0004 2B00     		.ascii	"+\000"
 958 0006 0000     		.space	2
 959              	.LC3:
 960 0008 53746174 		.ascii	"Status: %5d %5d \012\000"
 960      75733A20 
 960      25356420 
 960      25356420 
 960      0A00
 961 001a 0000     		.space	2
 962              	.LC4:
 963 001c 20257325 		.ascii	" %s%d.%05d,\000"
 963      642E2530 
 963      35642C00 
 964              	.LC5:
 965 0028 0A00     		.ascii	"\012\000"
 966              		.section	.rodata.read.str1.4,"aMS",%progbits,1
 967              		.align	2
 968              	.LC0:
 969 0000 52657365 		.ascii	"Resetting \012\000"
 969      7474696E 
 969      67200A00 
 970              		.text
 971              	.Letext0:
 972              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 973              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 974              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 975              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 976              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 977              		.file 7 "/usr/include/newlib/sys/lock.h"
 978              		.file 8 "/usr/include/newlib/sys/_types.h"
 979              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 980              		.file 10 "/usr/include/newlib/sys/reent.h"
 981              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
ARM GAS  /tmp/ccbFgecN.s 			page 27


 982              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 983              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 984              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 985              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 986              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 987              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 988              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 989              		.file 19 "/usr/include/newlib/stdio.h"
 990              		.file 20 "<built-in>"
ARM GAS  /tmp/ccbFgecN.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccbFgecN.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccbFgecN.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccbFgecN.s:99     .text.MX_GPIO_Init:000000000000005c $d
     /tmp/ccbFgecN.s:105    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccbFgecN.s:111    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccbFgecN.s:160    .text.MX_SPI1_Init:0000000000000030 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccbFgecN.s:166    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccbFgecN.s:172    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccbFgecN.s:212    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccbFgecN.s:218    .text.send:0000000000000000 $t
     /tmp/ccbFgecN.s:225    .text.send:0000000000000000 send
     /tmp/ccbFgecN.s:279    .text.send:0000000000000038 $d
     /tmp/ccbFgecN.s:285    .text.set_ch:0000000000000000 $t
     /tmp/ccbFgecN.s:292    .text.set_ch:0000000000000000 set_ch
     /tmp/ccbFgecN.s:393    .text.read:0000000000000000 $t
     /tmp/ccbFgecN.s:400    .text.read:0000000000000000 read
     /tmp/ccbFgecN.s:573    .text.read:0000000000000100 $d
     /tmp/ccbFgecN.s:581    .text.ADC_setup:0000000000000000 $t
     /tmp/ccbFgecN.s:588    .text.ADC_setup:0000000000000000 ADC_setup
     /tmp/ccbFgecN.s:637    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccbFgecN.s:644    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccbFgecN.s:717    .text.main:0000000000000000 $t
     /tmp/ccbFgecN.s:724    .text.main:0000000000000000 main
     /tmp/ccbFgecN.s:915    .text.main:00000000000000ec $d
     /tmp/ccbFgecN.s:930    .text.Error_Handler:0000000000000000 $t
     /tmp/ccbFgecN.s:937    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccbFgecN.s:952    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccbFgecN.s:967    .rodata.read.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_UART_Init
HAL_SPI_Transmit
HAL_Delay
HAL_GetTick
HAL_GPIO_ReadPin
HAL_UART_Transmit
HAL_SPI_Receive
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_i2f
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
__aeabi_fcmplt
__aeabi_f2iz
__aeabi_fmul
HAL_Init
sprintf
